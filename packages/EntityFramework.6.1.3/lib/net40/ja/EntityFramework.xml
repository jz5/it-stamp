<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
      <summary>プロパティに配置される属性を表します。そのプロパティがマップされるデータベースの列にインデックスがあることを示します。</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
      <summary>規約によって名付けられ、特定の列の順序、クラスタリング、または一意性がないインデックスの新しい <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> インスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
      <summary>指定された名前で、特定の列の順序、クラスタリング、または一意性がないインデックスの新しい <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> インスタンスを初期化します。</summary>
      <param name="name">インデックス名。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
      <summary>指定された名前および列の順序であるが、指定されたクラスタリングまたは一意性がないインデックスの新しい <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> インスタンスを初期化します。</summary>
      <param name="name">インデックス名。</param>
      <param name="order">複数列インデックスの列の順序付けを決定するために使用する数。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>この属性が特定の属性と同じ名前および構成を指定するかどうかを判断します。</summary>
      <returns>このオブジェクトともう一方のオブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">比較する属性。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
      <summary>この属性が特定の属性と同じ名前および構成を指定するかどうかを判断します。</summary>
      <returns>このオブジェクトともう一方のオブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較する属性。</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
      <summary>このインデックスがクラスター化インデックスを定義するかどうかを示す値を取得または設定します。</summary>
      <returns>このインデックスがクラスター化インデックスを定義する場合は true、非クラスター化インデックスを定義する場合は false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
      <summary>
        <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> の値が設定されているかどうかを取得または設定します。</summary>
      <returns>
        <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> の値が設定されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
      <summary>一意のインデックスを定義するかどうかを示す値を取得または設定します。</summary>
      <returns>一意のインデックスを定義する場合は true。一意でないインデックスを定義する場合は false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
      <summary>
        <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> の値が設定されているかどうかを取得または設定します。</summary>
      <returns>
        <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> の値が設定されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
      <summary>インデックス名を取得または設定します。</summary>
      <returns>インデックス名。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
      <summary>複数列インデックスの列の順序付けを決定する数値を取得または設定します。列の順序が指定されていない場合は -1 になります。</summary>
      <returns>複数列インデックスの列の順序付けを決定する数値。列の順序が指定されていない場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
      <summary>このインスタンスの文字列表現を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
      <summary>すべての IndexAttribute インスタンスが型記述子によって 1 つのインスタンスに結合されることのないように、オブジェクト インスタンスごとに異なる ID を取得または設定します。</summary>
      <returns>オブジェクト インスタンスごとに異なる ID。</returns>
    </member>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>データベースが存在しない場合のみ、データベースの再作成および必要に応じてデータベースの再シードを行う IDatabaseInitializer の実装。データベースをシードするには、派生クラスを作成し、Seed メソッドをオーバーライドします。</summary>
      <typeparam name="TContext"> コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context"> コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>実際にコンテキストにデータを追加してシードするためにオーバーライドされるメソッド。既定の実装では、何も行われません。</summary>
      <param name="context"> シードするコンテキスト。 </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>このクラスのインスタンスは、<see cref="T:System.Data.Entity.DbContext" /> オブジェクトから取得され、DbContext または接続をサポートする実際のデータベースの管理に使用できます。管理には、データベースの作成、削除、存在の確認が含まれます。データベースの削除および存在の確認は、このクラスの静的メソッドを使用すると、(完全なコンテキストなしに) 接続のみを使用して実行できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>基になるストア接続でトランザクションを開始します。</summary>
      <returns>基になるストアのトランザクション オブジェクトへのアクセスをラップする <see cref="T:System.Data.Entity.DbContextTransaction" /> オブジェクト</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>指定の分離レベルを使用して、基になるストア接続でトランザクションを開始します。</summary>
      <returns>基になるストアのトランザクション オブジェクトへのアクセスをラップする <see cref="T:System.Data.Entity.DbContextTransaction" /> オブジェクト</returns>
      <param name="isolationLevel">基になるストア トランザクションを作成する際に使用されるデータベース分離レベル</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>すべてのコンテキスト操作のタイムアウト値の秒数を取得または設定します。既定値は null 値で、null は基になるプロバイダーの既定値が使用されることを示します。</summary>
      <returns>タイムアウトの秒数。プロバイダーの既定値を使用する場合は null。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>データベースに現在の Code First モデルとの互換性があるかどうかを確認します。</summary>
      <returns>コンテキスト内とデータベース内のモデル ハッシュが一致した場合は true、それ以外の場合は false。</returns>
      <param name="throwIfNoMetadata">true に設定されている場合、データベース内にモデル メタデータが見つからないと例外がスローされます。false に設定されている場合、メタデータが見つからないとこのメソッドは true を返します。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>このコンテキストで使用されている接続を返します。これによって、まだ接続が存在しない場合は、接続が作成されることがあります。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>バッキング コンテキストで定義されたモデルに対し、データベース サーバー上に新しいデータベースを作成します。データベースの初期化方法が実行される前にこのメソッドを呼び出すと、初期化方法の実行が無効になります。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>同じ名前のデータベースがサーバー上に存在しない場合に限り、バッキング コンテキストで定義されたモデルに対し、データベース サーバー上に新しいデータベースを作成します。</summary>
      <returns>データベースが存在しないため作成された場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Database.CurrentTransaction">
      <summary>基となるストア接続が登録されているトランザクションを取得します。NULL である可能性があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>データベース名または接続文字列のみから <see cref="T:System.Data.Common.DbConnection" /> を作成する際に使用する接続ファクトリ。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>データベースが存在する場合は、データベース サーバー上のデータベースを削除し、それ以外の場合は何も行われません。初期化子の外部からこのメソッドを呼び出すと、データベースが未初期化とマークされます。つまり、データベースを削除した後にもう一度使用しようとすると、初期化子のセットが再実行されて、通常はデータベースの再作成が自動的に試行されます。</summary>
      <returns>データベースが存在していたが削除された場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>データベースが存在する場合は、データベース サーバー上のデータベースを削除し、それ以外の場合は何も行われません。</summary>
      <returns>データベースが存在していたが削除された場合は true、それ以外の場合は false。</returns>
      <param name="existingConnection">データベースへの既存の接続。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>データベースが存在する場合は、データベース サーバー上のデータベースを削除し、それ以外の場合は何も行われません。<see cref="T:System.Data.Entity.DbContext" /> クラスのドキュメントで説明されているのと同じ方法で、指定したデータベース名または接続文字列を使用してデータベースへの接続が作成されます。</summary>
      <returns>データベースが存在していたが削除された場合は true、それ以外の場合は false。</returns>
      <param name="nameOrConnectionString">データベース名またはデータベースへの接続文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>指定したデータベースが現在のデータベースと等しいかどうかを判断します。</summary>
      <returns>指定されたデータベースが現在のデータベースと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するデータベース。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>データベースに対して指定した DDL/DML コマンドを実行します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>コマンド実行後にデータベースによって返される結果。</returns>
      <param name="transactionalBehavior">このコマンドのトランザクションの作成を制御します。</param>
      <param name="sql">コマンド文字列。</param>
      <param name="parameters">コマンド文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>データベースに対して指定した DDL/DML コマンドを実行します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>コマンド実行後にデータベースによって返される結果。</returns>
      <param name="sql">コマンド文字列。</param>
      <param name="parameters">コマンド文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>データベースに対して指定した DDL/DML コマンドを非同期に実行します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、コマンド実行後にデータベースによって返される結果が示されます。</returns>
      <param name="transactionalBehavior">このコマンドのトランザクションの作成を制御します。</param>
      <param name="sql">コマンド文字列。</param>
      <param name="parameters">コマンド文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>データベースに対して指定した DDL/DML コマンドを非同期に実行します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、コマンド実行後にデータベースによって返される結果が示されます。</returns>
      <param name="transactionalBehavior">このコマンドのトランザクションの作成を制御します。</param>
      <param name="sql">コマンド文字列。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">コマンド文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>データベースに対して指定した DDL/DML コマンドを非同期に実行します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、コマンド実行後にデータベースによって返される結果が示されます。</returns>
      <param name="sql">コマンド文字列。</param>
      <param name="parameters">コマンド文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>データベースに対して指定した DDL/DML コマンドを非同期に実行します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、コマンド実行後にデータベースによって返される結果が示されます。</returns>
      <param name="sql">コマンド文字列。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">コマンド文字列に適用するパラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>サーバー上にデータベースが存在するかどうかを確認します。</summary>
      <returns>データベースが存在する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>サーバー上にデータベースが存在するかどうかを確認します。</summary>
      <returns>データベースが存在する場合は true、それ以外の場合は false。</returns>
      <param name="existingConnection">データベースへの既存の接続。</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>サーバー上にデータベースが存在するかどうかを確認します。<see cref="T:System.Data.Entity.DbContext" /> クラスのドキュメントで説明されているのと同じ方法で、指定したデータベース名または接続文字列を使用してデータベースへの接続が作成されます。</summary>
      <returns>データベースが存在する場合は true、それ以外の場合は false。</returns>
      <param name="nameOrConnectionString">データベース名またはデータベースへの接続文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>このデータベースのハッシュ関数を返します。</summary>
      <returns>このデータベースのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>このコンテキストで、登録された <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> を実行します。"force" を true に設定すると、以前に実行したことがあるかどうかに関係なく、初期化子が実行されます。これは、アプリケーションの実行中にデータベースが削除され、初期化が必要になった場合に役立ちます。"force" を false に設定すると、初期化子は、このアプリケーション ドメインのこのコンテキスト、モデル、および接続に対してまだ実行されていない場合のみ実行されます。このメソッドは、通常、操作がトランザクションの一部である場合など、限定的に実行すると問題が発生する操作を開始する前にデータベースが作成されてシードされていることを確認する必要があるときに使用されます。</summary>
      <param name="force">true に設定されている場合、初期化子がすでに実行されていても、初期化子が実行されます。</param>
    </member>
    <member name="P:System.Data.Entity.Database.Log">
      <summary>このプロパティを設定して、<see cref="T:System.Data.Entity.DbContext" /> によって生成された SQL を指定されたデリゲートに記録します。たとえば、コンソールに記録するには、このプロパティを <see cref="M:System.Console.Write(System.String)" /> に設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>指定したコンテキスト型に使用するデータベースの初期化子を設定します。データベースの初期化子は、指定した <see cref="T:System.Data.Entity.DbContext" /> 型を使用してデータベースに初めてアクセスするときに呼び出されます。Code First コンテキストの既定の方法は、<see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> のインスタンスです。</summary>
      <param name="strategy">使用する初期化子。指定したコンテキスト型に対して初期化を無効にする場合は null。</param>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>指定したジェネリック型の要素を返す生の SQL クエリを作成します。型は、クエリから返される列の名前に一致するプロパティを持つ任意の型、または単純なプリミティブ型を指定できます。型は、エンティティ型でなくてもかまいません。返されたオブジェクトの型がエンティティ型であっても、このクエリの結果がコンテキストによって追跡されることはありません。<see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> メソッドを使用して、コンテキストによって追跡されるエンティティを返します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.SqlQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> オブジェクト。</returns>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">SQL クエリ文字列に適用するパラメーター。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">クエリによって返されるオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>指定した型の要素を返す生の SQL クエリを作成します。型は、クエリから返される列の名前に一致するプロパティを持つ任意の型、または単純なプリミティブ型を指定できます。型は、エンティティ型でなくてもかまいません。返されたオブジェクトの型がエンティティ型であっても、このクエリの結果がコンテキストによって追跡されることはありません。<see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> メソッドを使用して、コンテキストによって追跡されるエンティティを返します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> オブジェクト。</returns>
      <param name="elementType">クエリによって返されるオブジェクトの型。</param>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">SQL クエリ文字列に適用するパラメーター。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>データベースの文字列形式を返します。</summary>
      <returns>データベースの文字列形式。</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>Entity Framework で外部トランザクション内でコマンドを実行する必要がある場合、ユーザーは、<see cref="T:System.Data.Entity.Database" /> オブジェクトの外部で作成されたデータベース トランザクションを渡すことができます。または、null を渡して、フレームワークのそのトランザクションの情報をクリアします。</summary>
      <param name="transaction">外部トランザクション</param>
      <exception cref="T:System.InvalidOperationException">トランザクションが既に完了している場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Database" /> オブジェクトと関連している接続がすでに <see cref="T:System.Transactions.TransactionScope" /> トランザクションに登録されている場合にスローされます</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Database" /> に関連付けられた接続がすでにトランザクションに参加している場合にスローされます</exception>
      <exception cref="T:System.InvalidOperationException">トランザクションに関連付けられた接続が Entity Framework の接続と一致しない場合にスローされます。</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>このクラスから派生したクラスを <see cref="T:System.Data.Entity.DbContext" /> から派生したクラスと同じアセンブリに配置して、アプリケーションの Entity Framework 構成を定義できます。構成は、派生型のコンストラクターでこのクラスのプロテクト メソッドを呼び出し、プロテクト プロパティを設定することによって設定されます。使用する型は、アプリケーションの構成ファイルに登録することもできます。Entity Framework 構成の詳細については、http://go.microsoft.com/fwlink/?LinkId=260883 を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Entity Framework で必要とされる依存関係を解決するために使用されるリゾルバーの Chain of Responsibility に <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> インスタンスを追加します。</summary>
      <param name="resolver">追加するリゾルバー。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Entity Framework で必要とされる依存関係を解決するために使用されるリゾルバーの Chain of Responsibility に <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> インスタンスを追加します。</summary>
      <param name="resolver">追加するリゾルバー。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>アプリケーションの起動時に <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" /> を登録します。インターセプターは <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" /> を使用していつでも追加または削除することもできます。</summary>
      <param name="interceptor">登録するインターセプター。</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>Entity Framework のサービスの依存関係を解決するために使用されている <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> を取得します。</summary>
      <returns>Entity Framework のサービスの依存関係を解決するために使用されている <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
      <summary>このインスタンスが特定のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>このインスタンスが特定のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
      <summary>このインスタンスに関連付けられているハッシュ コードを取得します。</summary>
      <returns>このインスタンスに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>指定したアセンブリから <see cref="T:System.Data.Entity.DbConfiguration" /> を検出し、読み込もうとします。このメソッドは、正しい構成がアプリケーション ドメインに読み込まれることを確認するツール用に設計されています。ツールは <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> プロパティへのアクセス前にこのメソッドを使用する必要があります。使用される <see cref="T:System.Data.Entity.DbContext" /> 型をツールが認識している場合は、<see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" /> メソッドを使用する必要があります。正しい構成が検出される可能性が高くなるためです。</summary>
      <param name="assemblyHint">構成の検出に使用する <see cref="T:System.Reflection.Assembly" />。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型に関連付けられた <see cref="T:System.Data.Entity.DbConfiguration" /> を検出し、読み込もうとします。このメソッドは、正しい構成がアプリケーション ドメインに読み込まれることを確認するツール用に設計されています。ツールは <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" /> プロパティへのアクセス前にこのメソッドを使用する必要があります。</summary>
      <param name="contextType">構成の検出に使用する <see cref="T:System.Data.Entity.DbContext" /> 型。</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>EF の初期化中に、DbConfiguration が構築された後、使用できるようにロックされる直前に発生します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>現在の <see cref="T:System.Object" /> の簡易コピーを作成します。</summary>
      <returns>現在の <see cref="T:System.Object" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>このアプリケーション ドメインの <see cref="T:System.Data.Entity.DbConfiguration" /> のシングルトン インスタンス。これは、アプリケーションの起動時に、Entity Framework の機能が使用される前に設定でき、その後は読み取り専用として扱う必要があります。</summary>
      <param name="configuration">
        <see cref="T:System.Data.Entity.DbConfiguration" /> のインスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、パラメーターなしのパブリック コンストラクターのないコンテキストのインスタンスを <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> で作成できるようにするファクトリを設定します。</summary>
      <param name="factory">コンテキスト インスタンスを作成するために使用するデリゲート。</param>
      <typeparam name="TContext">ファクトリが使用されるコンテキスト型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、パラメーターなしのパブリック コンストラクターのないコンテキストのインスタンスを <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> で作成できるようにするファクトリを設定します。</summary>
      <param name="contextType">ファクトリが使用されるコンテキスト型。</param>
      <param name="factory">コンテキスト インスタンスを作成するために使用するデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、指定したコンテキスト型に使用するデータベースの初期化子を設定します。データベースの初期化子は、指定した <see cref="T:System.Data.Entity.DbContext" /> 型を使用してデータベースに初めてアクセスするときに呼び出されます。Code First コンテキストの既定の方法は、<see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> のインスタンスです。</summary>
      <param name="initializer">使用する初期化子。指定したコンテキスト型に対して初期化を無効にする場合は null。</param>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、<see cref="P:System.Data.Entity.Database.Log" /> で使用する <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" /> 型用にファクトリを設定します。</summary>
      <param name="logFormatterFactory">フォーマッタのインスタンスを作成するデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> で他の接続文字列または接続が指定されていないか検出できない場合に規約に従って接続を作成するために使用される <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" /> を設定します。EntityFramework NuGet パッケージをインストールすると、app.config ファイルまたは web.config ファイルで既定の接続ファクトリが必ず設定されることに注意してください。すべての構成ファイルの設定に共通することですが、構成ファイルで設定された既定の接続ファクトリは、このメソッドを使用して行われた設定より優先されます。したがって、このメソッドの呼び出しを有効にするには、まず、この設定を構成ファイルから削除する必要があります。<see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、使用している既定の接続ファクトリを変更します。</summary>
      <param name="connectionFactory">接続ファクトリ。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、いずれの <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> の既定の <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> の作成に使用される <see cref="T:System.Func`3" /> デリゲートを設定します。この既定のファクトリが使用されるのは、どのファクトリも  <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> で明示的に設定されていない場合や、 <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> メソッドを使用してプロバイダーに登録されていない場合です。</summary>
      <param name="factory">既定のスキーマを表す指定した <see cref="T:System.Data.Common.DbConnection" /> および <see cref="T:System.String" /> 用の <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> インスタンスを作成するためのファクトリ。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、空間プロバイダーが必要なときや、プロバイダー固有の空間プロバイダーが見つからないときに常に使用される、<see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> のグローバル インスタンスを設定します。プロバイダー固有の空間プロバイダーは通常、キーとしてプロバイダーの不変名を渡す <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> のサービスを解決することで返される、 <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> の実装から取得されます。ただしこれは、<see cref="T:System.Data.Entity.Spatial.DbGeometry" /> と <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のスタンドアロン インスタンスには適用されません。使用する空間プロバイダーを認識できないためです。したがって、<see cref="T:System.Data.Entity.Spatial.DbGeometry" /> と <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のスタンドアロン インスタンスを作成するときは、グローバル空間プロバイダーが常に使用されます。</summary>
      <param name="spatialProvider">空間プロバイダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、<see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> を登録します。</summary>
      <param name="transactionHandlerFactory">トランザクション ハンドラーの新しいインスタンスを返す関数。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、指定した不変名が表すプロバイダーで使用する <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> を登録します。</summary>
      <param name="providerInvariantName">この実行方法を使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="getExecutionStrategy">実行方法の新しいインスタンスを返す関数。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、指定したサーバー名に対応する、指定した不変名が表すプロバイダーで使用する <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> を登録します。</summary>
      <param name="providerInvariantName">この実行方法を使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="getExecutionStrategy">実行方法の新しいインスタンスを返す関数。</param>
      <param name="serverName">接続文字列のサーバー名と照合される文字列。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、明示的なファクトリが設定されていない <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> の指定したプロバイダーのカスタマイズされた <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> を作成できるように <see cref="T:System.Func`3" /> デリゲートを設定します。</summary>
      <param name="providerInvariantName">このジェネレーターを使用する対象となる ADO.NET プロバイダーの不変名。</param>
      <param name="factory">既定のスキーマを表す指定した <see cref="T:System.Data.Common.DbConnection" /> および <see cref="T:System.String" /> 用の <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> インスタンスを作成するためのファクトリ。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、必ずしも接続を開かなくてもプロバイダー マニフェスト トークンを接続から取得できる <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> の実装を設定します。</summary>
      <param name="resolver">マニフェスト トークン リゾルバー。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> インスタンスによって表されるカスタム注釈を EDMX XML に対する入出力用にシリアル化できるようにする <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> の実装用にファクトリを設定します。</summary>
      <param name="annotationName">このシリアライザーによって処理されるカスタム注釈の名前。</param>
      <param name="serializerFactory">シリアライザーのインスタンスの作成に使用されるデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、指定した不変名が表すプロバイダーで使用する <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> を登録します。</summary>
      <param name="providerInvariantName">このジェネレーターを使用する対象となる ADO.NET プロバイダーの不変名。</param>
      <param name="sqlGenerator">呼び出されるたびに SQL ジェネレーターの新しいインスタンスを返すデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、<see cref="T:System.Data.Entity.DbContext" /> の基盤となるモデルをキャッシュするために使用するキーを変更できるモデル キャッシュ キー ファクトリとして <see cref="T:System.Func`2" /> を設定します。</summary>
      <param name="keyFactory">キー ファクトリ。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、複数形化サービスを設定します。</summary>
      <param name="pluralizationService">使用する複数形化サービス。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、ADO.NET プロバイダーを登録します。</summary>
      <param name="providerInvariantName">このプロバイダーを使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="providerFactory">プロバイダー インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、既定の実装では不十分な場合に <see cref="T:System.Data.Common.DbConnection" /> から <see cref="T:System.Data.Common.DbProviderFactory" /> を取得できる <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" /> の実装を設定します。</summary>
      <param name="providerFactoryResolver">プロバイダー ファクトリ サービス。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、Entity Framework プロバイダーを登録します。</summary>
      <param name="providerInvariantName">このプロバイダーを使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="provider">プロバイダー インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、特定のプロバイダーとプロバイダー マニフェスト トークンに使用する <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> の実装を設定します。</summary>
      <param name="key">この空間プロバイダーを使用する対象となる ADO.NET 接続の種類を示す <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />。</param>
      <param name="spatialProvider">空間プロバイダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、任意のマニフェスト トークンに関連付けられた特定のプロバイダーで使用する <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> の実装を設定します。</summary>
      <param name="providerInvariantName">この空間プロバイダーを使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="spatialProvider">空間プロバイダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
      <summary>特定のプロバイダーに対するデータベース テーブルの存在確認機能を登録するため、<see cref="T:System.Data.Entity.DbConfiguration" /> から派生するクラスのコンストラクターからこのメソッドを呼び出します。</summary>
      <param name="providerInvariantName">このプロバイダーを使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="tableExistenceChecker">使用するテーブル存在確認機能。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、指定した不変名が表すプロバイダーで使用する <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> を登録します。</summary>
      <param name="providerInvariantName">このトランザクション ハンドラーを使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="transactionHandlerFactory">トランザクション ハンドラーの新しいインスタンスを返す関数。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> から派生したクラスのコンストラクターからこのメソッドを呼び出して、指定したサーバー名に対応する、指定した不変名が表すプロバイダーで使用する <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> を登録します。</summary>
      <param name="providerInvariantName">このトランザクション ハンドラーを使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="transactionHandlerFactory">トランザクション ハンドラーの新しいインスタンスを返す関数。</param>
      <param name="serverName">接続文字列のサーバー名と照合される文字列。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>この属性は、<see cref="T:System.Data.Entity.DbContext" /> のサブクラスに配置でき、アプリケーションのコードベースの構成を表す <see cref="T:System.Data.Entity.DbConfiguration" /> のサブクラスがコンテキスト型とは異なるアセンブリにあることを示します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>指定されたアセンブリ修飾名によって表される <see cref="T:System.Data.Entity.DbConfiguration" /> のサブクラスをこのアプリケーションのコードベースの構成に使用する必要があることを示します。</summary>
      <param name="configurationTypeName">使用する <see cref="T:System.Data.Entity.DbConfiguration" /> 型。</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Data.Entity.DbConfiguration" /> の指定されたサブクラスをこのアプリケーションのコードベースの構成に使用する必要があることを示します。</summary>
      <param name="configurationType">使用する <see cref="T:System.Data.Entity.DbConfiguration" /> 型。</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>このアプリケーションのコードベースの構成に使用する必要がある <see cref="T:System.Data.Entity.DbConfiguration" /> のサブクラスを取得します。</summary>
      <returns>このアプリケーションのコードベースの構成に使用される <see cref="T:System.Data.Entity.DbConfiguration" /> のサブクラス。</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>DbContext インスタンスは、データベースに照会してすべての変更をグループ化し、1 つの単位としてストアに書き戻すことができるような、作業単位パターンとリポジトリ パターンの組み合わせを表します。DbContext は ObjectContext と概念的に似ています。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>規約を使用して接続先のデータベースの名前を作成する新しいコンテキスト インスタンスを構築します。規約に基づく名前は、派生コンテキスト クラスの完全な名前 (名前空間 + クラス名) です。これを使用して接続を作成する方法については、クラスの解説を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>既存の接続を使用してデータベースに接続する新しいコンテキスト インスタンスを構築します。<paramref name="contextOwnsConnection" /> が false の場合、コンテキストが破棄されても接続は破棄されません。</summary>
      <param name="existingConnection">新しいコンテキストに使用する既存の接続。</param>
      <param name="contextOwnsConnection">true に設定した場合、コンテキストが破棄されたときに接続も破棄されます。それ以外の場合は、呼び出し元が接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>既存の接続を使用してデータベースに接続する新しいコンテキスト インスタンスを構築し、指定されたモデルからそのインスタンスを初期化します。<paramref name="contextOwnsConnection" /> が false の場合、コンテキストが破棄されても接続は破棄されません。</summary>
      <param name="existingConnection">新しいコンテキストに使用する既存の接続。</param>
      <param name="model">このコンテキストをサポートするモデル。</param>
      <param name="contextOwnsConnection">true に設定した場合、コンテキストが破棄されたときに接続も破棄されます。それ以外の場合は、呼び出し元が接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>既存の ObjectContext を中心に新しいコンテキスト インスタンスを構築します。</summary>
      <param name="objectContext">新しいコンテキストをラップする既存の ObjectContext。</param>
      <param name="dbContextOwnsObjectContext">true に設定した場合、DbContext が破棄されると ObjectContext も破棄されます。それ以外の場合は、呼び出し元が接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>規約を使用して接続先のデータベースの名前を作成する新しいコンテキスト インスタンスを構築し、指定されたモデルからそのインスタンスを初期化します。規約に基づく名前は、派生コンテキスト クラスの完全な名前 (名前空間 + クラス名) です。これを使用して接続を作成する方法については、クラスの解説を参照してください。</summary>
      <param name="model">このコンテキストをサポートするモデル。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>指定された文字列を接続先のデータベースの名前または接続文字列として使用する新しいコンテキスト インスタンスを構築します。これを使用して接続を作成する方法については、クラスの解説を参照してください。</summary>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>指定された文字列を接続先のデータベースの名前または接続文字列として使用する新しいコンテキスト インスタンスを構築し、指定されたモデルからそのインスタンスを初期化します。これを使用して接続を作成する方法については、クラスの解説を参照してください。</summary>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
      <param name="model">このコンテキストをサポートするモデル。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>エンティティの変更追跡を処理するコンテキストの機能にアクセスできます。</summary>
      <returns>変更追跡を処理する機能へのアクセスに使用するオブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>コンテキストの構成オプションにアクセスできます。</summary>
      <returns>構成オブジェクトへのアクセスに使用するオブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>このコンテキストに対してデータベース インスタンスを作成します。基になるデータベースの作成、削除、存在確認を実行できます。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>保護された Dispose メソッドを呼び出します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>コンテキストを破棄します。基になる <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> がこのコンテキストによって作成された場合、またはこのコンテキストの作成時に所有権がこのコンテキストに渡された場合は、それも破棄されます。データベースへの接続 (<see cref="T:System.Data.Common.DbConnection" /> オブジェクト) がこのコンテキストによって作成された場合、またはこのコンテキストの作成時に所有権がこのコンテキストに渡された場合は、接続も破棄されます。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>エンティティに関する情報にアクセスし、エンティティに対してアクションを実行できる、指定されたエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>エンティティのエントリ。</returns>
      <param name="entity">エンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>エンティティに関する情報にアクセスし、エンティティに対してアクションを実行できる、指定されたエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> オブジェクトを取得します。</summary>
      <returns>エンティティのエントリ。</returns>
      <param name="entity">エンティティ。</param>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>指定した DbContext が、現在の DbContext と等しいかどうかを判断します。</summary>
      <returns>指定した DbContext が現在の DbContext と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の DbContext と比較する DbContext。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>この DBContext のハッシュ関数を返します。</summary>
      <returns>この DbContext のハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>現在の DbContext の型を返します。</summary>
      <returns>現在の DbContext の型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>追跡対象のエンティティを検証し、その検証結果を格納した <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> のコレクションを返します。</summary>
      <returns>無効なエンティティに対する検証結果のコレクション。コレクションが null になることはありません。また null 値または有効なエンティティの結果を格納することもできません。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>このメソッドは、派生コンテキストのモデルの初期化が完了したが、まだロックダウンされていないときに呼び出され、コンテキストの初期化に使用されます。このメソッドの既定の実装では何も行われませんが、モデルがロックダウンされる前にさらに設定できるように派生クラスでオーバーライドできます。</summary>
      <param name="modelBuilder">作成されるコンテキストのモデルを定義するビルダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>このコンテキストで行われたすべての変更を基になるデータベースに保存します。</summary>
      <returns>基になるデータベースに書き込まれたオブジェクト数。</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">データベースへの更新の送信で発生するエラー。</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">予想される行の数に影響しないデータベース コマンド。これは、通常、オプティミスティック同時実行制御違反を示しています。つまり、データベースの行のクエリがなされた後、その行が変更されたということです。</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">エンティティ プロパティの検証がエラーになったため、保存は中止されました。</exception>
      <exception cref="T:System.NotSupportedException">同じコンテキスト インスタンスで非同期コマンドを同時に複数実行するなど、サポートされていない動作を使おうとしました。</exception>
      <exception cref="T:System.ObjectDisposedException">コンテキストまたは接続が破棄されました。</exception>
      <exception cref="T:System.InvalidOperationException">データベースにコマンドを送信する前後どちらかで、エンティティをコンテキストで処理しようとして何らかのエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>このコンテキストで行われたすべての変更を、基になるデータベースに非同期で保存します。</summary>
      <returns>非同期保存操作を表すタスク。タスクの結果には、基になるデータベースに書き込まれたオブジェクト数が示されます。</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">データベースへの更新の送信で発生するエラー。</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">予想される行の数に影響しないデータベース コマンド。これは、通常、オプティミスティック同時実行制御違反を示しています。つまり、データベースの行のクエリがなされた後、その行が変更されたということです。</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">エンティティ プロパティの検証がエラーになったため、保存は中止されました。</exception>
      <exception cref="T:System.NotSupportedException">同じコンテキスト インスタンスで非同期コマンドを同時に複数実行するなど、サポートされていない動作を使おうとしました。</exception>
      <exception cref="T:System.ObjectDisposedException">コンテキストまたは接続が破棄されました。</exception>
      <exception cref="T:System.InvalidOperationException">データベースにコマンドを送信する前後どちらかで、エンティティをコンテキストで処理しようとして何らかのエラーが発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>このコンテキストで行われたすべての変更を、基になるデータベースに非同期で保存します。</summary>
      <returns>非同期保存操作を表すタスク。タスクの結果には、基になるデータベースに書き込まれたオブジェクト数が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">コンテキストが破棄されている場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>コンテキストの特定の型のエンティティと基になるストアにアクセスするための <see cref="T:System.Data.Entity.DbSet`1" /> インスタンスを返します。</summary>
      <returns>指定されたエンティティ型のセット。</returns>
      <typeparam name="TEntity">セットを返す型のエンティティ。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>コンテキストの特定の型のエンティティと基になるストアにアクセスするための非ジェネリック <see cref="T:System.Data.Entity.DbSet" /> インスタンスを返します。</summary>
      <returns>指定されたエンティティ型のセット。</returns>
      <param name="entityType">セットを返す必要があるエンティティの型。</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>ユーザーが追加されたエンティティと変更されたエンティティのみを検証する既定の動作をオーバーライドできるようにするための拡張ポイント。</summary>
      <returns>検証する場合は true、それ以外の場合は false。</returns>
      <param name="entityEntry">検証対象の DbEntityEntry インスタンス。</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>このコンテキストの基となる Entity Framework ObjectContext を返します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>DbContext を表す文字列を返します。</summary>
      <returns>DbContext の文字列形式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>ユーザーがエンティティの検証をカスタマイズしたり、検証結果にフィルターをかけて除外したりできるようにするための拡張ポイント。<see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> によって呼び出されます。</summary>
      <returns>エンティティの検証結果。オーバーライドされた場合は null の可能性があります。</returns>
      <param name="entityEntry">検証対象の DbEntityEntry インスタンス。</param>
      <param name="items">カスタム検証用の追加情報が格納されたユーザー定義のディクショナリ。<see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" /> に渡され、<see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" /> として公開されます。このパラメーターは省略可能で、null に設定できます。</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>基になるストア接続上のトランザクション オブジェクトへのアクセスをラップし、Entity Framework がそのトランザクションのコンテキスト内でデータベースのコマンドを確実に実行します。このクラスのインスタンスは、<see cref="T:System.Data.Entity.DbContext" /><see cref="T:System.Data.Entity.Database" /> オブジェクトの BeginTransaction() を呼び出すことで取得されます。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>基になるストア トランザクションをコミットします。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>このトランザクション オブジェクトをクリーンアップし、Entity Framework がそのトランザクションを使用しないようにします。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>このトランザクション オブジェクトが使用しているリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースのみを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトと等しいかどうかを判定します。</summary>
      <returns>このインスタンスが、指定したオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType">
      <summary>このインスタンスに関連付けられている基になる型を取得します。</summary>
      <returns>このインスタンスに関連付けらている基になる型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>基になるストア トランザクションをロールバックします。</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString">
      <summary>このインスタンスの文字列表現を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
      <summary>このコンテキスト トランザクションの基となるデータベース (ストア) トランザクションを取得します。</summary>
      <returns>このコンテキスト トランザクションの基となるデータベース (ストア) トランザクション。</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>指定したメソッドが EDM の関数のプロキシであることを示します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbFunctionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="namespaceName">マップ先関数の名前空間。</param>
      <param name="functionName">マップ先関数の名前。</param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>マップ先関数の名前。</summary>
      <returns>マップ先関数の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>マップ先関数の名前空間。</summary>
      <returns>マップ先関数の名前空間。</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities クエリで EDM の正規関数を公開する共通言語ランタイム (CLR: Common Language Runtime) のメソッドを提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した日数を日付/時刻に加算する AddDays EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する日数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した日数を日付/時刻に加算する AddDays EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する日数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した時間数を日付/時刻に加算する AddHours EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した時間数を日付/時刻に加算する AddHours EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した時間を期間に加算する AddHours EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する時間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したマイクロ秒数を日付/時刻に加算する AddMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するマイクロ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したマイクロ秒数を日付/時刻に加算する AddMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するマイクロ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したマイクロ秒数を期間に加算する AddMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するマイクロ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したミリ秒数を日付/時刻に加算する AddMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するミリ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したミリ秒数を日付/時刻に加算する AddMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するミリ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したミリ秒数を期間に加算する AddMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するミリ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した分数を日付/時刻に加算する AddMinutes EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する分数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した分数を日付/時刻に加算する AddMinutes EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する分数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した分数を期間に加算する AddMinutes EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する分数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した月数を日付/時刻に加算する AddMonths EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する月数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した月数を日付/時刻に加算する AddMonths EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する月数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したナノ秒数を日付/時刻に加算する AddNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するナノ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したナノ秒数を日付/時刻に加算する AddNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するナノ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したナノ秒数を期間に加算する AddNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するナノ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した秒数を日付/時刻に加算する AddSeconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した秒数を日付/時刻に加算する AddSeconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した秒数を期間に加算する AddSeconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する秒数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した年数を日付/時刻に加算する AddYears EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">追加する年数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した年数を日付/時刻に加算する AddYears EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">追加する年数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、入力を非 Unicode 文字列として処理する演算子として機能します。</summary>
      <returns>非 Unicode 文字列として処理される入力文字列。</returns>
      <param name="value">入力文字列。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、入力を Unicode 文字列として処理する演算子として機能します。</summary>
      <returns>Unicode 文字列として処理される入力文字列。</returns>
      <param name="value">入力文字列。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、新しい <see cref="T:System.DateTime" /> オブジェクトを作成する CreateDateTime EDM 正規関数を呼び出します。</summary>
      <returns>新しい日付と時刻。</returns>
      <param name="year">年。</param>
      <param name="month">月 (1 ベース)。</param>
      <param name="day">日 (1 ベース)。</param>
      <param name="hour">時間。</param>
      <param name="minute">分。</param>
      <param name="second">秒 (必要に応じて秒の端数を含む)。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを作成する CreateDateTimeOffset EDM 正規関数を呼び出します。</summary>
      <returns>新しい日付と時刻。</returns>
      <param name="year">年。</param>
      <param name="month">月 (1 ベース)。</param>
      <param name="day">日 (1 ベース)。</param>
      <param name="hour">時間。</param>
      <param name="minute">分。</param>
      <param name="second">秒 (必要に応じて秒の端数を含む)。</param>
      <param name="timeZoneOffset">新しい日付のタイム ゾーン オフセット部分。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、新しい <see cref="T:System.TimeSpan" /> オブジェクトを作成する CreateTime EDM 正規関数を呼び出します。</summary>
      <returns>新しい期間。</returns>
      <param name="hour">時間。</param>
      <param name="minute">分。</param>
      <param name="second">秒 (必要に応じて秒の端数を含む)。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間を計算する DiffDays EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の日数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間を計算する DiffDays EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の日数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の時間数を計算する DiffHours EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の時間数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の時間数を計算する DiffHours EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の時間数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間の時間数を計算する DiffHours EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間の時間数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のマイクロ秒数を計算する DiffMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のマイクロ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のマイクロ秒数を計算する DiffMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のマイクロ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間のマイクロ秒数を計算する DiffMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間のマイクロ秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のミリ秒数を計算する DiffMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のミリ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のミリ秒数を計算する DiffMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のミリ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間のミリ秒数を計算する DiffMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間のミリ秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の分数を計算する DiffMinutes EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の分数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の分数を計算する DiffMinutes EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の分数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間の分数を計算する DiffMinutes EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間の分数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の月数を計算する DiffMonths EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の月数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の月数を計算する DiffMonths EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の月数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のナノ秒数を計算する DiffNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のナノ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のナノ秒数を計算する DiffNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のナノ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間のナノ秒数を計算する DiffNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間のナノ秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の秒数を計算する DiffSeconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の秒数を計算する DiffSeconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間の秒数を計算する DiffSeconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間の秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の年数を計算する DiffYears EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の年数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の年数を計算する DiffYears EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の年数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した日付/時刻が UTC からオフセットされる分数を返す GetTotalOffsetMinutes EDM 関数を起動します。この値は通常、+780 ～ -780 (+ 13 時間～ - 13 時間) の間になります。</summary>
      <returns>UTC からの入力のオフセット。</returns>
      <param name="dateTimeOffsetArgument">使用する日付/時刻値。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、文字列内の左端の文字を指定数返す Left EDM 正規関数を呼び出します。</summary>
      <returns>入力文字列の左から要求された文字数を含む文字列。</returns>
      <param name="stringArgument">入力文字列。</param>
      <param name="length">返される文字数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定文字列の文字の順番を逆にして返す Reverse EDM 正規関数を呼び出します。</summary>
      <returns>入力文字列の文字の順序を逆にした結果。</returns>
      <param name="stringArgument">入力文字列。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、文字列内の右端の文字を指定数返す Right EDM 正規関数を呼び出します。</summary>
      <returns>入力文字列の右から要求された文字数を含む文字列。</returns>
      <param name="stringArgument">入力文字列。</param>
      <param name="length">返される文字数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した値を指定桁数に切り捨てる Truncate EDM 正規関数を呼び出します。</summary>
      <returns>切り捨てられた値。</returns>
      <param name="value">切り捨てる値。</param>
      <param name="digits">保持する桁数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した値を指定桁数に切り捨てる Truncate EDM 正規関数を呼び出します。</summary>
      <returns>切り捨てられた値。</returns>
      <param name="value">切り捨てる値。</param>
      <param name="digits">保持する桁数。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定日から時刻部分を除いた値を返す TruncateTime EDM 正規関数を呼び出します。</summary>
      <returns>入力された日付から時刻部分を除いた値。</returns>
      <param name="dateValue">使用する日付/時刻値。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定日から時刻部分を除いた値を返す TruncateTime EDM 正規関数を呼び出します。</summary>
      <returns>入力された日付から時刻部分を除いた値。</returns>
      <param name="dateValue">使用する日付/時刻値。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>DbModelBuilder は、データベース スキーマに CLR クラスをマップするために使用します。コード主体で Entity Data Model (EDM) モデルをビルドする方法が "Code First" です。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> クラスの新しいインスタンスを初期化します。初期モデルを検出するプロセスでは、使用しているコンピューターにインストールされた最新バージョンの Entity Framework に含まれている一連の規約が使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>特定のセットの規約を使用して初期モデルを検出する <see cref="T:System.Data.Entity.DbModelBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="modelBuilderVersion">使用する規約のバージョン。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>このビルダーを使用して実行された構成に基づいて <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> を作成します。どのデータベース プロバイダーを使用するかは、生成されるモデルのデータベース層に影響を与えるので、接続を使用してデータベース プロバイダーを特定します。</summary>
      <returns>ビルドされたモデル。</returns>
      <param name="providerConnection">プロバイダー情報の特定に使用される接続。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>このビルダーを使用して実行された構成に基づいて <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> を作成します。プロバイダー情報は生成されるモデルのデータベース層に影響を与えるので指定する必要があります。SqlClient では、不変名は 'System.Data.SqlClient' で、マニフェスト トークンはバージョン年 (たとえば、'2005'、'2008' など) です。</summary>
      <returns>ビルドされたモデル。</returns>
      <param name="providerInfo">モデルで使用されるデータベース プロバイダー。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>型を複合型としてモデルに登録し、複合型の構成に使用できるオブジェクトを返します。このメソッドを同じ型に対して複数回呼び出し、複数行の構成を実行することができます。</summary>
      <returns>指定された複合型に対する構成オブジェクト。</returns>
      <typeparam name="TComplexType">登録または構成する型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>この DbModelBuilder の <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> を取得します。レジストラーを使用すると、派生エンティティ型と派生複合型の構成をこのビルダーに登録できます。</summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>規約を処理するこの DbModelBuilder の設定にアクセスします。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>エンティティ型をモデルの一部として登録し、エンティティの構成に使用できるオブジェクトを返します。このメソッドを同じエンティティに対して複数回呼び出し、複数行の構成を実行することができます。</summary>
      <returns>指定されたエンティティ型に対する構成オブジェクト。</returns>
      <typeparam name="TEntityType">登録または構成する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> が指定したオブジェクトと等しいかどうかを指定します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> が指定されたオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>既定のデータベース スキーマの名前を構成します。この既定のデータベース スキーマの名前は、明示的に構成されたスキーマの名前を持たないデータベース オブジェクトに対して使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ DbModelBuilder インスタンス。</returns>
      <param name="schema">既定のデータベース スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>モデルから型を除外します。初期モデルの検出時に規約によって追加された型をモデルから除外するために使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ DbModelBuilder インスタンス。</returns>
      <typeparam name="T">除外する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>モデルから指定した型を除外します。初期モデルの検出時に規約によって追加された型をモデルから除外するために使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ DbModelBuilder インスタンス。</returns>
      <param name="types">モデルから除外する型。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>モデル内のすべてのプロパティに適用される簡易規約の構成を開始します。</summary>
      <returns>規約の構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>モデル内の指定した型のすべてのプリミティブ プロパティに適用される簡易規約の構成を開始します。</summary>
      <returns>規約の構成オブジェクト。</returns>
      <typeparam name="T">規約が適用されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)">
      <summary>モデルの一部としてエンティティ型を登録します。</summary>
      <param name="entityType">登録する型。</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の文字列形式。</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <summary>ジェネリック引数で指定されている型から継承するかその型を実装する、モデル内のすべてのエンティティと複合型に適用される簡易規約の構成を開始します。このメソッドは、モデルの一部として型を登録しません。</summary>
      <returns>規約の構成オブジェクト。</returns>
      <typeparam name="T">この規約を適用するエンティティの型または複合型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types">
      <summary>モデル内のすべてのエンティティと複合型に適用される簡易規約の構成を開始します。</summary>
      <returns>規約の構成オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>この列挙体の値は、<see cref="T:System.Data.Entity.DbModelBuilder" /> クラスに直接指定することも、<see cref="T:System.Data.Entity.DbContext" /> から派生したクラスに適用される <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> で使用することもできます。使用される値は、コードからモデルを構築する ("Code First" とも呼ばれる) 場合に使用する DbContext 規約と DbModelBuilder 規約のバージョンを定義します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>     最新バージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     Entity Framework v4.1 に付属するバージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     Entity Framework v5.0 に付属するバージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>.Net Framework 4 をターゲットとする場合に Entity Framework v5.0 に付属するバージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     Entity Framework v6.0 に付属するバージョンの <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約と <see cref="T:System.Data.Entity.DbContext" /> 規約を使用することを示します。</summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>この属性は、<see cref="T:System.Data.Entity.DbContext" /> から派生したクラスに適用することによって、コードからモデルを構築する ("Code First" とも呼ばれる) 際に使用する DbContext 規約および <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョンを設定できます。DbModelBuilder のバージョンの詳細については、<see cref="T:System.Data.Entity.DbModelBuilderVersion" /> 列挙体のトピックを参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="version">使用する <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョン。</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョンを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約のバージョン。</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>非ジェネリック バージョンの <see cref="T:System.Data.Entity.DbSet`1" />。ビルド時にエンティティの型が不明な場合に使用できます。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor">
      <summary>DbSets のテスト ダブルとして使用される派生タイプのコンストラクタから呼び出された場合、<see cref="T:System.Data.Entity.DbSet" /> のインスタンスを作成します。テスト ダブルで使用されるメソッドとプロパティは、AsNoTracking、AsStreaming、既定の実装では何も行わないインクルード以外のテスト ダブルで実装される必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>指定されたエンティティを、セットの基になるコンテキストに Added 状態で追加することにより、SaveChanges が呼び出されたときにデータベースに挿入されるようにします。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">追加するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>特定のエンティティのコレクションを、各エンティティが Added 状態になり SaveChanges が呼び出されるとデータベースに挿入されるようにして、セットの基になるコンテキストに追加します。</summary>
      <returns>エンティティのコレクション。</returns>
      <param name="entities">追加されるエンティティのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>セットの基になるコンテキストに、指定されたエンティティをアタッチします。つまり、エンティティはデータベースから読み取られた場合と同様に、Unchanged 状態のコンテキストに配置されます。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">アタッチするエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.DbSet`1" /> オブジェクトを返します。</summary>
      <returns>ジェネリック セット オブジェクト。</returns>
      <typeparam name="TEntity">セット作成の対象となったエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>このセットの型に対するエンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされないということに注意してください。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンス。プロキシの場合もあります。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>このセットの型に対して、またはこのセットの型から派生する型に対して、エンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされないということに注意してください。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンス。プロキシの場合もあります。</returns>
      <param name="derivedEntityType">作成するエンティティ型。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>指定されたセットが現在のセットに等しいかどうかを示す値を返します。</summary>
      <returns>指定したオブジェクトが現在のセットと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するセット。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>指定された主キー値を持つエンティティを検索します。指定された主キー値を持つエンティティがコンテキスト内に存在する場合は、そのエンティティがすぐに返され、ストアへの要求は行われません。それ以外の場合は、指定された主キー値を持つエンティティについてストアに要求が行われ、エンティティが見つかるとコンテキストにアタッチされて返されます。コンテキスト内またはストア内にエンティティが見つからない場合は null が返されます。</summary>
      <returns>検索されたエンティティ、または null。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
      <exception cref="T:System.InvalidOperationException">指定したプライマリ キーの値を持つエンティティがコンテキスト内に複数存在する場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ型が、このコンテキストのデータ モデルの一部でない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">キー値の型が、検索対象のエンティティ型のキー値の型と一致しない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">コンテキストが破棄されている場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>指定された主キー値を持つエンティティを非同期で検索します。指定された主キー値を持つエンティティがコンテキスト内に存在する場合は、そのエンティティがすぐに返され、ストアへの要求は行われません。それ以外の場合は、指定された主キー値を持つエンティティについてストアに要求が行われ、エンティティが見つかるとコンテキストにアタッチされて返されます。コンテキスト内またはストア内にエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期検索操作を表すタスク。タスク結果には、検出されたエンティティまたは null が示されます。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
      <exception cref="T:System.InvalidOperationException">指定したプライマリ キーの値を持つエンティティがコンテキスト内に複数存在する場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ型が、このコンテキストのデータ モデルの一部でない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">キー値の型が、検索対象のエンティティ型のキー値の型と一致しない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">コンテキストが破棄されている場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>指定された主キー値を持つエンティティを非同期で検索します。指定された主キー値を持つエンティティがコンテキスト内に存在する場合は、そのエンティティがすぐに返され、ストアへの要求は行われません。それ以外の場合は、指定された主キー値を持つエンティティについてストアに要求が行われ、エンティティが見つかるとコンテキストにアタッチされて返されます。コンテキスト内またはストア内にエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期検索操作を表すタスク。タスク結果には、検出されたエンティティまたは null が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="keyValues">検索するエンティティの主キー値。</param>
      <exception cref="T:System.InvalidOperationException">指定したプライマリ キーの値を持つエンティティがコンテキスト内に複数存在する場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ型が、このコンテキストのデータ モデルの一部でない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">キー値の型が、検索対象のエンティティ型のキー値の型と一致しない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">コンテキストが破棄されている場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>指定されたセットのハッシュ関数を返します。</summary>
      <returns>セットのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>現在のセットの型を取得します。</summary>
      <returns>現在のセットの型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>このセットのすべての Added エンティティ、Unchanged エンティティ、および Modified エンティティのローカル ビューを表す <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を取得します。このローカル ビューは、コンテキストでエンティティが追加または削除されたときに同期を維持します。同様に、ローカル ビューでエンティティが追加または削除されると、コンテキストでエンティティが自動的に追加または削除されます。</summary>
      <returns>ローカル ビュー。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>指定されたエンティティを Deleted としてマークすることにより、SaveChanges が呼び出されたときにデータベースから削除されるようにします。エンティティは、このメソッドが呼び出される前に、その他の状態でコンテキスト内に存在する必要があります。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">削除するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>特定のエンティティのコレクションを、各エンティティが Deleted 状態になり SaveChanges が呼び出されるとデータベースから削除されるようにして、セットの基になるコンテキストから削除します。</summary>
      <returns>エンティティのコレクション。</returns>
      <param name="entities">削除するエンティティのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>このセットにエンティティを返す生の SQL クエリを作成します。既定では、返されたエンティティは、コンテキストによって追跡されます。この動作は、返された <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> で AsNoTracking を呼び出して変更できます。返されるエンティティの型は常にこのセットの型であって、派生型ではないという点に注意してください。照会先の 1 つまたは複数のテーブルにその他のエンティティ型のデータが格納されている場合、正しい型のエンティティだけが返されるように、適切に SQL クエリを作成する必要があります。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> オブジェクト。</returns>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">SQL クエリ文字列に適用するパラメーター。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>DbSet は、指定された型のコンテキストにある (つまりデータベースで照会できる) すべてのエンティティのコレクションを表します。DbSet オブジェクトは、DbContext から DbContext.Set メソッドを使用して作成されます。</summary>
      <typeparam name="TEntity">セットを定義する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor">
      <summary>DbSets のテスト ダブルとして使用される派生タイプのコンストラクタから呼び出された場合、<see cref="T:System.Data.Entity.DbSet`1" /> のインスタンスを作成します。テスト ダブルで使用されるメソッドとプロパティは、AsNoTracking、AsStreaming、既定の実装では何も行わないインクルード以外のテスト ダブルで実装される必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>指定されたエンティティを、セットの基になるコンテキストに Added 状態で追加することにより、SaveChanges が呼び出されたときにデータベースに挿入されるようにします。</summary>
      <param name="entity">追加するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>特定のエンティティのコレクションを、各エンティティが Added 状態になり SaveChanges が呼び出されるとデータベースに挿入されるようにして、セットの基になるコンテキストに追加します。</summary>
      <returns>エンティティのコレクション。</returns>
      <param name="entities">追加されるエンティティのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>セットの基になるコンテキストに、指定されたエンティティをアタッチします。つまり、エンティティはデータベースから読み取られた場合と同様に、Unchanged 状態のコンテキストに配置されます。</summary>
      <param name="entity">アタッチするエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>このセットの型に対するエンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされないということに注意してください。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>このセットの型に対して、またはこのセットの型から派生する型に対して、エンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされないということに注意してください。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <typeparam name="TDerivedEntity">作成するエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>指定した DbSet が現在の DbSet と等しいかどうかを判断します。</summary>
      <returns>指定した DbSet が現在の DbSet と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の DbSet と比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>指定された主キー値を持つエンティティを検索します。指定された主キー値を持つエンティティがコンテキスト内に存在する場合は、そのエンティティがすぐに返され、ストアへの要求は行われません。それ以外の場合は、指定された主キー値を持つエンティティについてストアに要求が行われ、エンティティが見つかるとコンテキストにアタッチされて返されます。コンテキスト内またはストア内にエンティティが見つからない場合は null が返されます。</summary>
      <returns>検索されたエンティティ、または null。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
      <exception cref="T:System.InvalidOperationException">指定したプライマリ キーの値を持つエンティティがコンテキスト内に複数存在する場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ型が、このコンテキストのデータ モデルの一部でない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">キー値の型が、検索対象のエンティティ型のキー値の型と一致しない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">コンテキストが破棄されている場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])">
      <summary>指定された主キー値を持つエンティティを非同期で検索します。指定された主キー値を持つエンティティがコンテキスト内に存在する場合は、そのエンティティがすぐに返され、ストアへの要求は行われません。それ以外の場合は、指定された主キー値を持つエンティティについてストアに要求が行われ、エンティティが見つかるとコンテキストにアタッチされて返されます。コンテキスト内またはストア内にエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期検索操作を表すタスク。タスク結果には、検出されたエンティティまたは null が示されます。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>指定された主キー値を持つエンティティを非同期で検索します。指定された主キー値を持つエンティティがコンテキスト内に存在する場合は、そのエンティティがすぐに返され、ストアへの要求は行われません。それ以外の場合は、指定された主キー値を持つエンティティについてストアに要求が行われ、エンティティが見つかるとコンテキストにアタッチされて返されます。コンテキスト内またはストア内にエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期検索操作を表すタスク。タスク結果には、検出されたエンティティまたは null が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="keyValues">検索するエンティティの主キー値。</param>
      <exception cref="T:System.InvalidOperationException">指定したプライマリ キーの値を持つエンティティがコンテキスト内に複数存在する場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ型が、このコンテキストのデータ モデルの一部でない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">キー値の型が、検索対象のエンティティ型のキー値の型と一致しない場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">コンテキストが破棄されている場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>この DbSet のハッシュ関数を返します。</summary>
      <returns>この DbSet のハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>現在の DbSet の型を返します。</summary>
      <returns>現在の DbSet の型。</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>このセットのすべての Added エンティティ、Unchanged エンティティ、および Modified エンティティのローカル ビューを表す <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を取得します。このローカル ビューは、コンテキストでエンティティが追加または削除されたときに同期を維持します。同様に、ローカル ビューでエンティティが追加または削除されると、コンテキストでエンティティが自動的に追加または削除されます。</summary>
      <returns>ローカル ビュー。</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>同等の非ジェネリック <see cref="T:System.Data.Entity.DbSet" /> オブジェクトを返します。</summary>
      <returns>非ジェネリック セット オブジェクト。</returns>
      <param name="entry">ジェネリック セット オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>指定されたエンティティを Deleted としてマークすることにより、SaveChanges が呼び出されたときにデータベースから削除されるようにします。エンティティは、このメソッドが呼び出される前に、その他の状態でコンテキスト内に存在する必要があります。</summary>
      <param name="entity">削除するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>特定のエンティティのコレクションを、各エンティティが Deleted 状態になり SaveChanges が呼び出されるとデータベースから削除されるようにして、セットの基になるコンテキストから削除します。</summary>
      <returns>エンティティのコレクション。</returns>
      <param name="entities">削除するエンティティのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>このセットにエンティティを返す生の SQL クエリを作成します。既定では、返されたエンティティは、コンテキストによって追跡されます。この動作は、返された <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> で AsNoTracking を呼び出して変更できます。返されるエンティティの型は常にこのセットの型であって、派生型ではないという点に注意してください。照会先の 1 つまたは複数のテーブルにその他のエンティティ型のデータが格納されている場合、正しい型のエンティティだけが返されるように、適切に SQL クエリを作成する必要があります。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>列挙されたときにクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> オブジェクト。</returns>
      <param name="sql">SQL クエリ文字列。</param>
      <param name="parameters">SQL クエリ文字列に適用するパラメーター。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>アプリケーション ドメインで初めてコンテキストが使用されたときに、データベースを常に再作成し、必要に応じてデータベースの再シードを行う IDatabaseInitializer の実装。データベースをシードするには、派生クラスを作成し、Seed メソッドをオーバーライドします。</summary>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>実際にコンテキストにデータを追加してシードするためにオーバーライドされるメソッド。既定の実装では、何も行われません。</summary>
      <param name="context">シードするコンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>データベースの作成後にモデルが変更された場合のみ、データベースの削除、再作成、または必要に応じてデータベースの再シードを行う IDatabaseInitializer の実装。</summary>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>実際にコンテキストにデータを追加してシードするためにオーバーライドされるメソッド。既定の実装では、何も行われません。</summary>
      <param name="context">シードするコンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     エンティティの状態を記述します。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     エンティティはコンテキストによって追跡されていますが、データベースにまだ存在していません。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     エンティティはコンテキストによって追跡されていて、データベース内に存在していますが、SaveChanges が次回呼び出されたときにデータベースから削除するようにマークが付けられています。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>エンティティは、コンテキストによって追跡されていません。エンティティが new 演算子またはいずれかの <see cref="T:System.Data.Entity.DbSet" /> Create メソッドによって作成されると、直ちにこの状態になります。</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     エンティティはコンテキストによって追跡されていて、データベースに存在します。また、一部またはすべてのプロパティ値が変更されています。 </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     エンティティはコンテキストによって追跡されていて、データベースに存在します。また、プロパティ値はデータベースの値から変更されていません。</summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 派生クラスのインスタンスが初めて使われた場合、このインターフェイスの実装が基になるデータベースの初期化に使用されます。この初期化では、条件に基づいて、データベースの作成やデータベースへのデータのシードを行うことができます。使用する方法は <see cref="T:System.Data.Entity.Database" /> クラスの静的な InitializationStrategy プロパティを使用して設定されます。<see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />、<see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />、<see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" /> の実装が提供されます。</summary>
      <typeparam name="TContext">このパラメーターが反変の型パラメーターです。つまり、その指定した型を使用するか、それよりも弱い任意の派生型を使用することができます。 共変性と反変性の詳細については、「」を参照してください。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context"> コンテキスト。 </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> は、コンテキストの、またはデータベースからクエリできる、特定の型のすべてのエンティティのコレクションを表します。<see cref="T:System.Data.Entity.DbSet`1" /> は、IDbSet の具象実装です。</summary>
      <typeparam name="TEntity">セットを定義する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>指定されたエンティティを、セットの基になるコンテキストに Added 状態で追加することにより、SaveChanges が呼び出されたときにデータベースに挿入されるようにします。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">追加するエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>セットの基になるコンテキストに、指定されたエンティティをアタッチします。つまり、エンティティはデータベースから読み取られた場合と同様に、Unchanged 状態のコンテキストに配置されます。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">アタッチするエンティティ。</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>このセットの型に対するエンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされないということに注意してください。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンス。プロキシの場合もあります。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>このセットの型に対して、またはこのセットの型から派生する型に対して、エンティティの新しいインスタンスを作成します。このインスタンスは、セットに追加またはアタッチされないということに注意してください。基になるコンテキストがプロキシを作成するように設定され、エンティティ型がプロキシ作成の要件を満たしている場合、インスタンスとしてプロキシが返されます。</summary>
      <returns>エンティティ インスタンス。プロキシの場合もあります。</returns>
      <typeparam name="TDerivedEntity">作成するエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>指定された主キー値を持つエンティティを検索します。指定された主キー値を持つエンティティがコンテキスト内に存在する場合は、そのエンティティがすぐに返され、ストアへの要求は行われません。それ以外の場合は、指定された主キー値を持つエンティティについてストアに要求が行われ、エンティティが見つかるとコンテキストにアタッチされて返されます。コンテキスト内またはストア内にエンティティが見つからない場合は null が返されます。</summary>
      <returns>検索されたエンティティ、または null。</returns>
      <param name="keyValues">検索するエンティティの主キー値。</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>このセットのすべての Added エンティティ、Unchanged エンティティ、および Modified エンティティのローカル ビューを表す <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> を取得します。このローカル ビューは、コンテキストでエンティティが追加または削除されたときに同期を維持します。同様に、ローカル ビューでエンティティが追加または削除されると、コンテキストでエンティティが自動的に追加または削除されます。</summary>
      <returns>ローカル ビュー。</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>指定されたエンティティを Deleted としてマークすることにより、SaveChanges が呼び出されたときにデータベースから削除されるようにします。エンティティは、このメソッドが呼び出される前に、その他の状態でコンテキスト内に存在する必要があります。</summary>
      <returns>エンティティ。</returns>
      <param name="entity">削除するエンティティ。</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Code First Migrations を使用してデータベースを最新のバージョンに更新する <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> の実装。</summary>
      <typeparam name="TContext">コンテキストの型。</typeparam>
      <typeparam name="TMigrationsConfiguration">初期化の最中に使用する移行構成の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>MigrateDatabaseToLatestVersion クラスの新しいインスタンスを初期化します。これは、既定のコンストラクターまたは登録されたファクトリ (該当する場合) を使用して構築されたコンテキストからの接続情報を使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean)">
      <summary>MigrateDatabaseToLatestVersion クラスの新しいインスタンスを初期化します。これは、移行を行うための初期化をトリガーするコンテキストからの接続情報を使用します。</summary>
      <param name="useSuppliedContext">true に設定されている場合、初期化をトリガーしたコンテキストからの接続情報を使用して初期化子が実行されます。それ以外の場合、接続情報は、既定のコンストラクターまたは登録されたファクトリ (該当する場合) を使用して構築されたコンテキストから取得されます。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean,`1)">
      <summary>MigrateDatabaseToLatestVersion クラスの新しいインスタンスを初期化します。これは、移行を行うための初期化をトリガーするコンテキストからの接続情報を使用します。また、初期化中に移行構成を指定できるようにします。</summary>
      <param name="useSuppliedContext">true に設定されている場合、初期化をトリガーしたコンテキストからの接続情報を使用して初期化子が実行されます。それ以外の場合、接続情報は、既定のコンストラクターまたは登録されたファクトリ (該当する場合) を使用して構築されたコンテキストから取得されます。</param>
      <param name="configuration">初期化中に使用する移行構成。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>構成ファイルから取得した特定の接続文字列を使用してデータベースに接続し、移行を実行する MigrateDatabaseToLatestVersion クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionStringName">移行に使用する接続文字列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>指定したコンテキストのデータベースを初期化します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>何も実行しない <see cref="T:System.Data.Entity.IDatabaseInitializer`1" /> の実装。この初期化子を使用して、指定したコンテキスト型に対してデータベースの初期化を無効にします。このクラスのインスタンスを <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" /> に渡すことは、null を渡すことと同じです。<see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> を使用して初期化子を解決する場合、このクラスのインスタンスを使って、初期化を無効にする必要があります。</summary>
      <typeparam name="TContext">コンテキストの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>指定されたコンテキストのデータベースを初期化する処理を実行します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> の拡張メソッド。</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>指定した <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> との同期を維持する <see cref="T:System.ComponentModel.BindingList`1" /> の実装を返します。</summary>
      <returns>バインディング リスト。</returns>
      <param name="source">バインディング リストが同期を維持するコレクション。</param>
      <typeparam name="T">要素型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>Entity Framework の LINQ クエリで使用する便利な拡張メソッドを提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>シーケンスのすべての要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でソース シーケンスのすべての要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">条件を満たしているかどうかをテストする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>シーケンスのすべての要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でソース シーケンスのすべての要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">条件を満たしているかどうかをテストする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスに要素が含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、ソース シーケンスに要素が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">空かどうかを確認する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>シーケンスのいずれかの要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でソース シーケンスのいずれかの要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">条件を満たしているかどうかをテストする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>シーケンスのいずれかの要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でソース シーケンスのいずれかの要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">条件を満たしているかどうかをテストする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスに要素が含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、ソース シーケンスに要素が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">空かどうかを確認する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>返されるエンティティが <see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> にキャッシュされない新しいクエリを返します。このメソッドは、基になるクエリ オブジェクトの AsNoTracking メソッドを呼び出すと機能します。基になるクエリ オブジェクトに AsNoTracking メソッドが存在しない場合、このメソッドを呼び出しても影響はありません。</summary>
      <returns>NoTracking が適用された新しいクエリ、または NoTracking がサポートされていない場合はソース クエリ。</returns>
      <param name="source">ソース クエリ。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>返されるエンティティが <see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> にキャッシュされない新しいクエリを返します。このメソッドは、基になるクエリ オブジェクトの AsNoTracking メソッドを呼び出すと機能します。基になるクエリ オブジェクトに AsNoTracking メソッドが存在しない場合、このメソッドを呼び出しても影響はありません。</summary>
      <returns>NoTracking が適用された新しいクエリ、または NoTracking がサポートされていない場合はソース クエリ。</returns>
      <param name="source">ソース クエリ。</param>
      <typeparam name="T">要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。このメソッドは、基になるクエリ オブジェクトの AsStreaming メソッドを呼び出すと機能します。基になるクエリ オブジェクトに AsStreaming メソッドが存在しない場合、このメソッドを呼び出しても影響はありません。</summary>
      <returns>AsStreaming が適用された新しいクエリ、または AsStreaming がサポートされていない場合はソース クエリ。</returns>
      <param name="source">AsStreaming の適用先の <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。このメソッドは、基になるクエリ オブジェクトの AsStreaming メソッドを呼び出すと機能します。基になるクエリ オブジェクトに AsStreaming メソッドが存在しない場合、このメソッドを呼び出しても影響はありません。</summary>
      <returns>AsStreaming が適用された新しいクエリ、または AsStreaming がサポートされていない場合はソース クエリ。</returns>
      <param name="source">AsStreaming の適用先の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="T">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Double" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる <see cref="T:System.Single" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Double" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int32" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int64" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Single" /> 値のシーケンスの平均を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、値のシーケンスの平均が示されます。</returns>
      <param name="source">平均値を計算する対象となる値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> に要素が含まれていません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>既定の等値比較子を使用して、指定した要素がシーケンスに含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスに指定した値が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">シーケンス内で検索するオブジェクト。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>既定の等値比較子を使用して、指定した要素がシーケンスに含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスに指定した値が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="item">シーケンス内で検索するオブジェクト。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの要素の数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>条件を満たすシーケンスの要素の数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たすシーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">述語関数の条件を満たす <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>条件を満たすシーケンスの要素の数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たすシーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">述語関数の条件を満たす <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの要素の数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たすシーケンスの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> のテストに合格する、<paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>指定された条件を満たすシーケンスの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> のテストに合格する、<paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最初の要素を非同期に返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="source" /> が空の場合は  default (<paramref name="TSource" />)、それ以外の場合は <paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たすシーケンスの最初の要素を非同期に返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="source" /> が空の場合または <paramref name="predicate" /> で指定されたテストに合格する要素がない場合は default (<paramref name="TSource" />) が、それ以外の場合は、<paramref name="predicate" /> で指定されたテストに合格する、<paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>指定された条件を満たすシーケンスの最初の要素を非同期に返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="source" /> が空の場合または <paramref name="predicate" /> で指定されたテストに合格する要素がない場合は default (<paramref name="TSource" />) が、それ以外の場合は、<paramref name="predicate" /> で指定されたテストに合格する、<paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には複数の要素があります。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの最初の要素を非同期に返します。シーケンスに要素が含まれていない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="source" /> が空の場合は  default (<paramref name="TSource" />)、それ以外の場合は <paramref name="source" /> の最初の要素が示されます。</returns>
      <param name="source">最初の要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="source">列挙する <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="action">各要素に対して実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="source">列挙する <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="action">各要素に対して実行するアクション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="source">列挙する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="action">各要素に対して実行するアクション。</param>
      <typeparam name="T">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="source">列挙する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="action">各要素に対して実行するアクション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="T">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを使用する新しい <see cref="T:System.Linq.IQueryable" />。</returns>
      <param name="source">Include を呼び出す対象のソース <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="path">クエリ結果で返す関連オブジェクトをドットで区切った一覧。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを含む新しい IQueryable&amp;lt;T&amp;gt;。</returns>
      <param name="source">Include を呼び出す対象のソース IQueryable。</param>
      <param name="path">含めるパスを表すラムダ式。</param>
      <typeparam name="T">照会するエンティティの型。</typeparam>
      <typeparam name="TProperty">含めるナビゲーション プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを使用する新しい <see cref="T:System.Linq.IQueryable`1" />。</returns>
      <param name="source">Include を呼び出す対象のソース <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="path">クエリ結果で返す関連オブジェクトをドットで区切った一覧。</param>
      <typeparam name="T">照会するエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>
        <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> などのサーバー クエリを対象に、クエリの結果がクライアント上の関連付けられた <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> などのキャッシュに読み込まれるように、クエリを列挙します。これは ToList メソッドを呼び出してから、実際にリストを作成するオーバーヘッドなしでリストを破棄する場合と同じです。</summary>
      <param name="source">ソース クエリ。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>
        <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> などのサーバー クエリを対象に、クエリの結果がクライアント上の関連付けられた <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> などのキャッシュに読み込まれるように、クエリを非同期に列挙します。これは ToList メソッドを呼び出してから、実際にリストを作成するオーバーヘッドなしでリストを破棄する場合と同じです。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="source">ソース クエリ。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Data.Entity.DbSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> などのサーバー クエリを対象に、クエリの結果がクライアント上の関連付けられた <see cref="T:System.Data.Entity.DbContext" />、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> などのキャッシュに読み込まれるように、クエリを非同期に列挙します。これは ToList メソッドを呼び出してから、実際にリストを作成するオーバーヘッドなしでリストを破棄する場合と同じです。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="source">ソース クエリ。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの要素の総数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>条件を満たすシーケンスの要素の数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たすシーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">述語関数の条件を満たす <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>条件を満たすシーケンスの要素の数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たすシーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">述語関数の条件を満たす <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの要素の総数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素の数が示されます。</returns>
      <param name="source">カウントする要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最大値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最大値が示されます。</returns>
      <param name="source">最大数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>シーケンスの各要素に対して射影関数を非同期に呼び出し、結果の最大値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最大値が示されます。</returns>
      <param name="source">最大数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>シーケンスの各要素に対して射影関数を非同期に呼び出し、結果の最大値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最大値が示されます。</returns>
      <param name="source">最大数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの最大値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最大値が示されます。</returns>
      <param name="source">最大数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの最小値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最小値が示されます。</returns>
      <param name="source">最小数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>シーケンスの各要素に対して射影関数を非同期に呼び出し、結果の最小値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最小値が示されます。</returns>
      <param name="source">最小数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>シーケンスの各要素に対して射影関数を非同期に呼び出し、結果の最小値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最小値が示されます。</returns>
      <param name="source">最小数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TResult">
        <paramref name="selector" /> で表された関数によって返される値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの最小値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンス内の最小値が示されます。</returns>
      <param name="source">最小数を決定する要素を格納する <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの唯一の要素を非同期に返し、シーケンスの要素が 1 つだけではない場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの 1 つの要素が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たすシーケンスの唯一の要素を非同期に返し、そのような要素が複数存在する場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす入力シーケンスの 1 つの要素が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>指定された条件を満たすシーケンスの唯一の要素を非同期に返し、そのような要素が複数存在する場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす入力シーケンスの 1 つの要素が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの唯一の要素を非同期に返し、シーケンスの要素が 1 つだけではない場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの 1 つの要素が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には複数の要素があります。</exception>
      <exception cref="T:System.InvalidOperationException">ソース シーケンスが空です。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>シーケンスの唯一の要素を非同期に返します。シーケンスが空の場合、既定値を返します。シーケンス内に要素が複数ある場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの 1 つの要素が示されます。シーケンスに要素が含まれていない場合は default (<paramref name="TSource" />) が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には複数の要素があります。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>指定された条件を満たすシーケンスの唯一の要素を非同期に返します。そのような要素が存在しない場合、既定値を返します。複数の要素が条件を満たす場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす入力シーケンスの 1 つの要素が示されます。このような要素が見つからない場合は default (<paramref name="TSource" />) が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>指定された条件を満たすシーケンスの唯一の要素を非同期に返します。そのような要素が存在しない場合、既定値を返します。複数の要素が条件を満たす場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす入力シーケンスの 1 つの要素が示されます。このような要素が見つからない場合は default (<paramref name="TSource" />) が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="predicate">要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>シーケンスの唯一の要素を非同期に返します。シーケンスが空の場合、既定値を返します。シーケンス内に要素が複数ある場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの 1 つの要素が示されます。シーケンスに要素が含まれていない場合は default (<paramref name="TSource" />) が示されます。</returns>
      <param name="source">1 つの要素を返す <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> には複数の要素があります。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>シーケンス内の指定された数の要素をバイパスし、残りの要素を返します。</summary>
      <returns>入力シーケンスで指定されたインデックスの後に出現する要素を格納するシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="countAccessor">スキップする要素の数に評価される式。</param>
      <typeparam name="TSource">ソースの要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Double" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Decimal" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Double" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Int32" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Int64" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる null 許容の <see cref="T:System.Single" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Single" /> 値のシーケンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、シーケンスの値の合計が示されます。</returns>
      <param name="source">合計を計算する対象となる <see cref="T:System.Single" /> 値のシーケンス。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Decimal" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Decimal.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Double" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int32" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Int64" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
      <exception cref="T:System.OverflowException">
        <paramref name="source" /> 内の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する null 許容の <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>入力シーケンスの各要素に対して射影関数を呼び出して取得する <see cref="T:System.Single" /> 値のシーケンスの合計を非同期に計算します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、予測値の合計が示されます。</returns>
      <param name="source">
        <paramref name="TSource" /> 型の値のシーケンス。</param>
      <param name="selector">各要素に適用する射影関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> は <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" /> を実装しません。</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>シーケンスの先頭から指定された数だけの連続する要素を返します。</summary>
      <returns>入力シーケンスの先頭から指定された数だけの要素を格納するシーケンス。</returns>
      <param name="source">要素を返すシーケンス。</param>
      <param name="countAccessor">返す要素の数に評価される式。</param>
      <typeparam name="TSource">ソースの要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から配列を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む配列が示されます。</returns>
      <param name="source">配列の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から配列を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む配列が示されます。</returns>
      <param name="source">配列の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>指定されたキー セレクター関数に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数および比較子に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数および比較子に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>指定されたキー セレクター関数および要素セレクター関数に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TElement" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TElement" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TElement" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数および要素セレクター関数に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TElement" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TElement">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数に従って、非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>非同期に列挙して、<see cref="T:System.Linq.IQueryable" /> から <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" /> の作成元の <see cref="T:System.Linq.IQueryable" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>非同期に列挙して、<see cref="T:System.Linq.IQueryable" /> から <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" /> の作成元の <see cref="T:System.Linq.IQueryable" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
      <param name="source">
        <see cref="T:System.Collections.Generic.List`1" /> の作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>非同期に列挙して <see cref="T:System.Linq.IQueryable`1" /> から <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
      <param name="source">リストの作成元の <see cref="T:System.Linq.IQueryable`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TSource">
        <paramref name="source" /> の要素の型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>データベース コマンドまたはクエリの実行中のトランザクション作成動作を制御します。</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>既存のトランザクションがある場合、それが使用されます。それ以外の場合は、トランザクションなしでコマンドまたはクエリが実行されます。</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>トランザクションが存在しない場合、この操作のために新しいトランザクションが使用されます。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>CommandCompilation を準備または実行しようとしたときのエラーを表します。この例外は、EntityCommand を使用してステートメントを実行するときに、プロバイダーの例外 (SqlException、OracleException) を保持するためにキャッチする共通の例外を提供することを意図しています。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>メッセージと内部例外を指定せずに、<see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> の新しいインスタンスを初期化します。おそらく、存在する必要はありませんが、FxCop が適切になります。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>メッセージを指定して、内部例外を指定せずに、<see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> の新しいインスタンスを初期化します。おそらく、存在する必要はありませんが、FxCop が適切になります。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>メッセージと内部例外インスタンスを指定して、<see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> の新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>CommandExecution を準備または実行しようとしたときのエラーを表します。この例外は、EntityCommand を使用してステートメントを実行するときに、プロバイダーの例外 (SqlException、OracleException) を保持するためにキャッチする共通の例外を提供することを意図しています。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>メッセージと内部例外を指定せずに、EntityCommandExecutionException の新しいインスタンスを初期化します。おそらく、存在する必要はありませんが、FxCop が適切になります。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>メッセージを指定して、内部例外を指定せずに、EntityCommandExecutionException の新しいインスタンスを初期化します。おそらく、存在する必要はありませんが、FxCop が適切になります。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>メッセージと内部例外インスタンスを指定して、EntityCommandExecutionException の新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在のこの例外を発生させた内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>エンティティ クライアントが使用するプロバイダー例外。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化情報。</param>
      <param name="context">ストリーム コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>書式設定済みのメッセージを受け入れる <see cref="T:System.Data.Entity.Core.EntityException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>書式設定済みのメッセージと内部例外を受け入れる <see cref="T:System.Data.Entity.Core.EntityException" /> の新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>エンティティの識別子を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>指定したキー値を使用して <see cref="T:System.Data.Entity.Core.EntityKey" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="qualifiedEntitySetName">エンティティの EntityContainer で修飾された EntitySet の名前。</param>
      <param name="entityKeyValues">エンティティを識別するキーと値のペア。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>指定したキー値を使用して <see cref="T:System.Data.Entity.Core.EntityKey" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="qualifiedEntitySetName">エンティティの EntityContainer で修飾された EntitySet の名前。</param>
      <param name="entityKeyValues">エンティティを識別するキーと値のペア。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>単一のキー名と値を指定して、<see cref="T:System.Data.Entity.Core.EntityKey" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="qualifiedEntitySetName">エンティティの EntityContainer で修飾された EntitySet の名前。</param>
      <param name="keyName">エンティティを識別するキー名。</param>
      <param name="keyValue">エンティティを識別するキー値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>エンティティを含むエンティティ コンテナーを識別する EntityContainer の名前を取得または設定します。</summary>
      <returns>エンティティを含むエンティティ コンテナーを識別する EntityContainer の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>エンティティを識別するキー値を取得または設定します。</summary>
      <returns>エンティティを識別するキー値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>失敗した TREAT で生成されたエンティティを識別するシングルトン <see cref="T:System.Data.Entity.Core.EntityKey" /> を取得します。</summary>
      <returns>失敗した TREAT で生成されたエンティティを識別するシングルトン <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>エンティティを含むエンティティ セットを識別する EntitySet の名前を取得または設定します。</summary>
      <returns>エンティティを含むエンティティ セットを識別する EntitySet の名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>このインスタンスが、指定されたキーと等しいかどうかを示す値を示します。</summary>
      <returns>このインスタンスと指定したキーが等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較するキー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>このインスタンスが、指定されたキーと等しいかどうかを示す値を示します。</summary>
      <returns>このインスタンスと指定したキーが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較するキー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>エンティティ コンテナーの名前とエンティティ セットの名前によって、指定されたメタデータ ワークスペースからこのエンティティ キーのエンティティ セットを取得します。</summary>
      <returns>このエンティティ キーの指定されたワークスペースからのエンティティ セット。</returns>
      <param name="metadataWorkspace">エンティティ セットを検索するワークスペース。</param>
      <exception cref="T:System.ArgumentException">ワークスペースでエンティティ セットが見つかりませんでした。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>値に基づくハッシュ コードを返し、EntityKey がハッシュ テーブルで使用できるようにします。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.EntityKey" /> のハッシュ値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>このキーが一時キーであるかどうかを示す値を取得します。</summary>
      <returns>このキーが一時キーである場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>読み取り専用エンティティを識別するシングルトン <see cref="T:System.Data.Entity.Core.EntityKey" /> を取得します。</summary>
      <returns>読み取り専用エンティティを識別するシングルトン <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityKey" /> が逆シリアル化された後で呼び出します。</summary>
      <param name="context">シリアル化コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityKey" /> が逆シリアル化された後で呼び出します。</summary>
      <param name="context">シリアル化コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>2 つのキーが等しいかどうかを示す値を示します。</summary>
      <returns>2 つのキーが等しい場合は true。それ以外の場合は false。</returns>
      <param name="key1">比較するキー。</param>
      <param name="key2">比較するキー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>2 つのキーが等しくないかどうかを示す値を示します。</summary>
      <returns>2 つのキーが等しくない場合は true。それ以外の場合は false。</returns>
      <param name="key1">比較するキー。</param>
      <param name="key2">比較するキー。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>EntityKey の一部であるキーに関する情報。キー メンバーには、キー名と値が含まれます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>空の EntityKeyMember を作成します。このコンストラクターは、シリアル化によって使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     指定されたキー名と値を使用して、新しい EntityKeyMember を作成します。</summary>
      <param name="keyName"> キー名</param>
      <param name="keyValue"> キー値</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     キー名</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     EntityKeyMember の文字列形式を返します。</summary>
      <returns> EntityKeyMember の文字列形式 </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     キー値</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>eSQL クエリのコンパイルの例外を表します。この例外が発生する可能性のある例外条件のクラス。主な例外条件は次のとおりです。     1) 構文エラー: クエリ テキストの解析中、および指定されたクエリが eSQL の正式な文法に準拠していない場合に発生します。     2) セマンティック エラー: eSQL 言語のセマンティクス規則 (メタデータやスキーマ情報など) が満たされない場合、不正確または存在しない場合、型検証エラーを引き起こす場合、スコープ規則に違反している場合、未定義の変数を使用している場合などに発生します。詳細については、eSQL の言語仕様を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntitySqlException" /> の新しいインスタンスを、汎用エラー メッセージを使用して初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntitySqlException" /> の新しいインスタンスを、指定したメッセージを使用して初期化します。</summary>
      <param name="message">エラー メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntitySqlException" /> の新しいインスタンスを、指定したメッセージと innerException インスタンスを使用して初期化します。</summary>
      <param name="message">エラー メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>エラーが発生したおおよその列番号を取得します。</summary>
      <returns>エラーが発生したおおよその列番号。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>エラーが発生したおおよそのコンテキストを取得します (取得可能な場合)。</summary>
      <returns>エラーが発生したおおよそのコンテキスト (取得可能な場合)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>クエリを使用できなかった理由、または String.Empty が空だった理由を説明するエラー説明を取得します。</summary>
      <returns>クエリを使用できなかった理由、または String.Empty が空だった理由を説明するエラー説明。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>エラーが発生したおおよその行番号を取得します。</summary>
      <returns>エラーが発生したおおよその行番号。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>構造化型とリッチなメタデータ情報をサポートする DataRecord のインターフェイスを提供します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>レコードの内容を記述した DataRecordInfo のプロパティを取得します。</summary>
      <returns>レコードの内容を記述した DataRecordInfo のプロパティ。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>入れ子になったリーダーを DbDataReader オブジェクトとして返します。</summary>
      <returns>DbDataReader オブジェクトとして入れ子になったリーダー。</returns>
      <param name="i">列の序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>指定したインデックスの DbDataRecord オブジェクトを取得します。</summary>
      <returns>DbDataRecord オブジェクト。</returns>
      <param name="i">行のインデックス。</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     コマンド ツリーが無効であることを示すためにスローされます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     既定のメッセージを使用して新しい InvalidCommandTreeException を作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     指定したメッセージを使用して新しい InvalidCommandTreeException を作成します。</summary>
      <param name="message"> 例外メッセージ</param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     指定したメッセージと内部例外を使用して新しい InvalidCommandTreeException を作成します。</summary>
      <param name="message"> 例外メッセージ。</param>
      <param name="innerException"> この InvalidCommandTreeException の原因である例外。 </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>マッピングの例外クラス。このクラスには状態があり、内部を変更する場合でも、重大な変更となりうることに注意してください</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     既定のメッセージを持つコンストラクター</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     既定のコンストラクター</summary>
      <param name="message"> ローカライズされたエラー メッセージ</param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     コンストラクター</summary>
      <param name="message"> ローカライズされたエラー メッセージ</param>
      <param name="innerException"> 内部例外 </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     メタデータの例外クラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     既定のメッセージを持つコンストラクター</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     既定のコンストラクター</summary>
      <param name="message"> ローカライズされたエラー メッセージ</param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     コンストラクター</summary>
      <param name="message"> ローカライズされたエラー メッセージ</param>
      <param name="innerException"> 内部例外 </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>この例外は、要求されたオブジェクトがストアにない場合にスローされます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>メッセージおよび内部例外を受け取る <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> クラスとコンストラクターの新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>この例外は、更新操作が同時実行の制約に違反した場合にスローされます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>既定値を使用して <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>指定したメッセージを使用して、<see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に関連付けられたメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>メッセージと内部例外を指定して、<see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外に関連付けられたメッセージ。</param>
      <param name="innerException">例外の原因となったエラー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>メッセージと内部例外を指定して、<see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">例外の原因となったエラー。</param>
      <param name="stateEntries">状態エントリ。</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>プロパティ制約例外クラスを表します。このクラスには状態があることに注意してください。内部を変更する場合でも、重大な変更となる可能性があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>メッセージと内部例外を指定して、<see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
      <param name="propertyName">プロパティ名。</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">ローカライズされたエラー メッセージ。</param>
      <param name="propertyName">プロパティ名。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>制約に違反したプロパティの名前を取得します。</summary>
      <returns>制約に違反したプロパティの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>ストア プロバイダーがエンティティのクライアント プロバイダーと互換性のない動作を行う場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>指定されたエラー メッセージで <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>指定したエラー メッセージと内部例外を使用して、<see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>ストアに対する変更の保存で更新に失敗したときにスローされる例外です。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.UpdateException" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたデータを使用して、<see cref="T:System.Data.Entity.Core.UpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">例外に関するシリアル化された情報を保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>エラー メッセージを使用して、<see cref="T:System.Data.Entity.Core.UpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するエラー メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>エラー メッセージと内部例外を使用して、<see cref="T:System.Data.Entity.Core.UpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった内部例外。</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>エラー メッセージ、内部例外、状態エントリを使用して、<see cref="T:System.Data.Entity.Core.UpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外を説明するエラー メッセージ。</param>
      <param name="innerException">現在の例外の原因となった内部例外。</param>
      <param name="stateEntries">エラーに関連する状態エントリ。</param>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>エラーに関連する状態エントリを取得します。</summary>
      <returns>エラーに関連する状態エントリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>型情報と列情報の両方に簡単にアクセスする方法を提供する DataRecordInfo クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>データ フィールドの列挙可能なコレクションを持つ特定の型の新しい <see cref="T:System.Data.Common.DbDataRecord" /> オブジェクトを初期化します。</summary>
      <param name="metadata">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> で指定された、このオブジェクトで表される型のメタデータ。</param>
      <param name="memberInfo">列の情報を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> オブジェクトの列挙可能なコレクション。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>この <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" /> オブジェクトの <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>このオブジェクトの <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトとしての型情報を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>コマンドの再準備を回避するためにキャッシュして再利用できる、準備されたコマンド定義を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
      <summary>指定した <see cref="T:System.Data.Common.DbCommand" /> を使用して、<see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="prototype">指定された <see cref="T:System.Data.Common.DbCommand" />。</param>
      <param name="cloneMethod">
        <see cref="T:System.Data.Common.DbCommand" /> の複製に使用するメソッド</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>実行できる DbCommand オブジェクトを作成し、返します。</summary>
      <returns>データベースのコマンド。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>すべての CLR 型のメタデータ インターフェイス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>Collation ファセットの名前</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>ConceptualSchemaDefinition を取得するために GetInformation に渡す値</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>ConceptualSchemaDefinitionVersion3 を取得するために GetInformation に渡す値</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>DefaultValue ファセットの名前</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>プロバイダーの作成者は、ワイルドカードとエスケープ文字がエスケープされた引数を返すために、このメソッドをオーバーライドする必要があります。このメソッドは、SupportsEscapingLikeArgument が true を返す場合にのみ使用されます。</summary>
      <returns>ワイルドカードとエスケープ文字がエスケープされた引数。</returns>
      <param name="argument">エスケープする引数。</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>FixedLength ファセットの名前</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>派生クラスでオーバーライドされると、このメソッドはプロバイダー固有の情報を返します。</summary>
      <returns>基になるデータ ストア カタログへのマッピングを表す XmlReader オブジェクト。</returns>
      <param name="informationType">取得する情報の型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>派生クラスでオーバーライドされると、このメソッドは、指定されたストレージ型およびその型の一連のファセットを EDM 型にマップします。</summary>
      <returns>EDM 型とその型の一連のファセットを記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> インスタンス。</returns>
      <param name="storeType">EDM 型にマップするストレージ型とその型の一連のファセットを記述する TypeUsage インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>特定の型の FacetDescription オブジェクトを返します。</summary>
      <returns>指定された EDM 型の FacetDescription オブジェクト。</returns>
      <param name="edmType">ファセットの記述を取得する EDM 型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>プロバイダー固有の情報を取得します。</summary>
      <returns>プロバイダー固有の情報。</returns>
      <param name="informationType">取得する情報の型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>派生クラスでオーバーライドされると、プロバイダー マニフェストでサポートされる EDM 関数のコレクションを返します。</summary>
      <returns>EDM 関数のコレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>派生クラスでオーバーライドされると、このメソッドは、指定された EDM 型およびその型の一連のファセットをストレージ型にマップします。</summary>
      <returns>ストレージ型とその型の一連のファセットを記述する TypeUsage インスタンス。</returns>
      <param name="edmType">ストレージ型にマップする EDM 型とその型の一連のファセットを記述する TypeUsage インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>派生クラスでオーバーライドされると、データ ソースによってサポートされるプリミティブ型のセットを返します。</summary>
      <returns>データ ソースでサポートされている一連の型。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>IsStrict ファセットの名前</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>MaxLength ファセットの名前</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>このプロバイダー マニフェストによって使用される名前空間を取得します。</summary>
      <returns>このプロバイダー マニフェストによって使用される名前空間。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>Nullable ファセットの名前</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>Precision ファセットの名前</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>Scale ファセットの名前</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>SRID ファセットの名前</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>StoreSchemaDefinition を取得するために GetInformation に渡す値</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>StoreSchemaDefinitionVersion3 を取得するために GetInformation に渡す値</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>StoreSchemaMapping を取得するために GetInformation に渡す値</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>StoreSchemaMappingVersion3 を取得するために GetInformation に渡す値</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>プロバイダーが、Like 式のパターンとしてエスケープ文字列の使用をサポートしているかどうかを示します。</summary>
      <returns>このプロバイダーが、Like 式のパターンとしてエスケープ文字列の使用をサポートしている場合は true、それ以外の場合は false。</returns>
      <param name="escapeCharacter">プロバイダーがエスケープをサポートしている場合に、エスケープ文字として使用される文字。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>プロバイダーが DbInExpression のインスタンスを含む式ツリーを処理できるかどうかを指定するブール値を返します。既定の実装では、下位互換性を維持するために false を返します。派生クラスでこのメソッドをオーバーライドできます。</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>Unicode ファセットの名前</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>コマンド定義をビルドするファクトリ。このオブジェクトの型は、プロバイダー ファクトリで IServiceProvider.GetService メソッドの引数として使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>アプリケーションの構成ファイルのエントリまたは <see cref="T:System.Data.Entity.DbConfiguration" /> のコードベースの登録を使用して派生型が EF プロバイダーとして登録されている場合に追加の既定プロバイダー サービスを解決するために使用される <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> を追加します。</summary>
      <param name="resolver">追加するリゾルバー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
      <summary>問題点 2390「DbCommand で DesignTimeVisible プロパティを複製するとデッドロックが発生する」を参照してください。ここでサブクラスのオーバーライドを許可します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> の複製</returns>
      <param name="fromDbCommand">複製する <see cref="T:System.Data.Common.DbCommand" /> オブジェクト</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>プロトタイプのコマンドに基づいて既定の DbCommandDefinition オブジェクトを作成します。このメソッドは、プロバイダーの作成者がコマンドから既定コマンド定義を作成するために使用します。注 :これは、プロトタイプを複製します</summary>
      <returns>実行可能なコマンド定義オブジェクト</returns>
      <param name="prototype">プロトタイプのコマンド</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>コマンド ツリーを指定してコマンド定義オブジェクトを作成します。</summary>
      <returns>実行可能なコマンド定義オブジェクト</returns>
      <param name="commandTree">ステートメントのコマンド ツリー</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>指定したマニフェストとコマンド ツリーからコマンド定義を作成します。</summary>
      <returns>作成済みコマンド定義。</returns>
      <param name="providerManifest">マニフェスト。</param>
      <param name="commandTree">コマンド ツリー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>接続で示されるデータベースを作成し、storeItemCollection の内容に基づくスキーマ オブジェクト (テーブル、主キー、外部キー) を作成します。</summary>
      <param name="connection">作成して、storeItemCollection パラメーターで示されるストア オブジェクトを設定する必要がある、存在しないデータベースへの接続。</param>
      <param name="commandTimeout">データベースの作成に必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">作成するスクリプトの基となるすべてのストア アイテムのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>StoreItemCollection パラメーターの内容に基づき、プロバイダー マニフェスト トークンに対応するデータベースのバージョンの対象となる、スキーマ オブジェクト (テーブル、主キー、外部キー) を作成するデータ定義言語 (DDL: data definition langauge) スクリプトを生成します。</summary>
      <returns>StoreItemCollection パラメーターの内容に基づき、プロバイダー マニフェスト トークンに対応するデータベースのバージョンの対象となる、スキーマ オブジェクトを作成する DDL スクリプト。</returns>
      <param name="providerManifestToken">ターゲット バージョンを識別するプロバイダー マニフェスト トークン。</param>
      <param name="storeItemCollection">データベースの構造。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>指定されたプロバイダー マニフェストおよびコマンド ツリーのコマンド定義オブジェクトを作成します。</summary>
      <returns>実行可能なコマンド定義オブジェクト。</returns>
      <param name="providerManifest">あらかじめストア プロバイダーから取得したプロバイダー マニフェスト。</param>
      <param name="commandTree">ステートメントのコマンド ツリー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>特定のデータベースがサーバーに存在するかどうかを示す値を返します。</summary>
      <returns>プロバイダーが、接続のみに基づいてデータベースを推測できる場合は true。</returns>
      <param name="connection">このメソッドによって存在が確認されるデータベースへの接続。</param>
      <param name="commandTimeout">データベースの存在を確認するために必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">モデルからのすべてのストア アイテムのコレクション。このパラメーターは、データベースの存在の確認用にもはや使用されません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>特定のデータベースがサーバーに存在するかどうかを示す値を返します。</summary>
      <returns>プロバイダーが、接続のみに基づいてデータベースを推測できる場合は true。</returns>
      <param name="connection">このメソッドによって存在が確認されるデータベースへの接続。</param>
      <param name="commandTimeout">データベースの存在を確認するために必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">モデルからのすべてのストア アイテムのコレクション。このパラメーターは、データベースの存在の確認用にもはや使用されません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>接続で示されるデータベースを作成し、StoreItemCollection の内容に基づくスキーマ オブジェクト (テーブル、主キー、外部キー) を作成します。</summary>
      <param name="connection">作成して、storeItemCollection パラメーターで示されるストア オブジェクトを設定する必要がある、存在しないデータベースへの接続。</param>
      <param name="commandTimeout">データベースの作成に必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">作成するスクリプトの基となるすべてのストア アイテムのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>StoreItemCollection パラメーターの内容に基づき、プロバイダー マニフェスト トークンに対応するデータベースのバージョンの対象となる、スキーマ オブジェクト (テーブル、主キー、外部キー) を作成するデータ定義言語 (DDL: data definition langauge) スクリプトを生成します。</summary>
      <returns>StoreItemCollection パラメーターの内容に基づき、プロバイダー マニフェスト トークンに対応するデータベースのバージョンの対象となる、スキーマ オブジェクトを作成する DDL スクリプト。</returns>
      <param name="providerManifestToken">ターゲット バージョンを識別するプロバイダー マニフェスト トークン。</param>
      <param name="storeItemCollection">データベースの構造。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>特定のデータベースがサーバーに存在するかどうかを示す値を返します。</summary>
      <returns>プロバイダーが、接続のみに基づいてデータベースを推測できる場合は true。</returns>
      <param name="connection">このメソッドによって存在が確認されるデータベースへの接続。</param>
      <param name="commandTimeout">データベースの存在を確認するために必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">モデルからのすべてのストア アイテムのコレクション。このパラメーターは、データベースの存在の確認用にもはや使用されません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>特定のデータベースがサーバーに存在するかどうかを示す値を返します。</summary>
      <returns>プロバイダーが、接続のみに基づいてデータベースを推測できる場合は true。</returns>
      <param name="connection">このメソッドによって存在が確認されるデータベースへの接続。</param>
      <param name="commandTimeout">データベースの存在を確認するために必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">モデルからのすべてのストア アイテムのコレクション。このパラメーターは、データベースの存在の確認用にもはや使用されません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>指定されたデータベースを削除します。</summary>
      <param name="connection">削除する必要がある既存のデータベースへの接続。</param>
      <param name="commandTimeout">データベースの削除に必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">モデルからのすべてのストア アイテムのコレクション。このパラメーターは、データベースの削除用にもはや使用されません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> の空間サービスを取得します。</summary>
      <returns>空間サービス。</returns>
      <param name="manifestToken">プロバイダー マニフェストに関連したトークン情報。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>指定されたデータベースを削除します。</summary>
      <param name="connection">削除する必要がある既存のデータベースへの接続。</param>
      <param name="commandTimeout">データベースの削除に必要なすべてのコマンドの実行タイムアウト。</param>
      <param name="storeItemCollection">モデルからのすべてのストア アイテムのコレクション。このパラメーターは、データベースの削除用にもはや使用されません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>|DataDirectory| で始まっていて展開されたパスを返す場合は、指定されたパスで |DataDirectory| を展開します。|DataDirectory| で始まっていない場合は、指定された文字列を返します。</summary>
      <returns>展開されたパス。</returns>
      <param name="path">展開するパス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>CSDL の説明を表す XML リーダーを返します。</summary>
      <returns>CSDL の説明を表す XmlReader</returns>
      <param name="csdlName">CSDL の説明の名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>派生クラスでオーバーライドされると、DbProviderManifest から派生したクラスのインスタンスを返します。</summary>
      <returns>プロバイダー マニフェストを表す DbProviderManifest オブジェクト。</returns>
      <param name="manifestToken">プロバイダー マニフェストに関連したトークン情報。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>指定された接続のプロバイダー マニフェスト トークンを返します。</summary>
      <returns>指定された接続のプロバイダー マニフェスト トークン。</returns>
      <param name="connection">マニフェスト トークンを検索する対象の接続。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> の空間データ リーダーを取得します。</summary>
      <returns>空間データ リーダー。</returns>
      <param name="fromReader">空間データの取得元のリーダー。</param>
      <param name="manifestToken">プロバイダー マニフェストに関連したトークン情報。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>指定した接続を使用するメソッドの実行に使用される <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> の新しいインスタンス</returns>
      <param name="connection">データベース接続</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)">
      <summary>指定した接続を使用するメソッドの実行に使用される <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> を取得します。このオーバーロードは、ラッピング プロバイダーとの互換性のために、派生クラスにより使用されなければなりません。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> の新しいインスタンス</returns>
      <param name="connection">データベース接続</param>
      <param name="providerInvariantName">プロバイダー不変名</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>指定した DbConnection に基づいて DbProviderFactory を取得します。</summary>
      <returns>取得された DbProviderFactory。</returns>
      <param name="connection">使用する接続。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>指定されたバージョン情報を使用してプロバイダー マニフェストを返します。</summary>
      <returns>指定されたバージョン情報を使用したプロバイダー マニフェスト。</returns>
      <param name="manifestToken">プロバイダー マニフェストに関連したトークン情報。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>接続されているプロバイダー マニフェスト トークンを返します。</summary>
      <returns>プロバイダー マニフェスト トークン。</returns>
      <param name="connection">プロバイダーへの接続。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>接続されているプロバイダーを返します。</summary>
      <returns>指定された接続に基づいてインスタンス化された <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />。</returns>
      <param name="connection">プロバイダーへの接続。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>アプリケーションの構成ファイルのエントリまたは <see cref="T:System.Data.Entity.DbConfiguration" /> のコードベースの登録を使用して派生型が EF プロバイダーとして登録されている場合に追加の既定プロバイダー サービスを解決するために呼び出されます。このクラスにおけるこのメソッドの実装では、AddDependencyResolver メソッドで追加したリゾルバーを使用して依存関係を解決します。</summary>
      <returns>指定した型のインスタンス。サービスを解決できなかった場合は null。</returns>
      <param name="type">解決するサービスの型。</param>
      <param name="key">サービスを解決するための追加情報を提供する省略可能なキー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>アプリケーションの構成ファイルのエントリまたは <see cref="T:System.Data.Entity.DbConfiguration" /> のコードベースの登録を使用して派生型が EF プロバイダーとして登録されている場合に追加の既定プロバイダー サービスを解決するために呼び出されます。このクラスにおけるこのメソッドの実装では、AddDependencyResolver メソッドで追加したリゾルバーを使用して依存関係を解決します。</summary>
      <returns>指定された型とキーを満たすすべての登録済みサービス、またはそのようなサービスがない場合は空の列挙。</returns>
      <param name="type">解決するサービスの型。</param>
      <param name="key">サービスを解決するための追加情報を提供する省略可能なキー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> の空間データ リーダーを取得します。</summary>
      <returns>空間データ リーダー。</returns>
      <param name="fromReader">空間データの取得元のリーダー。</param>
      <param name="manifestToken">プロバイダー マニフェストに関連したマニフェスト トークン。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> の空間サービスを取得します。</summary>
      <returns>空間サービス。</returns>
      <param name="key">空間サービスが使用されるデータベースに関する情報。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" /> の空間サービスを取得します。</summary>
      <returns>空間サービス。</returns>
      <param name="manifestToken">プロバイダー マニフェストに関連したトークン情報。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>データベース プロバイダーからの非エラー メッセージを処理するためのハンドラーを登録します。</summary>
      <param name="connection">情報を受け取るための接続。</param>
      <param name="handler">メッセージを処理するためのハンドラー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>特定の <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> のパラメーター値と適切なファセットを設定します。</summary>
      <param name="parameter">パラメーター。</param>
      <param name="parameterType">パラメーターの型。</param>
      <param name="value">パラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>特定の <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> のパラメーター値と適切なファセットを設定します。</summary>
      <param name="parameter">パラメーター。</param>
      <param name="parameterType">パラメーターの型。</param>
      <param name="value">パラメーターの値。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>XmlReader を受け入れる ProviderManifest の特殊化</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="reader">プロバイダー マニフェスト ファイルの XML データへのアクセスを提供する <see cref="T:System.Xml.XmlReader" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>指定された Entity Data Model (EDM) 型のファセットの説明の一覧を返します。</summary>
      <returns>指定された EDM 型のファセットの説明の一覧を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="edmType">取得するファセットの説明の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>プロバイダーでサポートされている関数の一覧を返します。</summary>
      <returns>プロバイダーでサポートされている関数の一覧を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>ストレージ プロバイダーでサポートされているプリミティブ型の一覧を返します。</summary>
      <returns>ストレージ プロバイダーでサポートされているプリミティブ型の一覧を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>このプロバイダー マニフェストでサポートされる名前空間の名前を取得します。</summary>
      <returns>このプロバイダー マニフェストでサポートされる名前空間の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>指定されたストレージ型の名前に適切にマップされた同等の Entity Data Model (EDM) 型を取得します。</summary>
      <returns>指定されたストレージ型の名前に適切にマップされた同等の EDM 型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>指定されたストレージ型の名前に適切にマップされた同等のストレージのプリミティブ型を取得します。</summary>
      <returns>指定されたストレージ型の名前に適切にマップされた同等のストレージのプリミティブ型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>型情報と列情報の両方に簡単にアクセスする方法を提供する EntityRecordInfo クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>データ フィールドの列挙可能なコレクションを持つ特定のエンティティ型、および特定のキーとエンティティ セットの情報を持つ <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">この <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> オブジェクトによって記述される <see cref="T:System.Data.Common.DbDataRecord" /> によって表されるエンティティの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />。</param>
      <param name="memberInfo">列の情報を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" /> オブジェクトの列挙可能なコレクション。</param>
      <param name="entityKey">エンティティのキー。</param>
      <param name="entitySet">エンティティが属しているエンティティ セット。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>エンティティの <see cref="T:System.Data.Entity.Core.EntityKey" /> を取得します。</summary>
      <returns>エンティティのキー。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>列の序数と MemberMetadata 間の相関関係を提供する FieldMetadata クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>指定した序数値とフィールドの型を使用して新しい <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> オブジェクトを初期化します。</summary>
      <param name="ordinal">メタデータの場所を指定した整数。</param>
      <param name="fieldType">フィールドの型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>この <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> オブジェクトのフィールドの型を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> オブジェクトのフィールドの型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>この <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> オブジェクトの序数を取得します。</summary>
      <returns>序数値を表す整数。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>派生元の IExpressionVisitor インターフェイスを実装する型の抽象基本型を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>コマンド ツリーのビジター パターンを実装します。</summary>
      <param name="commandTree">コマンド ツリー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>削除コマンド ツリーのビジター パターンを実装します。</summary>
      <param name="deleteTree">削除コマンド ツリー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>関数コマンド ツリーのビジター パターンを実装します。</summary>
      <param name="functionTree">関数コマンド ツリー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>挿入コマンド ツリーのビジター パターンを実装します。</summary>
      <param name="insertTree">挿入コマンド ツリー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>変更句のビジター パターンを実装します。</summary>
      <param name="modificationClause">変更句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>変更句のコレクションのビジター パターンを実装します。</summary>
      <param name="modificationClauses">変更句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>クエリ コマンド ツリーのビジター パターンを実装します。</summary>
      <param name="queryTree">クエリ コマンド ツリー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>SET 句のビジター パターンを実装します。</summary>
      <param name="setClause">SET 句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>更新コマンド ツリーのビジター パターンを実装します。</summary>
      <param name="updateTree">更新コマンド ツリー。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>派生元の IExpressionVisitor インターフェイスを実装する型の抽象基本型。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbAndExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbApplyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbArithmeticExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbCaseExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbCastExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbComparisonExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbConstantExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbCrossJoinExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DeRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbDistinctExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbElementExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbEntityRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbExceptExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>他の型としては認識できない型の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> が検出された場合に呼び出されます。</summary>
      <param name="expression">式</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="expression" /> がサポートされない型であることを示しているため、このメソッドを呼び出すと常にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbFilterExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbFunctionExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbInExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIntersectExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIsEmptyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIsNullExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIsOfExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbJoinExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbLambdaExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbLikeExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbLimitExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbNewInstanceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbNotExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbNullExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbOfTypeExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbOrExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbParameterReferenceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbProjectExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbPropertyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbQuantifierExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbRefExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbRefKeyExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbRelationshipNavigationExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbScanExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbSkipExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbSortExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbTreatExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbUnionAllExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbVariableReferenceExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> を走査する便利なメソッドです。</summary>
      <param name="aggregate">走査する集計。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregate" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>リストが null 以外の場合、リストの各 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> を走査する便利なメソッドです。</summary>
      <param name="aggregates">走査する集計のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="aggregates" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" /> を走査する便利なメソッドです。</summary>
      <param name="expression">走査する DbBinaryExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>null 以外の場合、指定した <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を走査する便利なメソッドです。</summary>
      <param name="expression">走査する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>DbExpressionBinding を走査した後の後処理に便利なメソッドです。</summary>
      <param name="binding">前に走査した DbExpressionBinding。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を走査する便利なメソッドです。</summary>
      <param name="binding">走査する DbExpressionBinding。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>リストが null 以外の場合、指定されたリストの各 <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を走査する便利なメソッドです。</summary>
      <param name="expressionList">走査する式のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expressionList" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> のグループ化キーの走査が完了し、これから集計を走査しようとしていることを示す便利なメソッドです。</summary>
      <param name="binding">DbGroupByExpression の DbGroupExpressionBinding</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>DbGroupExpressionBinding を走査した後の後処理に便利なメソッドです。</summary>
      <param name="binding">前に走査した DbGroupExpressionBinding。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> を走査する便利なメソッドです。</summary>
      <param name="binding">走査する DbGroupExpressionBinding。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="binding" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>DbLambda を走査した後の後処理に便利なメソッドです。</summary>
      <param name="lambda">前に走査した DbLambda。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>ラムダ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> の本体をこれから走査しようとしていることを示す便利なメソッドです。</summary>
      <param name="lambda">走査しようとしている DbLambda</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" /> を走査する便利なメソッドです。</summary>
      <param name="expression">走査する DbUnaryExpression。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> が null です。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>集計は擬似式です。外観と操作性は式のようですが、使用できる場所が group-by 式の集計句のみに厳しく制限されています。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     集計に対する引数を定義する式の一覧を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     この集計の結果型を取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     2 つの Boolean 引数の論理 AND を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     指定された入力セットの各要素に対して指定されたファンクタを呼び出す適用操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     入力セットの各要素に対して呼び出されるファンクタを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     2 個の数値引数に適用される算術演算 (加算、減算、乗算、除算、剰余、または否定) を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     現在の引数を定義する式の一覧を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     2 つの式オペランドを受け取る式の抽象基本型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     左辺の引数を定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     右辺の引数を定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     Case When...Then...Else 論理演算を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     この DbCaseExpression の Else 句を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     この DbCaseExpression の Then 句を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     この DbCaseExpression の When 句を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     ポリモーフィックな引数に適用されるキャスト操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>Delete、Query、Insert、および Update DbCommandTree 型の抽象基本型を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>このコマンド ツリーの種類を取得します。</summary>
      <returns>このコマンド ツリーの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>このコマンド ツリーで使用されるメタデータが存在するデータ領域を取得します。</summary>
      <returns>このコマンド ツリーで使用されるメタデータが存在するデータ領域。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>このコマンド ツリーで使用されるメタデータ ワークスペースを取得します。</summary>
      <returns>このコマンド ツリーで使用されるメタデータ ワークスペース。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>このコマンド ツリー内で参照できる各パラメーターの名前および対応する型を取得します。</summary>
      <returns>このコマンド ツリー内で参照できる各パラメーターの名前および対応する型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> の文字列形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
      <summary>コマンド ツリーでデータベースの null セマンティクスを使用するかどうかを取得します。</summary>
      <returns>コマンド ツリーでデータベースの null セマンティクスを使用します。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>各種のデータベース コマンドを表します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>削除コマンドを指定します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>関数コマンドを指定します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>挿入コマンドを指定します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>クエリ コマンドを指定します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>更新コマンドを指定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     2 つの引数に適用される比較操作 (等しい、より大きい、以上、より小さい、以下、および等しくない) を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     定数値を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     定数値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     指定されたコレクション引数間の無条件結合演算を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     結合に入力セットを提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> リストを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>正規コマンド ツリーとして表現される、単一行の削除操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">メタデータ ワークスペース。</param>
      <param name="dataSpace">データ領域。</param>
      <param name="target">データベース式バインディング。</param>
      <param name="predicate">データベース式。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>このコマンド ツリーの種類を取得します。</summary>
      <returns>このコマンド ツリーの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>ターゲット コレクションのどのメンバーを削除する必要があるかを判定するために使用される述語を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
      <returns>ターゲット コレクションのどのメンバーを削除する必要があるかを判定するために使用される述語。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     指定した参照を使用して指定されたエンティティの取得を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     指定したセット オペランドからの重複する要素の削除を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>指定されたセット オペランドのシングルトンへの変換を表します。セットが空の場合、変換は null を返します。それ以外の場合、変換はセット内の要素の 1 つを返します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     指定されたエンティティへの参照の取得を参照として表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     左辺オペランドと右辺オペランドの間の差集合演算を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>すべての式の基本型を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>結果値を生成しない式ビジターのビジター パターン インターフェイス メソッドを実装します。</summary>
      <param name="visitor">DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>特定の型の結果値を生成する式ビジターのビジター パターン インターフェイス メソッドを実装します。</summary>
      <returns>
        <paramref name="TResultType" /> のインスタンス。</returns>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">
        <paramref name="visitor" /> によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="visitor" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在の DbExpression インターフェイスと等しいかどうかを判断します。</summary>
      <returns>指定した Object が現在の DbExpression インスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> と比較するオブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>この式の操作を示す、式の種類を取得します。</summary>
      <returns>この式の操作を示す、式の種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>指定されたバイナリ値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します (null が可能です)。</summary>
      <returns>指定されたバイナリ値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value"> 取得する式のバイナリ値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>指定された (null 許容の) ブール値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定されたブール値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式のブール値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>指定された (null 許容) のバイト値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定されたバイト値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式のバイト値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>指定された (null 許容) の <see cref="T:System.DateTime" /> 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された DateTime 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の DateTime 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>指定された (null 許容) の <see cref="T:System.DateTimeOffset" /> 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された DateTimeOffset 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の DateTimeOffset 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>指定された (null 許容の) decimal 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された decimal 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の decimal 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>指定された (null 許容の) double 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された double 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の double 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 値を表す <see cref="T:System.Data.Entity.Spatial.DbGeography" /> を作成します (null が可能です)。</summary>
      <returns>指定された DbGeography 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の DbGeography 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> 値を表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> を作成します (null が可能です)。</summary>
      <returns>指定された DbGeometry 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の DbGeometry 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>指定された (null 許容) の <see cref="T:System.Guid" /> 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された Guid 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の Guid 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>指定された (null 許容の) Int16 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された Int16 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の Int16 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>指定された (null 許容の) Int32 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された Int32 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の Int32 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>指定された (null 許容の) Int64 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された Int64 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の Int64 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>指定された (null 許容の) Single 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された Single 値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の Single 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>指定された文字列値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された文字列値を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">取得する式の文字列値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>型のハッシュ関数として機能します。</summary>
      <returns>現在の式のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>8 ビット符号なし整数配列を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>変換された 8 ビット符号なし整数の配列を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">8 ビット符号なし整数の配列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>DbGeography オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>変換された DbGeography オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">DbGeography のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>DBGeometry オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>変換された DbGeography オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">DbGeometry オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の Boolean オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>変換された null 許容の Boolean オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の Boolean オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の 8 ビット符号なし整数を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>変換された 8 ビット符号なし整数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の 8 ビット符号なし整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の <see cref="T:System.DateTime" /> オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>
        <see cref="T:System.DateTime" /> オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の <see cref="T:System.DateTime" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の <see cref="T:System.DateTimeOffset" /> オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>null 許容の <see cref="T:System.DateTime" /> を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の <see cref="T:System.DateTime" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の Decimal オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>null 許容の Decimal オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の Decimal オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の double オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>null 許容の double オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の double オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の Guid オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>null 許容の <see cref="T:System.Guid" /> オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の <see cref="T:System.Guid" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の 16 ビット符号なし整数を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>null 許容の 16 ビット符号なし整数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の 16 ビット符号なし整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の 32 ビット符号なし整数を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>null 許容の 32 ビット符号なし整数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の 32 ビット符号なし整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容の 64 ビット符号なし整数を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>null 許容の 64 ビット符号なし整数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">null 許容の 64 ビット符号なし整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>null 許容型単精度浮動小数点数を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>単精度浮動小数点数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">単精度浮動小数点数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Unicode 文字のシーケンシャル コレクション <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を変換します。</summary>
      <returns>Unicode 文字のシーケンシャル コレクションを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="value">Unicode 文字のシーケンシャル コレクション。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>式の結果型のメタデータを取得します。</summary>
      <returns>式の結果型のメタデータ。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>式の束縛について説明します。C# の foreach ループの概念と似ています。Var プロパティはイテレーションの途中でコレクションの現在の要素を参照する手段を提供しますが、DbExpression プロパティは反復処理するコレクションを定義します。DbExpressionBinding は、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />、および <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> のような関係式に対してセット引数を記述するために使用されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     入力セットを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     要素変数を参照する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     要素変数に割り当てられた名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     要素変数の型のメタデータを取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     式のさまざまな "種類" (クラス) について説明します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     すべてに対して true</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     論理 AND</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     任意の式に対して true</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     条件付き case ステートメント</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     ポリモーフィックな型のキャスト</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     定数値</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     Cross Apply</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     クロス結合</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     逆参照</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     重複削除</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     除算</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     セットからシングルトンへの変換</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     エンティティ参照値の取得</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     等価比較</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     セット減算</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     制限</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     完全外部結合</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     スタンドアロン関数の呼び出し</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     より大きい</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     以上</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     グループ化</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     in </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     内部結合</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     積集合</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     空集合判定</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     null 判定</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     型比較 (型またはサブタイプを指定)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     型比較 (型のみを指定)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     ラムダ関数の適用</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     左外部結合</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     より小さい</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     以下</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     文字列比較</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     結果数制限 (上位 n)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     減算</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     剰余</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     乗算</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     インスタンス、行、およびセット構築</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     論理 NOT</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     非等値</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Null</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     型 (またはサブタイプ) によるセット メンバー</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     (厳密な) 型によるセット メンバー</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     論理 OR</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     Outer Apply。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     パラメーターへの参照</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     加算</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     投影</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     静的プロパティまたはインスタンス プロパティの取得</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     参照</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     参照キー値の取得</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     (構成またはアソシエーション) リレーションシップのナビゲーション</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     エンティティ セットまたはリレーションシップ セットのスキャン</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     順序付けられたコレクションの要素のスキップ</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     並べ替え</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     型変換</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     否定</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     和集合 (重複を削除しない)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     変数への参照。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>指定された式ツリー内のすべてのメタデータが指定されたメタデータ ワークスペースからのものであり、必要に応じて式を適切な置換メタデータに再バインディングおよびリビルドできることを確認します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetWorkspace">ターゲット ワークスペース。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>インスタンス プロパティを取得するためのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>エンティティ セットのビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="entitySet">エンティティ セット。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>関数のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="functionMetadata">関数のメタデータ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>型のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="type">型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>型使用のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="type">型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>結果値を返さないビジターによって実装される式ビジター パターンの抽象基本クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>DbAndExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbAndExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>DbApplyExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>DbArithmeticExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>DbCaseExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>DbCastExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>DbComparisonExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>DbConstantExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>DbCrossJoinExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>DbDerefExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>DbDistinctExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>DbElementExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>DbEntityRefExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>DbExceptExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>他の型としては認識できない型の式が検出された場合に呼び出されます。</summary>
      <param name="expression">式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>DbFilterExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>DbFunctionExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>DbGroupByExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>DbInExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>DbIntersectExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>DbIsEmptyExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>DbIsNullExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>DbIsOfExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>DbJoinExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>DbLambdaExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>DbLikeExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>DbLimitExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>DbNewInstanceExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>DbNotExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>DbNullExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>DbOfTypeExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>DbOrExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>DbParameterReferenceExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>DbProjectExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>DbPropertyExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>DbQuantifierExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>DbRefExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>DbRefKeyExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>DbRelationshipNavigationExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>DbScanExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>DbSkipExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>DbSortExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>DbTreatExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>DbUnionAllExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>DbVariableReferenceExpression のビジター パターン メソッド。</summary>
      <param name="expression">参照される DbVariableReferenceExpression。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     特定の型の結果値を返すビジターによって実装される式ビジター パターンの抽象基本クラス。</summary>
      <typeparam name="TResultType"> visitor によって生成される結果値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     DbAndExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbAndExpression。 </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     DbApplyExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     DbArithmeticExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     DbCaseExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     DbCastExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     DbComparisonExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     DbConstantExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     DbCrossJoinExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     DbDerefExpression のビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     DbDistinctExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     DbElementExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     DbEntityRefExpression のビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     DbExceptExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     他の型としては認識できない型の式が検出された場合に呼び出されます。</summary>
      <param name="expression"> 式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     DbFilterExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     DbFunctionExpression のビジター パターン メソッド</summary>
      <param name="expression"> 参照される DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     DbGroupByExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     DbInExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     DbIntersectExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     DbIsEmptyExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     DbIsNullExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     DbIsOfExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     DbJoinExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     DbLambdaExpression のビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     DbLikeExpression のビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     DbLimitExpression のビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     DbNewInstanceExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     DbNotExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     DbNullExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     DbOfTypeExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     DbOrExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     DbParameterReferenceExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     DbProjectExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     DbPropertyExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     DbQuantifierExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     DbRefExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     DbRefKeyExpression のビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     DbRelationshipNavigationExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     DbScanExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     DbSkipExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     DbSortExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     DbTreatExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     DbUnionAllExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     DbVariableReferenceExpression の型指定されたビジター パターン メソッド。</summary>
      <param name="expression"> 参照される DbVariableReferenceExpression。 </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     述語を満たす要素のセットを生成するために入力セットに適用される述語を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     入力セットのフィルター処理に使用される述語を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     集計関数の呼び出しに相当する集計の型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     集計関数が明確な方法で適用されるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     呼び出す集計関数を指定するメソッド メタデータを取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>正規コマンド ツリーとして表現される関数呼び出しを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>指定したメタデータ ワークスペース、データ領域、および関数メタデータを使用する新しい DbFunctionCommandTree を構築します。</summary>
      <param name="metadata">コマンド ツリーで使用するメタデータ ワークスペース。</param>
      <param name="dataSpace">このコマンド ツリーで使用される式のメタデータが属している必要がある論理的な "スペース"。</param>
      <param name="edmFunction">呼び出す EDM 関数。</param>
      <param name="resultType">関数の結果型。</param>
      <param name="parameters">呼び出す関数に関連付けられたパラメーター。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>コマンド ツリーの種類を取得または設定します。</summary>
      <returns>コマンドのツリーの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>呼び出す関数を表す <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" /> を取得します。</summary>
      <returns>呼び出す関数を表す <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>RowType のコレクションであるために現在制約されている関数の結果型を取得します。一般的な RowType インスタンスとは異なり、パラメーターの順序ではなく単に名前または型を示します。</summary>
      <returns>関数の結果型。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     関数の呼び出しを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     関数に引数を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> リストを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     呼び出す関数のメタデータを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>グループを構成する要素のコレクションを表します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     group by 操作を表します。group by 操作は、指定された集計のアプリケーションが従う指定されたキー式に基づいて、入力セットの要素をグループ化する処理です。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     適用する集計を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> リストを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     入力セットを指定して set 要素変数および group 要素変数へのアクセスを提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     グループ化キーを提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> リストを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> に対する入力セットのバインドを定義します。<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> のプロパティに加え、DbGroupExpressionBinding もまた、&lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt; 変数参照を介したグループ要素および &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt; プロパティを介したグループ集計へのアクセスを提供します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     入力セットを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     グループの要素のコレクションを表す DbGroupAggregate を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     グループ要素変数を参照する DbVariableReferenceExpression を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     group 要素変数に割り当てられた名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     group 要素変数の型のメタデータを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     要素変数を参照する DbVariableReferenceExpression を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     要素変数に割り当てられた名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     要素変数の型のメタデータを取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     指定した項目がリストの任意の要素と一致するかどうかをテストするブール式を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     一致する項目を指定する DbExpression を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     一致をテストするための DbExpression の一覧を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>正規コマンド ツリーとして表現される、単一行の挿入操作を表します。<see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" /> プロパティが設定されている場合、このコマンドはリーダーを返します。それ以外の場合は、影響を受けた行の数を示すスカラー値を返します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">メタデータ。</param>
      <param name="dataSpace">データ領域。</param>
      <param name="target">対象のデータベース。</param>
      <param name="setClauses">挿入された行の列の値を確認する set 句。</param>
      <param name="returning">変更された行に基づいて返される結果の投影を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>コマンド ツリーの種類を取得します。</summary>
      <returns>コマンドのツリーの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>変更された行に基づいて返される結果の投影を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。null の場合、このコマンドにより返される結果がないことを示します。</summary>
      <returns>変更された行に基づいて返される結果の投影を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>挿入された行の列の値を確認する set 句を取得します。</summary>
      <returns>挿入された行の列の値を確認する set 句。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     左辺オペランドと右辺オペランドの間の積集合演算を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     単一のセット引数に適用される空集合判定を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     単一の引数に適用される null 判定を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     指定された型に対する単一の引数の型比較を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     引数の型のメタデータを比較する対象となる型のメタデータを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     指定された結合条件に基づく指定されたコレクション引数間の内部結合、左外部結合、または完全外部結合の操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     適用する結合条件を定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     左辺の入力を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     右辺の入力を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     ラムダ関数の適用を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     ラムダ関数が適用される引数を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> のリストを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     この式によって適用されるラムダ関数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     指定されたパターンとエスケープ文字列 (省略可能) に対する文字列の比較を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     指定したパターンと比較する文字列を指定する式を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     比較に使用するエスケープ文字列 (省略可能) を指定する式を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     指定した文字列の比較対象のパターンを指定する式を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     Argument コレクション内の要素の数を指定された制限値に制限することを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     入力コレクションを指定する式を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     入力コレクションから返される要素の数に関する制限を指定する式を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     制限操作が関連付けられた結果を含むかどうかを取得します。関連付けが存在する場合、制限値によって指定されているより多い結果が生成されることがあります。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>挿入または更新の変更操作に含まれる 1 つの句を指定します。<see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> および <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" /> を参照してください。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     正規コマンド ツリーとして表現される DML 操作を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     DML の操作の対象テーブルを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     (セット型およびレコード型を含む) 指定された型の新しいインスタンスの構築を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     新しいインスタンスのプロパティ/列値またはセット要素を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> リストを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     単一の Boolean 引数の論理 NOT を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     null を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     指定されたセット引数からの指定された型の要素の取得を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     セット引数から取得する必要がある要素の型のメタデータを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     2 つの Boolean 引数の論理 OR を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     この式を含むコマンド ツリーで宣言されたパラメーターへの参照を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     参照されているパラメーターの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     指定された入力セットに対する指定された値セットの投影を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     投影を定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>インスタンスのプロパティを取得するためのメソッドおよびプロパティを提供します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>結果値を生成しない式のビジター パターンを実装します。</summary>
      <param name="visitor">
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>特定の型の結果値を生成する式のビジター パターンを実装します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> によって生成された、特定の型の結果値。</returns>
      <param name="visitor">特定の型の結果値を生成する、型指定された <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" /> のインスタンス。</param>
      <typeparam name="TResultType">visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>プロパティを取得するインスタンスを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
      <returns>プロパティを取得するインスタンスを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> への暗黙的なキャストを有効にします。</summary>
      <returns>変換された値。</returns>
      <param name="value">変換する式。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>取得するプロパティのプロパティ メタデータを取得します。</summary>
      <returns>取得するプロパティのプロパティ メタデータ。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>このプロパティ式に基づいて新しいキー/値のペアを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> から派生したキーと値を持つ新しいキー/値のペア。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     指定された入力セットの要素に対する指定された種類 (Any、All) の限定子操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     入力セットの各要素に対して評価する必要がある Boolean 述語を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>正規コマンド ツリーとして表現されるクエリ操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定したメタデータ ワークスペースを使用する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">コマンド ツリーで使用するメタデータ ワークスペース。</param>
      <param name="dataSpace">このコマンド ツリーで使用される式のメタデータが属している必要がある論理的な "スペース"。</param>
      <param name="query">クエリのロジックを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> または <paramref name="query" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> が有効なデータ領域を表していません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>指定したメタデータ ワークスペースを使用する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">コマンド ツリーで使用するメタデータ ワークスペース。</param>
      <param name="dataSpace">このコマンド ツリーで使用される式のメタデータが属している必要がある論理的な "スペース"。</param>
      <param name="query">クエリのロジックを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="validate">ツリーを検証する場合は true。それ以外の場合は false。false に設定すると、ツリーの検証が無効になります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="metadata" /> または <paramref name="query" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> が有効なデータ領域を表していません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">コマンド ツリーで使用するメタデータ ワークスペース。</param>
      <param name="dataSpace">このコマンド ツリーで使用される式のメタデータが属している必要がある論理的な "スペース"。</param>
      <param name="query">クエリのロジックを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="validate">ツリーを検証する場合は true。それ以外の場合は false。false に設定すると、ツリーの検証が無効になります。</param>
      <param name="useDatabaseNullSemantics">データベースの null セマンティクスを使用する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>このコマンド ツリーの種類を取得します。</summary>
      <returns>このコマンド ツリーの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>クエリのロジックを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
      <returns>クエリのロジックを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     指定されたエンティティ セット内の特定のインスタンスへの (厳密に型指定された) 参照を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     インスタンスを含むエンティティ セットのメタデータを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     指定された参照のキー値の取得を行として表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     'from' ロール、'to' ロール、および from ロールのインスタンスが指定された (構成またはアソシエーション) リレーションシップのナビゲーションを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     ナビゲーションを開始するリレーションシップ End のメタデータを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     ナビゲーションを終了するリレーションシップ End のメタデータを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     ナビゲーションを開始する 'from' リレーションシップ End のインスタンスを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     ナビゲーション対象であるリレーションシップのメタデータを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     指定されたエンティティ セットのすべての要素の "スキャン" を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     参照されるエンティティ セットまたはリレーションシップ セットのメタデータを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     プロパティの値を設定する変更操作で句を指定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     更新する必要があるプロパティを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     プロパティを更新するための新しい値を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     特定の並べ替えキーに記述されている順序が適用された後に指定された数の入力セットの要素のスキップ操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     スキップする入力コレクション内の要素の数を指定する式を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     並べ替え順序を定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> リストを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     DbSortExpression において並べ替え順序の一部として使用できる並べ替えキーを指定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     この並べ替えキーが昇順に並べ替えられているかどうかを示す Boolean 値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     この並べ替えキーの照合順序を指定する文字列値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     この並べ替えキーの値を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     指定された並べ替えキーに基づいて指定された入力セットの要素に適用される並べ替え操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     並べ替え順序を定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> リストを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     指定された型への単一の引数の型変換を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     1 つの式オペランドを受け取る式の抽象基本型。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     引数を定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。 </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     左辺オペランドと右辺オペランドの間の (重複が削除されない) 和集合操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>コマンド ツリーとして表現される、単一行の更新操作を表します。このクラスは継承できません。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadata">このコマンドが作用するモデル。</param>
      <param name="dataSpace">データ領域。</param>
      <param name="target">データ操作言語 (DML) の操作の対象のテーブル。</param>
      <param name="predicate">ターゲット コレクションのどのメンバーを更新する必要があるかを判定するために使用される述語。</param>
      <param name="setClauses">更新操作を定義する UPDATE SET 句の一覧。</param>
      <param name="returning">変更された行に基づいて返される結果の投影を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>このコマンド ツリーの種類を取得します。</summary>
      <returns>このコマンド ツリーの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>ターゲット コレクションのどのメンバーを更新する必要があるかを判定するために使用される述語を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
      <returns>ターゲット コレクションのどのメンバーを更新する必要があるかを判定するために使用される述語を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>変更された行に基づいて返される結果の投影を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を取得します。</summary>
      <returns>変更された行に基づいて返される結果の投影を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。null の場合、このコマンドにより返される結果がないことを示します。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>更新操作を定義する UPDATE SET 句の一覧を取得します。</summary>
      <returns>更新操作を定義する UPDATE SET 句の一覧。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     現在スコープ内にある変数への参照を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     結果値を生成しない式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> DbExpressionVisitor のインスタンス。</param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     特定の型の結果値を生成する式ビジターのビジター パターン メソッドです。</summary>
      <param name="visitor"> 型 TResultType の結果値を生成する、型指定された DbExpressionVisitor のインスタンス。</param>
      <typeparam name="TResultType">     visitor によって生成される結果の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     参照されている変数の名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>特定のルート式を起点として式ツリーの各要素を走査します。いずれかの要素が変更された場合、ルートまでさかのぼってツリーが再構築され、新しいルート式が返されます。それ以外の場合は、元のルート式が返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>式ビジターのスコープを指定したスコープ変数で入力するイベントを表します。</summary>
      <param name="scopeVariables">スコープ変数のコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>式のビジターのスコープを終了します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>式ビジターの古い式を新しい式で置き換えます。</summary>
      <param name="oldExpression">古い式。</param>
      <param name="newExpression">新しい式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>変数が式ビジターに再バインドされるイベントを表します。</summary>
      <param name="fromVarRef">変数の場所。</param>
      <param name="toVarRef">再バウンドされる変数の参照。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>論理 AND 式のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbAndExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>指定された入力セットの各要素に対する指定された関数の呼び出しのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbApplyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>数値引数に適用される算術演算のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbArithmeticExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>When、Then、および Else 句のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbCaseExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>指定された型への単一の引数の型変換のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbCastExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>2 つの引数に適用される比較演算のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbComparisonExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>さまざまな種類の定数のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbConstantExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>指定されたコレクション引数間の無条件結合操作のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbCrossJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>指定された参照に基づいてエンティティを取得する式のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbDerefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>指定されたセット引数から削除された重複する要素のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbDistinctExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>指定されたセット引数からシングルトンへの変換のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbElementExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>基になるエンティティ インスタンスから参照を抽出する式のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbEntityRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>左オペランドと右オペランドの減算演算のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbExceptExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>式の型に必要な基本機能のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>入力セットのフィルター処理に適用される述語のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbFilterExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>関数呼び出しのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbFunctionExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>操作ごとのグループのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbGroupByExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>DbInExpression のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbInExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>左オペランドと右オペランドの積集合演算のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbIntersectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>単一のセット引数に適用される空集合判定のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbIsEmptyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>単一の引数に適用される null 判定のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbIsNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>指定された型に対する単一の引数の型比較のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbIsOfExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>指定した結合条件での、指定したコレクションの引数間での内部結合、左外部結合、または完全外部結合操作のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbJoinExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>DbExpression オブジェクトによって表される引数へのラムダ関数の適用のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbLambdaExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>指定したパターンとオプションのエスケープ文字列に対する文字列比較のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbLikeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>指定された制限値へのコレクションの引数の要素数の制限のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbLimitExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>セットおよびレコードの型を含む指定した型の新しいインスタンスの構築のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbNewInstanceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>単一のブール型引数の論理 NOT のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbNotExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>型指定された null リテラルへの参照のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbNullExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>指定したセット引数から指定した型の要素を取得するためのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbOfTypeExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>2 つのブール型引数の論理 OR のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbOrExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>この式を含むコマンド ツリーで宣言されたパラメーターへの参照のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbParameterReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>指定された式に対する指定された入力セットの投影のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbProjectExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>インスタンス プロパティを取得するためのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbPropertyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>指定した入力セットの要素に対して指定した種類の量指定子のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbQuantifierExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>エンティティ セット内の特定のインスタンスへの厳密に型指定された参照のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbRefExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>基になる参照値からのキー値の取得のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbRefKeyExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>リレーションシップのナビゲーションのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbRelationshipNavigationExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Target プロパティで示されているように、エンティティ セットまたはリレーションシップ セットに対するスキャンのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbScanExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>スキップ式のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbSkipExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>並べ替え順序の一部として使用できる並べ替えキーのビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbSortExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>ポリモーフィック引数に適用される型変換操作のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbTreatExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>左オペランドと右オペランドの和集合演算のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbUnionAllExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>現在スコープ内にある変数への参照のビジター パターンを実装します。</summary>
      <returns>実装されたビジター。</returns>
      <param name="expression">参照される DbVariableReferenceExpression。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>集計のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="aggregate">走査する集計。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>エンティティ セットのビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="entitySet">エンティティ セット。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>式のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="expression">式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>式バインディングのビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="binding">式バインディング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>式バインディング リストのビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="list">式バインディング リスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>式リストのビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="list">式リスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>関数のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="functionMetadata">関数のメタデータ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>関数集計のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="aggregate">集約。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>グループ集計のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="aggregate">集約。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>グループ式バインディングのビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="binding">バインディング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>ラムダ関数のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="lambda">ラムダ関数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>並べ替え句のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="clause">並べ替え句。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>並べ替え順序のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="sortOrder">並べ替え順序。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>型のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="type">型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>型使用のビジター パターンを実装します。</summary>
      <returns>実装されたビジター パターン。</returns>
      <param name="type">型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を構築するための API を提供し、式の型そのものの拡張メソッドとして API にアクセスできるようにします。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> を作成します。</summary>
      <returns>特定の関数と引数への参照を持つ新しい関数集計。関数の集計の Distinct プロパティの値は false になります。</returns>
      <param name="function">集約操作を定義する関数。</param>
      <param name="argument">集計関数の計算に使用される引数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> または <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> が集約関数でないか、複数の引数があります。または、<paramref name="argument" /> の結果型が <paramref name="function" /> のパラメーターの型と一致していないか、上位変換できません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>明確な方法で適用される新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" /> を作成します。</summary>
      <returns>特定の関数と引数への参照を持つ新しい関数集計。関数の集計の Distinct プロパティの値は true になります。</returns>
      <param name="function">集約操作を定義する関数。</param>
      <param name="argument">集計関数の計算に使用される引数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> または <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> が集約関数でないか、複数の引数があります。または、<paramref name="argument" /> の結果型が <paramref name="function" /> のパラメーターの型と一致していないか、上位変換できません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定された述語が入力セットのすべての要素に当てはまるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> を作成します。</summary>
      <returns>All 操作を表す新しい DbQuantifierExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="predicate">入力セットのメンバーごとに評価する述語を表すメソッド。このメソッドは、述語のロジックを備え、ブール型の結果を返す式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> によって生成される式の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された述語が入力セットのすべての要素に当てはまるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> を作成します。</summary>
      <returns>All 操作を表す新しい DbQuantifierExpression。</returns>
      <param name="input">入力セットを指定する式バインディング。</param>
      <param name="predicate">入力セットのメンバーごとに評価する述語を表す式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> によって生成される式の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺と右辺の引数について論理 AND を実行する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" /> を作成します。</summary>
      <returns>指定された引数を持つ新しい DbAndExpression。</returns>
      <param name="left">左辺の引数を指定するブール式。</param>
      <param name="right">右辺の引数を指定するブール式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> または <paramref name="right" /> の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたセット引数が空以外であるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された引数を持つ新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> に適用される新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />。</returns>
      <param name="source">入力セットを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定された述語が入力セットのいずれかの要素に当てはまるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> を作成します。</summary>
      <returns> Any 操作を表す新しい DbQuantifierExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="predicate">入力セットのメンバーごとに評価する述語を表すメソッド。このメソッドは、述語のロジックを備え、ブール型の結果を返す式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> によって生成される式の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された述語が入力セットのいずれかの要素に当てはまるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" /> を作成します。</summary>
      <returns>Any 操作を表す新しい DbQuantifierExpression。</returns>
      <param name="input">入力セットを指定する式バインディング。</param>
      <param name="predicate">入力セットのメンバーごとに評価する述語を表す式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>指定された引数をキーと値のペア オブジェクトとして返します。</summary>
      <returns>キーと値のペア オブジェクト。</returns>
      <param name="value">キーと値のペア内の値。</param>
      <param name="alias">キーと値のペア内のキー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>指定された引数をキーと値のペア オブジェクトとして返します。</summary>
      <returns>キーと値のペア オブジェクト。</returns>
      <param name="value">キーと値のペア内の値。</param>
      <param name="alias">キーと値のペア内のキー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>生成された変数名を使用して指定した式をバインドする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を作成します。</summary>
      <returns>指定された式と生成された変数名でバインドする新しい式。</returns>
      <param name="input">バインドする式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> の結果型がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>指定した変数名を使用して指定した式をバインドする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> を作成します。</summary>
      <returns>指定された式と変数名でバインドする新しい式。</returns>
      <param name="input">バインドする式。</param>
      <param name="varName">バインディングに使用する変数名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="varName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> の結果型がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" /> を作成します。</summary>
      <returns>指定されたケースと既定の結果を持つ新しい DbCaseExpression。</returns>
      <param name="whenExpressions">各ケースの条件を提供する式のリスト。</param>
      <param name="thenExpressions">各ケースの結果を提供する式のリスト。</param>
      <param name="elseExpression">いずれのケースにも一致しなかった場合の結果を定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> または <paramref name="thenExpressions" /> が null か、null を含んでいます。または、<paramref name="elseExpression" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> または <paramref name="thenExpressions" /> が空であるか、<paramref name="whenExpressions" /> に結果型がブール型でない式が含まれているか、<paramref name="thenExpressions" /> および <paramref name="elseExpression" /> で指定されているすべての式に共通する結果型がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>ポリモーフィック引数にキャスト操作を適用する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" /> 式を作成します。</summary>
      <returns>指定された引数と対象の型を持つ新しい DbCastExpression。</returns>
      <param name="argument">キャストの適用先の引数。</param>
      <param name="toType">キャスト後の型を指定する型メタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="toType" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">指定したキャストは無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>指定された定数値を使用して、指定されたプリミティブ型の新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> 式を作成します。</summary>
      <returns>特定の値と <paramref name="constantType" /> の結果型を持つ新しい DbConstantExpression。</returns>
      <param name="constantType">定数値の型。</param>
      <param name="value">表現する定数値。</param>
      <exception cref="T:System.ArgumentNullException">valueconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が有効な定数の型のインスタンスでないか、<paramref name="constantType" /> がプリミティブ型を表していないか、<paramref name="value" /> の型が <paramref name="constantType" /> で表されるプリミティブ型とは異なります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>指定した定数値を使用して新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> を作成します。</summary>
      <returns>特定の値を持つ新しい DbConstantExpression。</returns>
      <param name="value">表現する定数値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> が有効な定数の型のインスタンスではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>キー値に基づいて特定のエンティティへの参照をエンコードする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> を作成します。</summary>
      <returns>特定のエンティティ セットに指定されたキー値を持つ要素を参照する新しい DbRefExpression。</returns>
      <param name="entitySet">参照先の要素が存在するエンティティ セット。</param>
      <param name="keyValues">キー値を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> のコレクション。これらの式は、参照先のエンティティ型のキー プロパティと (数、型、および順序が) 一致する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> が null か、あるいは <paramref name="keyValues" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> の数が、<paramref name="entitySet" /> の要素の型で宣言されたキーのメンバーの数と一致しないか、<paramref name="keyValues" /> に、対応するキーのメンバーの型と互換性のない結果型を持つ式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>キー値に基づいて特定のエンティティへの参照をエンコードする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> を作成します。</summary>
      <returns>特定のエンティティ セットに指定されたキー値を持つ要素を参照する新しい DbRefExpression。</returns>
      <param name="entitySet">参照先の要素が存在するエンティティ セット。</param>
      <param name="keyValues">キー値を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> のコレクション。これらの式は、参照先のエンティティ型のキー プロパティと (数、型、および順序が) 一致する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> が null か、あるいは <paramref name="keyValues" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> の数が、<paramref name="entitySet" /> の要素の型で宣言されたキーのメンバーの数と一致しないか、<paramref name="keyValues" /> に、対応するキーのメンバーの型と互換性のない結果型を持つ式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定されたキー値に基づいて指定された型の特定のエンティティへの参照をエンコードする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> を作成します。</summary>
      <returns>特定のエンティティ セットに指定されたキー値を持つ要素を参照する新しい DbRefExpression。</returns>
      <param name="entitySet">参照先の要素が存在するエンティティ セット。</param>
      <param name="entityType">参照先となるエンティティの特定の型。エンティティ セットの要素型と同じ階層のエンティティ型にする必要があります。</param>
      <param name="keyValues">キー値を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> のコレクション。これらの式は、参照先のエンティティ型のキー プロパティと (数、型、および順序が) 一致する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> または <paramref name="entityType" /> が null か、あるいは <paramref name="keyValues" /> が null か、null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> が、<paramref name="entitySet" /> の要素の型と同じ階層 (サブタイプ、スーパータイプ、または同じ型) に属していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> の数が、<paramref name="entitySet" /> の要素の型で宣言されたキーのメンバーの数と一致しないか、<paramref name="keyValues" /> に、対応するキーのメンバーの型と互換性のない結果型を持つ式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>指定されたキー値に基づいて指定された型の特定のエンティティへの参照をエンコードする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> を作成します。</summary>
      <returns>特定のエンティティ セットに指定されたキー値を持つ要素を参照する新しい DbRefExpression。</returns>
      <param name="entitySet">参照先の要素が存在するエンティティ セット。</param>
      <param name="entityType">参照先となるエンティティの特定の型。エンティティ セットの要素型と同じ階層のエンティティ型にする必要があります。</param>
      <param name="keyValues">キー値を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> のコレクション。これらの式は、参照先のエンティティ型のキー プロパティと (数、型、および順序が) 一致する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> または <paramref name="entityType" /> が null か、あるいは <paramref name="keyValues" /> が null か、null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> が、<paramref name="entitySet" /> の要素の型と同じ型階層 (サブタイプ、スーパータイプ、または同じ型) に属していません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keyValues" /> の数が、<paramref name="entitySet" /> の要素の型で宣言されたキーのメンバーの数と一致しないか、<paramref name="keyValues" /> に、対応するキーのメンバーの型と互換性のない結果型を持つ式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>特定の入力セットの各要素につき 1 回、指定された <paramref name="apply" /> 式を評価し、対応する入力列と適用列を持った行のコレクションを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> を作成します。<paramref name="apply" /> で空のセットに評価される行は含まれません。</summary>
      <returns>入力とバインディングの適用が指定され、CrossApply の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> が設定された新しい DbApplyExpression。</returns>
      <param name="source">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">入力セットのメンバーごとに 1 回評価するロジックを指定するメソッド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="apply" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" /> の結果に null の名前または式が含まれています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> の結果は、式のバインディングで無効な名前または式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>特定の入力セットの各要素につき 1 回、指定された <paramref name="apply" /> 式を評価し、対応する入力列と適用列を持った行のコレクションを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> を作成します。<paramref name="apply" /> で空のセットに評価される行は含まれません。</summary>
      <returns>入力とバインディングの適用が指定され、CrossApply の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> が設定された新しい DbApplyExpression。</returns>
      <param name="input">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">入力セットのメンバーごとに 1 回評価するロジックを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="apply" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>入力された式バインディングのリストによって指定されたセットを無条件に結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" /> を作成します。</summary>
      <returns>入力セットの無条件結合を表す、CrossJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を持つ、新しい DbCrossJoinExpression。</returns>
      <param name="inputs">入力セットを指定する式バインディングのリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> に含まれる式バインディングが 2 個未満です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された参照式に基づいて特定のエンティティを取得する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" /> を作成します。</summary>
      <returns>指定された Entity を取得する新しい DbDerefExpression。</returns>
      <param name="argument">参照を提供する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。この式は、参照型とする必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型が参照型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたセット引数から重複を取り除いた新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" /> を作成します。</summary>
      <returns>指定されたセット引数に適用される別個の操作を表す新しい DbDistinctExpression。</returns>
      <param name="argument">重複除去操作の実行対象となるセットを定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型が参照型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数を右辺の引数で除算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> を作成します。</summary>
      <returns>除算演算を表す新しい DbArithmeticExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ数値型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>セットをシングルトンに変換する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" /> を作成します。</summary>
      <returns>設定した引数のシングルトンへの変換を表す DbElementExpression。</returns>
      <param name="argument">入力セットを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型が参照型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数と右辺の引数を比較して等しいかどうかを調べる新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> を作成します。</summary>
      <returns>等価比較を表す新しい DbComparisonExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ数値型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺のセット引数から右辺のセット引数を減算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" /> を作成します。</summary>
      <returns>右辺の引数からの左辺の引数の差を表す新しい DbExceptExpression。</returns>
      <param name="left">左辺のセット引数を定義する式。</param>
      <param name="right">右辺のセット引数を定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ数値型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたセット引数が空以外であるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>指定された引数を持つ新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> に適用される新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />。</returns>
      <param name="argument">入力セットを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がコレクション型ではありません。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>ブール値 false を持つ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> を作成します。</summary>
      <returns>ブール値 false を持つ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された述語を使用して指定された入力セットの要素をフィルター処理する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> を作成します。</summary>
      <returns>フィルター処理されたセットを生成する新しい DbFilterExpression。</returns>
      <param name="input">入力セットを指定する式バインディング。</param>
      <param name="predicate">入力セットのメンバーごとに評価する述語を表す式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>FullOuterJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用し、指定された結合条件の左辺と右辺の式によって示されたセットを結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> を作成します。</summary>
      <returns>特定の結合条件下で左右の入力セットに適用された完全外部結合操作を表す、FullOuterJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を持つ、新しい DbJoinExpression。</returns>
      <param name="left">左辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">右辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">結合条件を表すメソッド。このメソッドは、結合条件のロジックを備え、ブール型の結果を返す式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" />、または <paramref name="joinCondition" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> または <paramref name="right" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> によって生成される式の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>FullOuterJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用し、指定された結合条件の左辺と右辺の式バインディングによって示されたセットを結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> を作成します。</summary>
      <returns>特定の結合条件下で左右の入力セットに適用された完全外部結合操作を表す、FullOuterJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を持つ、新しい DbJoinExpression。</returns>
      <param name="left">左辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">右辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">結合条件を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" />、または <paramref name="joinCondition" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたエンティティの参照を構造形式で取得する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" /> を作成します。</summary>
      <returns>指定されたエンティティへの参照を取得する新しい DbEntityRefExpression。</returns>
      <param name="argument">エンティティを表す式。この式は、エンティティを結果型とする必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がエンティティ型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された参照のキー値を構造形式で取得する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" /> を作成します。</summary>
      <returns>指定された参照のキー値を取得する新しい DbRefKeyExpression。</returns>
      <param name="argument">参照を表す式。この式は、エンティティ要素型を持つ参照型である必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がエンティティ型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数が右辺の引数よりも大きいかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> を作成します。</summary>
      <returns>"より大きい" 比較を表す新しい DbComparisonExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数が右辺の引数以上かどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> を作成します。</summary>
      <returns>"以上" 比較を表す新しい DbComparisonExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">left または right が null です。</exception>
      <exception cref="T:System.ArgumentException">left と right の結果型が、同じ順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数に対する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> を作成します。</summary>
      <returns>指定された引数で参照されるグループの要素を表す新しいグループ集計。</returns>
      <param name="argument">入れ子操作を実行する対象の引数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>生成された変数とグループ変数の名前を使用して、指定された式をバインドする新しいグループ式バインディングを作成します。</summary>
      <returns>指定された式と生成された変数名およびグループ変数名でバインドする新しいグループ式。</returns>
      <param name="input">バインドする式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> の結果型がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>指定された変数名とグループ変数の名前を使用して、指定された式をバインドする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" /> を作成します。</summary>
      <returns>指定された式、変数名およびグループ変数名でバインドする新しいグループ式。</returns>
      <param name="input">バインドする式。</param>
      <param name="varName">バインディングに使用する変数名。</param>
      <param name="groupVarName">新しいグループ式バインディングがグループ化式で使用されたときにグループの参照に使用される変数名。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="varName" />、または <paramref name="groupVarName" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> の結果型がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>指定されたグループ キーに従って入力セットの要素をグループ化し、指定された集約を適用する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> を作成します。</summary>
      <returns>指定された入力セット、グループ化キー、および集計を持つ新しい DbGroupByExpression。</returns>
      <param name="input">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />。</param>
      <param name="keys">グループ化列を定義する文字列/式ペアのリスト。</param>
      <param name="aggregates">適用する集計を指定する式のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="keys" />、または <paramref name="aggregates" /> が null であるか、<paramref name="keys" /> に含まれるキーの列名または式が null であるか、aggregates に含まれる集約の列名または <paramref name="aggregate" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> と <paramref name="aggregates" /> がどちらも空であるか、無効な列名または重複する列名が指定されました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>指定した式の結果と指定したリスト内の定数式の結果を照合する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" /> を作成します。</summary>
      <returns>DbConstantExpression リストが空でない場合は指定した引数、それ以外の場合は false 定数式になる新しい DbInExpression。</returns>
      <param name="expression">照合する DbExpression。</param>
      <param name="list">一致をテストするための DbConstantExpression の一覧。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="expression" /> または <paramref name="list" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expression" /> の結果型は <paramref name="list" /> の式の結果型とは異なります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>InnerJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用し、指定された結合条件の左辺と右辺の式によって示されたセットを結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> を作成します。</summary>
      <returns>特定の結合条件下で左右の入力セットに適用された内部結合操作を表す、InnerJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を持つ、新しい DbJoinExpression。</returns>
      <param name="left">左辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">右辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">結合条件を表すメソッド。このメソッドは、結合条件のロジックを備え、ブール型の結果を返す式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" />、または <paramref name="joinCondition" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> または <paramref name="right" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> によって生成される式の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>InnerJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用し、指定された結合条件の左辺と右辺の式によって示されたセットを結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> を作成します。</summary>
      <returns>特定の結合条件下で左右の入力セットに適用された内部結合操作を表す、InnerJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を持つ、新しい DbJoinExpression。</returns>
      <param name="left">左辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">右辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">結合条件を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" />、または <paramref name="joinCondition" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺のセット引数と右辺のセット引数の積集合を計算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" /> を作成します。</summary>
      <returns>左辺引数と右辺引数の積集合を表す新しい DbIntersectExpression。</returns>
      <param name="left">左辺のセット引数を定義する式。</param>
      <param name="right">右辺のセット引数を定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または right が <paramref name="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定した引数に対する指定したラムダ関数の適用を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> を作成します。</summary>
      <returns>ラムダ関数の適用を表す新しい DbLambdaExpression。</returns>
      <param name="lambda">適用するラムダ関数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> インスタンス。</param>
      <param name="arguments">引数を提供する式のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> が null か、あるいは <paramref name="arguments" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> の要素数が、<paramref name="lambda" /> で宣言された変数の数と同じでないか、<paramref name="arguments" /> に、対応する変数の型と同じでない、またはその型に上位変換できない型の結果を返す式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>指定した引数に対する指定したラムダ関数の適用を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" /> を作成します。</summary>
      <returns>ラムダ関数の適用を表す新しい DbLambdaExpression。</returns>
      <param name="lambda">適用するラムダ関数を表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> インスタンス。</param>
      <param name="arguments">引数を提供する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> が null か、あるいは <paramref name="arguments" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> の要素数が、<paramref name="lambda" /> で宣言された変数の数と同じでないか、<paramref name="arguments" /> に、対応する変数の型と同じでない、またはその型に上位変換できない型の結果を返す式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定された引数での指定された関数の呼び出しを表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。</summary>
      <returns>関数の呼び出しを表す新しい DbFunctionExpression。</returns>
      <param name="function">呼び出す関数のメタデータ。</param>
      <param name="arguments">関数の引数を提供する式のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> が null か、あるいは <paramref name="arguments" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> の要素数が、<paramref name="function" /> で宣言された変数の数と同じでないか、<paramref name="arguments" /> に、対応する変数の型と同じでない、またはその型に上位変換できない型の結果を返す式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>指定された引数での指定された関数の呼び出しを表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。</summary>
      <returns>関数の呼び出しを表す新しい DbFunctionExpression。</returns>
      <param name="function">呼び出す関数のメタデータ。</param>
      <param name="arguments">関数の引数を提供する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> が null か、あるいは <paramref name="arguments" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> の要素数が、<paramref name="function" /> で宣言された変数の数と同じでないか、<paramref name="arguments" /> に、対応する変数の型と同じでない、またはその型に上位変換できない型の結果を返す式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたセット引数が空のセットであるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> を作成します。</summary>
      <returns>指定された引数を持つ新しい DbIsEmptyExpression。</returns>
      <param name="argument">入力セットを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数が null であるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" /> を作成します。</summary>
      <returns>指定された引数を持つ新しい DbIsNullExpression。</returns>
      <param name="argument">引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がコレクション型です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>指定された引数が、指定された型 (またはサブタイプ) の引数であるかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> を作成します。</summary>
      <returns>指定されたインスタンスおよび型と DbExpressionKind IsOf を持つ新しい DbIsOfExpression。</returns>
      <param name="argument">インスタンスを指定する式。</param>
      <param name="type">インスタンスの結果型と比較する型を指定する型メタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が属する型階層が、<paramref name="argument" /> の結果型が属する型階層と異なります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>指定された引数の型が、指定された型そのものである (サブタイプではない) かどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" /> を作成します。</summary>
      <returns>指定されたインスタンスおよび型と DbExpressionKind IsOfOnly を持つ新しい DbIsOfExpression。</returns>
      <param name="argument">インスタンスを指定する式。</param>
      <param name="type">インスタンスの結果型と比較する型を指定する型メタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> が属する型階層が、<paramref name="argument" /> の結果型が属する型階層と異なります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>InnerJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用し、指定された外部キーと内部キー間の等価条件に基づいて、外部式と内部式によって指定されたセットを結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> を作成します。</summary>
      <returns>外部キーと内部キーの値の等価を比較する結合条件下で左右の入力セットに適用される内部結合操作を表す、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> の InnerJoin を持つ、新しい DbJoinExpression。</returns>
      <param name="outer">外部セット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">内部セット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">外部セットの要素からどのように外部キーの値を得るかを指定するメソッド。</param>
      <param name="innerKey">内部セットの要素からどのように内部キーの値を得るかを指定するメソッド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、または <paramref name="innerKey" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> または <paramref name="innerKey" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outerKey" /> または <paramref name="innerKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> または <paramref name="innerKey" /> によって生成される式は等価比較できません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>外部式と内部式によって指定され、指定された外部キーと内部キー間の等価条件に基づいて結合され、InnerJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用するセットに対して、指定されたセレクターを射影する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> を作成します。</summary>
      <returns>射影として指定したセレクター、および入力としての新しい DbJoinExpression を持つ新しい DbProjectExpression。入力した DbJoin 式は、InnerJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を使用して作成されます。これは、外部キー値と内部キー値の等価性を比較する結合条件の下で、左と右の入力セットに適用される内部結合操作を表します。</returns>
      <param name="outer">外部セット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="inner">内部セット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="outerKey">外部セットの要素からどのように外部キーの値を得るかを指定するメソッド。</param>
      <param name="innerKey">内部セットの要素からどのように内部キーの値を得るかを指定するメソッド。</param>
      <param name="selector">内部セットと外部セットの要素から結果セットの要素をどのように得るかを指定するメソッド。このメソッドは、Join と互換性があり、なおかつ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に解決可能な型のインスタンスを生成する必要があります。<paramref name="TSelector" /> の互換性要件は解説で説明します。</param>
      <typeparam name="TSelector">セレクターの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" />、<paramref name="inner" />、<paramref name="outerKey" />、<paramref name="innerKey" />、または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outer" /> または <paramref name="inner" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outerKey" /> または <paramref name="innerKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentNullException">DbExpression に変換した後 <paramref name="selector" /> の結果は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="outerKey" /> および <paramref name="innerKey" /> によって生成される式は等価比較できません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> の結果は SelectMany と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>指定されたインライン ラムダ関数の実装とフォーマット パラメーターを使用して、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> を作成します。</summary>
      <returns>指定した本体と仮のパラメーターでインライン ラムダ関数を記述する新しい DbLambda。</returns>
      <param name="body">ラムダ関数のロジックを定義する式。</param>
      <param name="variables">ラムダ関数の仮パラメーターを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> コレクション。これらの変数は、<paramref name="body" /> 式の中で使用できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> が null か、または null を含んでいるか、あるいは <paramref name="body" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> に、同じ変数名の要素が複数含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>指定されたインライン ラムダ関数の実装とフォーマット パラメーターを使用して、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> を作成します。</summary>
      <returns>指定した本体と仮のパラメーターでインライン ラムダ関数を記述する新しい DbLambda。</returns>
      <param name="body">ラムダ関数のロジックを定義する式。</param>
      <param name="variables">ラムダ関数の仮パラメーターを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> コレクション。これらの変数は、[ボディ] 式の中で使用できます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> が null か、または null を含んでいるか、あるいは <paramref name="body" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> に、同じ変数名の要素が複数含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>LeftOuterJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用し、指定された結合条件の左辺と右辺の式によって示されたセットを結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> を作成します。</summary>
      <returns>特定の結合条件下で左右の入力セットに適用された左外部結合操作を表す、LeftOuterJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を持つ、新しい DbJoinExpression。</returns>
      <param name="left">左辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="right">右辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="joinCondition">結合条件を表すメソッド。このメソッドは、結合条件のロジックを備え、ブール型の結果を返す式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" />、または <paramref name="joinCondition" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> または <paramref name="right" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="joinCondition" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> によって生成される式の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>LeftOuterJoin を <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> として使用し、指定された結合条件の左辺と右辺の式バインディングによって示されたセットを結合する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" /> を作成します。</summary>
      <returns>特定の結合条件下で左右の入力セットに適用された左外部結合操作を表す、LeftOuterJoin の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> を持つ、新しい DbJoinExpression。</returns>
      <param name="left">左辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="right">右辺のセット引数を指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="joinCondition">結合条件を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />、<paramref name="right" />、または <paramref name="joinCondition" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="joinCondition" /> の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数が右辺の引数よりも小さいかどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> を作成します。</summary>
      <returns>"より小さい" 比較を表す新しい DbComparisonExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数が右辺の引数以下かどうかを確認する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> を作成します。</summary>
      <returns>"以下" 比較を表す新しい DbComparisonExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された入力文字列と特定のパターンとを比較する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> を作成します。</summary>
      <returns>指定された入力、パターン、および null エスケープを持つ新しい DbLikeExpression。</returns>
      <param name="argument">入力文字列を指定する式。</param>
      <param name="pattern">パターン文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="pattern" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> または <paramref name="pattern" /> の結果型が文字列型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された入力文字列と特定のパターンとを、エスケープ (省略可能) を使用して比較する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" /> を作成します。</summary>
      <returns>指定された入力、パターン、およびエスケープを持つ新しい DbLikeExpression。</returns>
      <param name="argument">入力文字列を指定する式。</param>
      <param name="pattern">パターン文字列を指定する式。</param>
      <param name="escape">エスケープ文字列を指定する式 (省略可能)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />、<paramref name="pattern" />、または escape が <paramref name="null" /> です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />、<paramref name="pattern" />、または escape の結果型が文字列型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Argument コレクションの要素数を指定した数の制限値に制限する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> オブジェクトを作成します。同じ順位の結果は出力に含まれません。</summary>
      <returns>関連付けられた結果を含まない、指定された引数と数の制限値を持つ新しい DbLimitExpression。</returns>
      <param name="argument">入力コレクションを指定する式。</param>
      <param name="count">制限値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="count" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がコレクション型でないか、<paramref name="count" /> の結果型が 64 ビット整数型でないか、この型に上位変換できません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数から右辺の引数を減算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> を作成します。</summary>
      <returns>減算演算を表す新しい DbArithmeticExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数を右辺の引数で割った余りを求める新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> を作成します。</summary>
      <returns>モジュロ演算を表す新しい DbArithmeticExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数に右辺の引数を乗算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> を作成します。</summary>
      <returns>乗算演算を表す新しい DbArithmeticExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>コンポジションまたはアソシエーション リレーションシップのナビゲーションを表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> を作成します。</summary>
      <returns>指定されたナビゲーション ソース インスタンスから指定されたリレーションシップ型の、指定されたリレーションシップ端間のナビゲーションを表す新しい DbRelationshipNavigationExpression。</returns>
      <param name="navigateFrom">ナビゲーションの起点となるインスタンスを指定する式。</param>
      <param name="fromEnd">ナビゲーションの発生元のリレーションシップ端を表すプロパティのメタデータ。</param>
      <param name="toEnd">ナビゲーションの発生先のリレーションシップ端を表すプロパティのメタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />、<paramref name="toEnd" />、または <paramref name="NavigateForm" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> と <paramref name="toEnd" /> が同じリレーションシップ型で宣言されていないか、<paramref name="navigateFrom" /> の結果型が <paramref name="fromEnd" /> のプロパティ型と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>コンポジションまたはアソシエーション リレーションシップのナビゲーションを表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" /> を作成します。</summary>
      <returns>指定されたナビゲーション ソース インスタンスから指定されたリレーションシップ型の、指定されたリレーションシップ端間のナビゲーションを表す新しい DbRelationshipNavigationExpression。</returns>
      <param name="type">リレーションシップを表す関係の種類のメタデータ。</param>
      <param name="fromEndName">ナビゲーションの発生元のリレーションシップ端を表す、リレーションシップ型のプロパティの名前。</param>
      <param name="toEndName">ナビゲーションの発生先のリレーションシップ端を表す、リレーションシップ型のプロパティの名前。</param>
      <param name="navigateFrom">ナビゲーションの起点となるインスタンスを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" />、<paramref name="toEndName" />、または <paramref name="NavigateForm" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> がこのコマンド ツリーのメタデータ ワークスペースに関連付けられていないか、<paramref name="navigateFrom" /> が別のコマンド ツリーに関連付けられているか、<paramref name="toEndName" /> または <paramref name="fromEndName" /> で指定された名前のリレーションシップ端プロパティが <paramref name="type" /> で宣言されていないか、<paramref name="navigateFrom" /> の結果型と <paramref name="fromEndName" /> に互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>引数の値を否定する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> を作成します。</summary>
      <returns>否定演算を表す新しい DbArithmeticExpression。</returns>
      <param name="argument">引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型が数値型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> を作成します。型引数がコレクション型の場合、コレクションの要素が arguments によって指定されます。それ以外の場合、arguments は新しいインスタンスのプロパティまたは列の値として使用されます。</summary>
      <returns>指定された型と引数を持つ新しい DbNewInstanceExpression。</returns>
      <param name="instanceType">新しいインスタンスの型。</param>
      <param name="arguments">新しいインスタンスの値を指定する式。インスタンスの型に従って解釈されます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> または <paramref name="arguments" /> が null か、あるいは <paramref name="arguments" /> が null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arguments" /> が空であるか、これに含まれる式の結果型が <paramref name="instanceType" /> の要件を満たしていません (「解説」セクションを参照してください)。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> を作成します。型引数がコレクション型の場合、コレクションの要素が arguments によって指定されます。それ以外の場合、arguments は新しいインスタンスのプロパティまたは列の値として使用されます。</summary>
      <returns>指定された型と引数を持つ新しい DbNewInstanceExpression。</returns>
      <param name="instanceType">新しいインスタンスの型。</param>
      <param name="arguments">新しいインスタンスの値を指定する式。インスタンスの型に従って解釈されます。</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> または <paramref name="arguments" /> が null か、あるいは <paramref name="arguments" /> が null を含んでいます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定した要素を含むコレクションを構築する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> を作成します。コレクションの型は、要素の共通の型に基づきます。要素の共通の型が存在しない場合は例外がスローされます。</summary>
      <returns>指定されたコレクション型と引数を持つ新しい DbNewInstanceExpression。</returns>
      <param name="elements">コレクションの要素を提供する式のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> が空であるか、結果型が共通しない式を含んでいます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>指定した要素を含むコレクションを構築する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> を作成します。コレクションの型は、要素の共通の型に基づきます。要素の共通の型が存在しない場合は例外がスローされます。</summary>
      <returns>指定されたコレクション型と引数を持つ新しい DbNewInstanceExpression。</returns>
      <param name="elements">コレクションの要素を提供する式のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> が null か、または null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elements" /> が空であるか、結果型が共通しない式を含んでいます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>指定されたコレクション型の空のコレクションを構築する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> を作成します。</summary>
      <returns>指定されたコレクション型と空の Arguments リストを持つ新しい DbNewInstanceExpression。</returns>
      <param name="collectionType">作成するコレクションの型メタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collectionType" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>指定された名前付き列と (式として指定される) 特定の値から成る行を生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> を作成します。</summary>
      <returns>行の構築を表す新しい DbNewInstanceExpression。</returns>
      <param name="columnValues">行の構造と値を定義するキー/値のペア (文字列と DbExpression) のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> が null であるか、列名または式が null である要素を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> が空であるか、重複する列名または無効な列名を含んでいます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数の論理否定を実行する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" /> を作成します。</summary>
      <returns>指定された引数を持つ新しい DbNotExpression。</returns>
      <param name="argument">引数を指定するブール式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">argument の結果型がブール型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数と右辺の引数を比較して等しくないかどうかを調べる新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" /> を作成します。</summary>
      <returns>非等価比較を表す新しい DbComparisonExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ等値比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>型指定された null 値を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" /> を作成します。</summary>
      <returns>DbNullExpression のインスタンス。</returns>
      <param name="nullType">null 値の型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nullType" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>指定した型と一致する指定した入力セットの要素で構成されるセットを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> を作成します。</summary>
      <returns>指定されたセット引数と型、および ExpressionKind の <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" /> を持つ新しい DbOfTypeExpression。</returns>
      <param name="argument">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">入力セットの要素のうち結果のセットに含める要素の型メタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がコレクション型でないか、<paramref name="type" /> が属する型階層が、<paramref name="argument" /> のコレクション結果型の要素の型が属する型階層と異なります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>指定した型と完全に一致する指定した入力セットの要素で構成されるセットを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" /> を作成します。</summary>
      <returns>指定されたセット引数と型、および ExpressionKind の <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" /> を持つ新しい DbOfTypeExpression。</returns>
      <param name="argument">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="type">入力セットの要素のうち結果のセットに含める要素の型メタデータ。この型と完全に一致した要素だけが結果のセットに含まれます。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="type" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がコレクション型でないか、<paramref name="type" /> が属する型階層が、<paramref name="argument" /> のコレクション結果型の要素の型が属する型階層と異なります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺と右辺の引数について論理 OR を実行する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" /> を作成します。</summary>
      <returns> 指定された引数を持つ新しい DbOrExpression。</returns>
      <param name="left"> 左辺の引数を指定するブール式。</param>
      <param name="right"> 右辺の引数を指定するブール式。</param>
      <exception cref="T:System.ArgumentNullException">leftright</exception>
      <exception cref="T:System.ArgumentException">leftright</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>昇順の並べ替え順序と既定の照合順序を使用して、指定された入力セットを指定された並べ替えキーで並べ替える新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>order-by 操作を表す新しい DbSortExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="sortKey">与えられた入力セットのメンバーから並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="sortKey" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる結果型がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>昇順の並べ替え順序と指定された照合順序を使用して、指定された入力セットを指定された並べ替えキーで並べ替える新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>order-by 操作を表す新しい DbSortExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="sortKey">与えられた入力セットのメンバーから並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <param name="collation">並べ替えに使用する照合順序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" />、または <paramref name="collation" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる文字列結果型がありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> が空であるか、空白文字だけで構成されています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>降順の並べ替え順序と既定の照合順序を使用して、指定された入力セットを指定された並べ替えキーで並べ替える新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>order-by 操作を表す新しい DbSortExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="sortKey">与えられた入力セットのメンバーから並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="sortKey" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる文字列結果型がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>降順の並べ替え順序と既定の照合順序を使用して、指定された入力セットを指定された並べ替えキーで並べ替える新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>order-by 操作を表す新しい DbSortExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="sortKey">与えられた入力セットのメンバーから並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <param name="collation">並べ替えに使用する照合順序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" />、または <paramref name="collation" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる文字列結果型がありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> が空であるか、空白文字だけで構成されています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>特定の入力セットの各要素につき 1 回、指定された <paramref name="apply" /> 式を評価し、対応する入力列と適用列を持った行のコレクションを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> を作成します。<paramref name="apply" /> で空のセットに評価される行には、null の適用列値が割り当てられます。</summary>
      <returns>入力とバインディングの適用が指定され、OuterApply の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> が設定された新しい DbApplyExpression。</returns>
      <param name="source">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">入力セットのメンバーごとに 1 回評価するロジックを指定するメソッド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="apply" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">apply の結果に null の名前または式が含まれています。</exception>
      <exception cref="T:System.ArgumentException">apply の結果は、式のバインディングで無効な名前または式が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>特定の入力セットの各要素につき 1 回、指定された <paramref name="apply" /> 式を評価し、対応する入力列と適用列を持った行のコレクションを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> を作成します。<paramref name="apply" /> で空のセットに評価される行には、null の適用列値が割り当てられます。</summary>
      <returns>入力とバインディングの適用が指定され、OuterApply の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> が設定された新しい DbApplyExpression。</returns>
      <param name="input">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <param name="apply">入力セットのメンバーごとに 1 回評価するロジックを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="apply" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>指定された名前と型のパラメーターを参照する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> を作成します。</summary>
      <returns>指定された名前および型でパラメーターへの参照を表す DbParameterReferenceExpression。式の結果型は、<paramref name="type" /> と同じになります。</returns>
      <param name="type">参照されるパラメーターの型。</param>
      <param name="name">参照されるパラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺の引数を右辺の引数に加算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> を作成します。</summary>
      <returns>加算演算を表す新しい DbArithmeticExpression。</returns>
      <param name="left">左辺の引数を指定する式。</param>
      <param name="right">右辺の引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">left と right の結果型が、同じ数値型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された入力セットに対して指定された式を射影する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> を作成します。</summary>
      <returns>射影操作を表す新しい DbProjectExpression。</returns>
      <param name="input">入力セットを指定する式バインディング。</param>
      <param name="projection">セットに対して射影する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="projection" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>指定されたプロパティの取得を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> を作成します。</summary>
      <returns>プロパティの取得を表す新しい DbPropertyExpression。</returns>
      <param name="instance">プロパティを取得する対象のインスタンス。プロパティが static の場合は、null が返されます。</param>
      <param name="propertyMetadata">取得するプロパティのメタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyMetadata" /> が null であるか、<paramref name="instance" /> が null で、プロパティは静的ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>指定されたナビゲーション プロパティの取得を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> を作成します。</summary>
      <returns>ナビゲーション プロパティの取得を表す新しい DbPropertyExpression。</returns>
      <param name="instance">ナビゲーション プロパティを取得する対象のインスタンス。</param>
      <param name="navigationProperty">取得するナビゲーション プロパティのメタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigationProperty" /> または <paramref name="instance" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>指定されたリレーションシップ端のメンバーの取得を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> を作成します。</summary>
      <returns>リレーションシップ端のメンバーの取得を表す新しい DbPropertyExpression。</returns>
      <param name="instance">リレーションシップ端のメンバーを取得する対象のインスタンス。</param>
      <param name="relationshipEnd">取得するリレーションシップ端のメンバーのメタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipEnd" /> が null であるか、<paramref name="instance" /> が null で、プロパティは静的ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>特定のインスタンスからの指定された名前のインスタンス プロパティの取得を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" /> を作成します。</summary>
      <returns>プロパティの取得を表す新しい DbPropertyExpression。</returns>
      <param name="instance">プロパティを取得する対象のインスタンス。</param>
      <param name="propertyName">取得するプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> が null であるか、<paramref name="instance" /> が null で、プロパティは静的ではありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="instance" /> の型では、指定された名前のプロパティが宣言されていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>キー値に基づいて特定のエンティティへの参照をエンコードする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> を作成します。</summary>
      <returns>特定のエンティティ セットに指定されたキー値を持つ要素を参照する新しい DbRefExpression。</returns>
      <param name="entitySet">参照先の要素が存在するエンティティ セット。</param>
      <param name="keyRow">参照先のエンティティ タイプのキー プロパティと (数、型、および順序が) 一致する列を持ったレコードを構築する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> または <paramref name="keyRow" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>キー値に基づいて特定のエンティティへの参照をエンコードする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" /> を作成します。</summary>
      <returns>特定のエンティティ セットに指定されたキー値を持つ要素を参照する新しい DbRefExpression。</returns>
      <param name="entitySet">参照先の要素が存在するエンティティ セット。</param>
      <param name="keyRow">参照先のエンティティ タイプのキー プロパティと (数、型、および順序が) 一致する列を持ったレコードを構築する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="entityType">参照が参照すべきエンティティの型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />、<paramref name="keyRow" />、または <paramref name="entityType" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> が、エンティティ セットのエンティティ型と同じ型階層内にありません。または、<paramref name="keyRow" /> に、参照されているエンティティ セットのエンティティ型のキー プロパティと一致するレコード結果型がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>指定したエンティティまたはリレーションシップ セットを参照する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" /> を作成します。</summary>
      <returns>指定されたエンティティまたはリレーションシップ セットに基づく新しい DbScanExpression。</returns>
      <param name="targetSet">参照するエンティティまたはリレーションシップ セットのメタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetSet" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>指定された入力セットに対して指定された式を選択する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> を作成します。</summary>
      <returns> 選択操作を表す新しい DbProjectExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="projection">与えられた入力セットのメンバーから射影された式をどのように得るかを指定するメソッド。このメソッドは、Select と互換性があり、なおかつ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に解決可能な型のインスタンスを生成する必要があります。<paramref name="TProjection" /> の互換性要件は解説で説明します。</param>
      <typeparam name="TProjection">
        <paramref name="projection" /> のメソッドの結果型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="projection" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> の結果は null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>特定の入力セットの各要素につき 1 回、指定された <paramref name="apply" /> 式を評価し、対応する入力列と適用列を持った行のコレクションを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> を作成します。<paramref name="apply" /> で空のセットに評価される行は含まれません。その上で、指定された <paramref name="selector" /> を各行から選択する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> が作成され、結果のコレクション全体が構成されます。</summary>
      <returns>入力とバインディングの適用が指定され、CrossApply の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> が設定された新しい DbApplyExpression からの特定のセレクターの結果を選択する新しい DbProjectExpression。</returns>
      <param name="source">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">入力セットのメンバーごとに 1 回評価するロジックを表すメソッド。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="apply" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> によって生成される式がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>特定の入力セットの各要素につき 1 回、指定された <paramref name="apply" /> 式を評価し、対応する入力列と適用列を持った行のコレクションを生成する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" /> を作成します。<paramref name="apply" /> で空のセットに評価される行は含まれません。その上で、指定された <paramref name="selector" /> を各行から選択する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> が作成され、結果のコレクション全体が構成されます。</summary>
      <returns>CrossApply の <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> の入力とバインディングの適用が指定された新しい DbApplyExpression からの特定のセレクターの結果を選択する新しい DbProjectExpression。</returns>
      <param name="source">入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <param name="apply">入力セットのメンバーごとに 1 回評価するロジックを表すメソッド。</param>
      <param name="selector">入力セットと適用セットの要素から結果セットの要素をどのように得るかを指定するメソッド。このメソッドは、SelectMany と互換性があり、なおかつ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に解決可能な型のインスタンスを生成する必要があります。<paramref name="TSelector" /> の互換性要件は解説で説明します。</param>
      <typeparam name="TSelector">
        <paramref name="selector" /> のメソッドの結果型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="apply" />、または <paramref name="selector" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="apply" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentNullException">DbExpression への変換時の <paramref name="selector" /> の結果は null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="apply" /> によって生成される式がコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>プロパティへの値の設定を表す新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" /> を作成します。</summary>
      <returns>新しく作成される set 句。</returns>
      <param name="property">設定されるプロパティ。</param>
      <param name="value">プロパティに設定される値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した並べ替え仕様に従って指定した入力セットを並べ替えた後、指定数の要素をスキップする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> を作成します。</summary>
      <returns>スキップ操作を表す新しい DbSkipExpression。</returns>
      <param name="input">入力セットを指定する式バインディング。</param>
      <param name="sortOrder">入力セットの要素をどのように並べ替えるかを決定する並べ替え仕様のリスト。</param>
      <param name="count">順序付けされたセットの要素のうち、スキップする要素数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="sortOrder" />、または <paramref name="count" /> が null か、あるいは <paramref name="sortOrder" /> が null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> が空白であるか、<paramref name="count" /> が <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> または <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> ではありません。または、count の結果型が 64 ビット整数型に等しくないか、この型に上位変換できません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定の順序で並べ替えられた入力セットから指定数の要素をスキップする新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" /> を作成します。</summary>
      <returns>スキップ操作を表す新しい DbSkipExpression。</returns>
      <param name="argument">並べ替えた入力セットを指定する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />。</param>
      <param name="count">順序付けされたセットの要素のうち、スキップする要素数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="count" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> が <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> または <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> ではありません。または、count の結果型が 64 ビット整数型に等しくないか、この型に上位変換できません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>指定された入力セットを指定された並べ替え仕様で並べ替える新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>並べ替え操作を表す新しい DbSortExpression。</returns>
      <param name="input">入力セットを指定する式バインディング。</param>
      <param name="sortOrder">入力セットの要素をどのように並べ替えるかを決定する並べ替え仕様のリスト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> または <paramref name="sortOrder" /> が null か、あるいは <paramref name="sortOrder" /> が null を含んでいます。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Argument コレクションの要素数を指定した数の制限値に制限する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" /> オブジェクトを作成します。同じ順位の結果は出力に含まれません。</summary>
      <returns>関連付けられた結果を含まない、指定された引数と数の制限値を持つ新しい DbLimitExpression。</returns>
      <param name="argument">入力コレクションを指定する式。</param>
      <param name="count">制限値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="count" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型がコレクション型でないか、<paramref name="count" /> の結果型が 64 ビット整数型でないか、この型に上位変換できません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定した順序入力セットの並べ替え順序を含む並べ替え順序、昇順の並べ替え順序の指定した並べ替えキー、および既定の照合順序を持つ新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>新しい order-by 操作全体を表す新しい DbSortExpression。</returns>
      <param name="source">順序付けされた入力セットを指定する DbSortExpression。</param>
      <param name="sortKey">与えられた入力セットのメンバーから二次的並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="sortKey" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる結果型がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>指定した順序入力セットの並べ替え順序を含む並べ替え順序、昇順の並べ替え順序の指定した並べ替えキー、および指定した照合順序を持つ新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>新しい order-by 操作全体を表す新しい DbSortExpression。</returns>
      <param name="source">順序付けされた入力セットを指定する DbSortExpression。</param>
      <param name="sortKey">与えられた入力セットのメンバーから二次的並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <param name="collation">並べ替えに使用する照合順序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" />、または <paramref name="collation" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる文字列結果型がありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> が空であるか、空白文字だけで構成されています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定した順序入力セットの並べ替え順序を含む並べ替え順序、降順の並べ替え順序の指定した並べ替えキー、および既定の照合順序を持つ新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>新しい order-by 操作全体を表す新しい DbSortExpression。</returns>
      <param name="source">順序付けされた入力セットを指定する DbSortExpression。</param>
      <param name="sortKey">与えられた入力セットのメンバーから二次的並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="sortKey" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる結果型がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>指定した順序入力セットの並べ替え順序を含む並べ替え順序、降順の並べ替え順序の指定した並べ替えキー、および指定した照合順序を持つ新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> を作成します。</summary>
      <returns>新しい order-by 操作全体を表す新しい DbSortExpression。</returns>
      <param name="source">順序付けされた入力セットを指定する DbSortExpression。</param>
      <param name="sortKey">与えられた入力セットのメンバーから二次的並べ替えキーの式をどのように得るかを指定するメソッド。このメソッドは、並べ替えキーの定義を提供する (順序を比較できる結果型の) 式を生成する必要があります。</param>
      <param name="collation">並べ替えに使用する照合順序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />、<paramref name="sortKey" />、または <paramref name="collation" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sortKey" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> の結果型がコレクション型ではありません。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortKey" /> によって生成された式に順序比較できる文字列結果型がありません。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> が空であるか、空白文字だけで構成されています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>昇順の並べ替え順序と既定の照合順序で新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> を作成します。</summary>
      <returns>特定の並べ替えキーと昇順の並べ替え順序を持つ新しい並べ替え句。</returns>
      <param name="key">並べ替えキーを定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> の結果型が順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>昇順の並べ替え順序と指定された照合順序で新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> を作成します。</summary>
      <returns>特定の並べ替えキーとコレクション、および昇順の並べ替え順序を持つ新しい並べ替え句。</returns>
      <param name="key">並べ替えキーを定義する式。</param>
      <param name="collation">並べ替えに使用する照合順序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> が空であるか、空白文字だけで構成されています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> の結果型が順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>降順の並べ替え順序と既定の照合順序で新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> を作成します。</summary>
      <returns>特定の並べ替えキーと降順の並べ替え順序を持つ新しい並べ替え句。</returns>
      <param name="key">並べ替えキーを定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> の結果型が順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>降順の並べ替え順序と指定された照合順序で新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> を作成します。</summary>
      <returns>特定の並べ替えキーとコレクション、および降順の並べ替え順序を持つ新しい並べ替え句。</returns>
      <param name="key">並べ替えキーを定義する式。</param>
      <param name="collation">並べ替えに使用する照合順序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> が空であるか、空白文字だけで構成されています。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> の結果型が順序比較できる型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" /> を作成します。</summary>
      <returns>指定された引数と型を持つ新しい DbTreatExpression。</returns>
      <param name="argument">インスタンスを指定する式。</param>
      <param name="treatType">想定する型の型メタデータ。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> または <paramref name="treatType" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> が属する型階層が、<paramref name="argument" /> の結果型が属する型階層と異なります。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>ブール値 true を持つ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> を作成します。</summary>
      <returns>ブール値 true を持つ <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>引数の値を否定する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> を作成します。</summary>
      <returns>否定演算を表す新しい DbArithmeticExpression。</returns>
      <param name="argument">引数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" /> の結果型が数値型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺のセット引数と右辺のセット引数について、重複を取り除いた和集合を計算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を作成します。</summary>
      <returns>左右の引数の重複を取り除いて和集合を計算する新しい DbExpression オブジェクト。</returns>
      <param name="left">左辺のセット引数を定義する式。</param>
      <param name="right">右辺のセット引数を定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じ等価比較できる型の要素を持つコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>左辺のセット引数と右辺のセット引数について、重複を取り除く前の和集合を計算する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" /> を作成します。</summary>
      <returns>重複を含む、左右の引数の和集合である新しい DbUnionAllExpression。</returns>
      <param name="left">左辺のセット引数を定義する式。</param>
      <param name="right">右辺のセット引数を定義する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> または <paramref name="right" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="left" /> と <paramref name="right" /> の結果型が、同じコレクション型ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>指定された名前と型の変数を参照する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" /> を作成します。</summary>
      <returns>指定された名前および型で変数への参照を表す DbVariableReferenceExpression。式の結果型は、<paramref name="type" /> と同じになります。</returns>
      <param name="type">参照先の変数の型。</param>
      <param name="name">参照されている変数の名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>指定された述語を使用して指定された入力セットの要素をフィルター処理する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" /> を作成します。</summary>
      <returns>Any 操作を表す新しい DbQuantifierExpression。</returns>
      <param name="source">入力セットを指定する式。</param>
      <param name="predicate">入力セットのメンバーごとに評価する述語を表すメソッド。このメソッドは、述語のロジックを備え、ブール型の結果を返す式を生成する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> または <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> によって生成された式が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="predicate" /> によって生成される式の結果型がブール型ではありません。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>EDM の正規関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を構築するための API を提供し、式の型そのものの拡張メソッドとして API にアクセスできるようにします。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Abs' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は数値である必要があります。式の結果型は <paramref name="value" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="value" /> の絶対値を返す新しい DbFunctionExpression。</returns>
      <param name="value">数値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> の結果と同じ型の引数を受け取る正規の 'Abs' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddDays' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset の整数である必要があります。式の結果型は <paramref name="dateValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定された日数を <paramref name="dateValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="dateValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="dateValue" /> に加算する日数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddDays' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddHours' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time の整数である必要があります。式の結果型は <paramref name="timeValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定された時間数を <paramref name="timeValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="timeValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="timeValue" /> に加算する時間数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddHours' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddMicroseconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time の整数である必要があります。式の結果型は <paramref name="timeValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定されたマイクロ秒数を <paramref name="timeValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="timeValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="timeValue" /> に加算するマイクロ秒数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddMicroseconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddMilliseconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time の整数である必要があります。式の結果型は <paramref name="timeValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定されたミリ秒数を <paramref name="timeValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="timeValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="timeValue" /> に加算するミリ秒数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddMilliseconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddMinutes' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time の整数である必要があります。式の結果型は <paramref name="timeValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定された分数を <paramref name="timeValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="timeValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="timeValue" /> に加算する分数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddMinutes' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddMonths' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset の整数である必要があります。式の結果型は <paramref name="dateValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定された月数を <paramref name="dateValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="dateValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="dateValue" /> に加算する月数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddMonths' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddNanoseconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time の整数である必要があります。式の結果型は <paramref name="timeValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定されたナノ秒数を <paramref name="timeValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="timeValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="timeValue" /> に加算するナノ秒数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddNanoseconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddSeconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time の整数である必要があります。式の結果型は <paramref name="timeValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定された秒数を <paramref name="timeValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="timeValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="timeValue" /> に加算する秒数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddSeconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'AddYears' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset の整数である必要があります。式の結果型は <paramref name="dateValue" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="addValue" /> によって指定された年数を <paramref name="dateValue" /> によって指定された値に加算する新しい DbFunctionExpression。</returns>
      <param name="dateValue">
        <paramref name="addValue" /> を加算する必要がある値を指定する式。</param>
      <param name="addValue">
        <paramref name="dateValue" /> に加算する年数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> または <paramref name="addValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> および <paramref name="addValue" /> の結果と同じ型の引数を受け取る正規の 'AddYears' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションに対して正規の 'Avg' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は、コレクションの要素の型と同じです。</summary>
      <returns>平均値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">平均値の計算に使用するコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'Avg' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'BitwiseAnd' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は整数で統一する必要があります。式の結果型もこれと同じ型になります。</summary>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> のビットごとの AND 演算によって生成された値を返す新しい DbFunctionExpression。</returns>
      <param name="value1">最初のオペランドを指定する式。</param>
      <param name="value2">2 番目のオペランドを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> または <paramref name="value2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value1" /> および <paramref name="value2" /> の結果と同じ型の引数を受け取る正規の 'BitwiseAnd' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'BitwiseNot' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は整数である必要があります。式の結果型もこれと同じ型になります。</summary>
      <returns>
        <paramref name="value" /> のビットごとの NOT 演算によって生成された値を返す新しい DbFunctionExpression。</returns>
      <param name="value">最初のオペランドを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> の結果と同じ型の引数を受け取る正規の 'BitwiseNot' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'BitwiseOr' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は整数で統一する必要があります。式の結果型もこれと同じ型になります。</summary>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> のビットごとの OR 演算によって生成された値を返す新しい DbFunctionExpression。</returns>
      <param name="value1">最初のオペランドを指定する式。</param>
      <param name="value2">2 番目のオペランドを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> または <paramref name="value2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value1" /> および <paramref name="value2" /> の結果と同じ型の引数を受け取る正規の 'BitwiseOr' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'BitwiseXor' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は整数で統一する必要があります。式の結果型もこれと同じ型になります。</summary>
      <returns>
        <paramref name="value1" /> と <paramref name="value2" /> のビットごとの XOR (排他的 OR) 演算によって生成された値を返す新しい DbFunctionExpression。</returns>
      <param name="value1">最初のオペランドを指定する式。</param>
      <param name="value2">2 番目のオペランドを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value1" /> または <paramref name="value2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value1" /> および <paramref name="value2" /> の結果と同じ型の引数を受け取る正規の 'BitwiseXor' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Ceiling' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は、single、double、decimal のいずれかである必要があります。式の結果型は <paramref name="value" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="value" /> 以上の最小の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="value">数値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> の結果と同じ型の引数を受け取る正規の 'Ceiling' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Concat' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は文字列である必要があります。式の結果型は文字列です。</summary>
      <returns>連結された文字列を生成する新しい DbFunctionExpression。</returns>
      <param name="string1">連結結果の文字列の最初に出現する文字列を指定する式。</param>
      <param name="string2">連結結果の文字列の 2 番目に出現する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="string1" /> または <paramref name="string2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="string1" /> および <paramref name="string2" /> の結果と同じ型の引数を受け取る正規の 'Concat' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Contains' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は文字列である必要があります。式の結果型は Boolean です。</summary>
      <returns>
        <paramref name="searchedForString" /> が <paramref name="searchedString" /> 内で発生するかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="searchedString">
        <paramref name="searchedForString" /> の検索対象の文字列を指定する式。</param>
      <param name="searchedForString">
        <paramref name="searchedString" /> から検索する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchedString" /> または <paramref name="searchedForString" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchedString" /> および <paramref name="searchedForString" /> の結果と同じ型の引数を受け取る正規の 'Contains' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションに対して正規の 'Count' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は Edm.Int32 です。</summary>
      <returns>カウント値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">カウント値の計算対象のコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'Count' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'CreateDateTime' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。<paramref name="second" /> の結果型は Edm.Double とし、それ以外のすべての引数の結果型は Edm.Int32 にする必要があります。式の結果型は Edm.DateTime です。</summary>
      <returns>指定された値に基づいて新しい DateTime を返す新しい DbFunctionExpression。</returns>
      <param name="year">新しい DateTime インスタンスの年値を表す式。</param>
      <param name="month">新しい DateTime インスタンスの月値を表す式。</param>
      <param name="day">新しい DateTime インスタンスの日値を表す式。</param>
      <param name="hour">新しい DateTime インスタンスの時間値を表す式。</param>
      <param name="minute">新しい DateTime インスタンスの分値を表す式。</param>
      <param name="second">新しい DateTime インスタンスの秒値を表す式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、および <paramref name="second" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、および <paramref name="second" /> の結果と同じ型の引数を受け取る正規の 'CreateDateTime' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'CreateDateTimeOffset' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。<paramref name="second" /> の結果型は Edm.Double とし、それ以外のすべての引数の結果型は Edm.Int32 にする必要があります。式の結果型は Edm.DateTimeOffset です。</summary>
      <returns>指定された値に基づいて新しい DateTimeOffset を返す新しい DbFunctionExpression。</returns>
      <param name="year">新しい DateTimeOffset インスタンスの年値を表す式。</param>
      <param name="month">新しい DateTimeOffset インスタンスの月値を表す式。</param>
      <param name="day">新しい DateTimeOffset インスタンスの日値を表す式。</param>
      <param name="hour">新しい DateTimeOffset インスタンスの時間値を表す式。</param>
      <param name="minute">新しい DateTimeOffset インスタンスの分値を表す式。</param>
      <param name="second">新しい DateTimeOffset インスタンスの秒値を表す式。</param>
      <param name="timeZoneOffset">新しい DateTimeOffset インスタンスのタイム ゾーン オフセットの分数を表す式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、または <paramref name="timeZoneOffset" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="year" />、<paramref name="month" />、<paramref name="day" />、<paramref name="hour" />、<paramref name="minute" />、<paramref name="second" />、および <paramref name="timeZoneOffset" /> の結果と同じ型の引数を受け取る正規の 'CreateDateTimeOffset' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'CreateTime' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。<paramref name="second" /> の結果型は Edm.Double とし、それ以外のすべての引数の結果型は Edm.Int32 にする必要があります。式の結果型は Edm.Time です。</summary>
      <returns>指定された値に基づいて新しい Time を返す新しい DbFunctionExpression。</returns>
      <param name="hour">新しい DateTime インスタンスの時間値を表す式。</param>
      <param name="minute">新しい DateTime インスタンスの分値を表す式。</param>
      <param name="second">新しい DateTime インスタンスの秒値を表す式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hour" />、<paramref name="minute" />、または <paramref name="second" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hour" />、<paramref name="minute" />、および <paramref name="second" /> の結果と同じ型の引数を受け取る正規の 'CreateTime' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>正規の 'CurrentDateTime' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。</summary>
      <returns>Edm.DateTime インスタンスとして現在の日付と時刻を返す新しい DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>正規の 'CurrentDateTimeOffset' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。</summary>
      <returns>Edm.DateTimeOffset インスタンスとして現在の日付と時刻を返す新しい DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>正規の 'CurrentUtcDateTime' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。</summary>
      <returns>Edm.DateTime インスタンスとして現在の UTC の日付と時刻を返す新しい DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Day' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="dateValue" /> から日付の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue">日の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> の結果と同じ型の引数を受け取る正規の 'Day' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DayOfYear' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="dateValue" /> から年の日付の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue">年の通算日の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> の結果と同じ型の引数を受け取る正規の 'DayOfYear' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffDays' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime または DateTimeOffset である必要があります。<paramref name="dateValue1" /> の結果型と <paramref name="dateValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="dateValue1" /> と <paramref name="dateValue2" /> 間の日数差を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue1">1 つ目の値 (DateTime または DateTimeOffset) を指定する式。</param>
      <param name="dateValue2">
        <paramref name="dateValue1" /> との日数差を計算する DateTime または DateTimeOffset を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> または <paramref name="dateValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue1" /> および <paramref name="dateValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffDays' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffHours' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。<paramref name="timeValue1" /> の結果型と <paramref name="timeValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue1" /> と <paramref name="timeValue2" /> 間の時間差 (時間) を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue1">1 つ目の値 (DateTime、DateTimeOffset、または Time) を指定する式。</param>
      <param name="timeValue2">
        <paramref name="timeValue1" /> との時間差 (時間) を計算する DateTime、DateTimeOffset、または Time を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> または <paramref name="timeValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue1" /> および <paramref name="timeValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffHours' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffMicroseconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。<paramref name="timeValue1" /> の結果型と <paramref name="timeValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue1" /> と <paramref name="timeValue2" /> 間の時間差 (マイクロ秒) を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue1">1 つ目の値 (DateTime、DateTimeOffset、または Time) を指定する式。</param>
      <param name="timeValue2">
        <paramref name="timeValue1" /> との時間差 (マイクロ秒) を計算する DateTime、DateTimeOffset、または Time を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> または <paramref name="timeValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue1" /> および <paramref name="timeValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffMicroseconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffMilliseconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。<paramref name="timeValue1" /> の結果型と <paramref name="timeValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue1" /> と <paramref name="timeValue2" /> 間の時間差 (ミリ秒) を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue1">1 つ目の値 (DateTime、DateTimeOffset、または Time) を指定する式。</param>
      <param name="timeValue2">
        <paramref name="timeValue1" /> との時間差 (ミリ秒) を計算する DateTime、DateTimeOffset、または Time を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> または <paramref name="timeValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue1" /> および <paramref name="timeValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffMilliseconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffMinutes' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。<paramref name="timeValue1" /> の結果型と <paramref name="timeValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue1" /> と <paramref name="timeValue2" /> 間の時間差 (分) を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue1">1 つ目の値 (DateTime、DateTimeOffset、または Time) を指定する式。</param>
      <param name="timeValue2">
        <paramref name="timeValue1" /> との時間差 (分) を計算する DateTime、DateTimeOffset、または Time を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> または <paramref name="timeValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue1" /> および <paramref name="timeValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffMinutes' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffMonths' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime または DateTimeOffset である必要があります。<paramref name="dateValue1" /> の結果型と <paramref name="dateValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="dateValue1" /> と <paramref name="dateValue2" /> 間の月の差を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue1">1 つ目の値 (DateTime または DateTimeOffset) を指定する式。</param>
      <param name="dateValue2">
        <paramref name="dateValue1" /> との月の差を計算する DateTime または DateTimeOffset を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> または <paramref name="dateValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue1" /> および <paramref name="dateValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffMonths' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffNanoseconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。<paramref name="timeValue1" /> の結果型と <paramref name="timeValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue1" /> と <paramref name="timeValue2" /> 間の時間差 (ナノ秒) を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue1">1 つ目の値 (DateTime、DateTimeOffset、または Time) を指定する式。</param>
      <param name="timeValue2">
        <paramref name="timeValue1" /> との時間差 (ナノ秒) を計算する DateTime、DateTimeOffset、または Time を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> または <paramref name="timeValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue1" /> および <paramref name="timeValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffNanoseconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffSeconds' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。<paramref name="timeValue1" /> の結果型と <paramref name="timeValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue1" /> と <paramref name="timeValue2" /> 間の時間差 (秒) を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue1">1 つ目の値 (DateTime、DateTimeOffset、または Time) を指定する式。</param>
      <param name="timeValue2">
        <paramref name="timeValue1" /> との時間差 (秒) を計算する DateTime、DateTimeOffset、または Time を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue1" /> または <paramref name="timeValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue1" /> および <paramref name="timeValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffSeconds' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'DiffYears' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は DateTime または DateTimeOffset である必要があります。<paramref name="dateValue1" /> の結果型と <paramref name="dateValue2" /> の結果型は一致している必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="dateValue1" /> と <paramref name="dateValue2" /> 間の年の差を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue1">1 つ目の値 (DateTime または DateTimeOffset) を指定する式。</param>
      <param name="dateValue2">
        <paramref name="dateValue1" /> との年の差を計算する DateTime または DateTimeOffset を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue1" /> または <paramref name="dateValue2" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue1" /> および <paramref name="dateValue2" /> の結果と同じ型の引数を受け取る正規の 'DiffYears' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'EndsWith' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は文字列である必要があります。式の結果型は Boolean です。</summary>
      <returns>
        <paramref name="stringArgument" /> が <paramref name="suffix" /> で終わるかどうかを示す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">チェック対象文字列を指定する式。指定された <paramref name="suffix" /> の存在がチェックされます。</param>
      <param name="suffix">チェック対象文字列 <paramref name="stringArgument" /> の suffix を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> または <paramref name="suffix" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> および <paramref name="suffix" /> の結果と同じ型の引数を受け取る正規の 'EndsWith' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Floor' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は、single、double、decimal のいずれかである必要があります。式の結果型は <paramref name="value" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="value" /> 以下の最大の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="value">数値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> の結果と同じ型の引数を受け取る正規の 'Floor' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GetTotalOffsetMinutes' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTimeOffset である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>分数 <paramref name="dateTimeOffsetArgument" /> を返す新しい DbFunctionExpression は、GMT 標準時からのオフセットです。</returns>
      <param name="dateTimeOffsetArgument">GMT からの分オフセットを取得する DateTimeOffset 値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateTimeOffsetArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTimeOffsetArgument" /> の結果と同じ型の引数を受け取る正規の 'GetTotalOffsetMinutes' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Hour' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue" /> から時間の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue">時間の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> の結果と同じ型の引数を受け取る正規の 'Hours' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'IndexOf' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は文字列である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="searchString" /> の <paramref name="stringToFind" /> の最初のインデックスを返す新しい DbFunctionExpression。</returns>
      <param name="searchString">
        <paramref name="stringToFind" /> で検索する文字列を指定する式。</param>
      <param name="stringToFind">
        <paramref name="searchString" /> 内から検索する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="searchString" /> または <paramref name="stringToFind" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="searchString" /> および <paramref name="stringToFind" /> の結果と同じ型の引数を受け取る正規の 'IndexOf' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Left' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は、文字列と整数である必要があります。式の結果型は文字列です。</summary>
      <returns>
        <paramref name="stringArgument" /> から長さ <paramref name="length" /> の左端の部分文字列を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">取得元の文字列を指定する式。この文字列の左端から部分文字列が取得されます。</param>
      <param name="length">
        <paramref name="stringArgument" /> の左端から取得する部分文字列の長さを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> または <paramref name="length" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'Left' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Length' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>
        <paramref name="stringArgument" /> の長さを返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">長さの計算対象となる文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'Length' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションに対して正規の 'BigCount' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は Edm.Int64 です。</summary>
      <returns>カウント値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">カウント値の計算対象のコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'BigCount' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションに対して正規の 'Max' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は、コレクションの要素の型と同じです。</summary>
      <returns>最大値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">最大値を求めるコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'Max' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Millisecond' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue" /> からミリ秒の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue">ミリ秒の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> の結果と同じ型の引数を受け取る正規の 'Millisecond' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションに対して正規の 'Min' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は、コレクションの要素の型と同じです。</summary>
      <returns>最小値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">最小値を求めるコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'Min' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Minute' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue" /> から分の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue">分の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> の結果と同じ型の引数を受け取る正規の 'Minute' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Month' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="dateValue" /> から月の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue">月の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> の結果と同じ型の引数を受け取る正規の 'Month' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>正規の 'NewGuid' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。</summary>
      <returns>新しい GUID 値を返す新しい DbFunctionExpression。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Power' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は数値である必要があります。式の結果型は <paramref name="baseArgument" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="exponent" /> で指定され累乗された <paramref name="baseArgument" /> の値を返す新しい DbFunctionExpression。</returns>
      <param name="baseArgument">与えられた指数で累乗する数値を指定する式。</param>
      <param name="exponent">
        <paramref name="baseArgument" /> に適用する指数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseArgument" /> または <paramref name="exponent" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseArgument" /> および <paramref name="exponent" /> の結果と同じ型の引数を受け取る正規の 'Power' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Replace' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>出現するすべての <paramref name="toReplace" /> が <paramref name="replacement" /> によって置換される <paramref name="stringArgument" /> に基づいた新しい文字列を返す、新しい DbFunctionExpression。</returns>
      <param name="stringArgument">置換操作の実行対象の文字列を指定する式。</param>
      <param name="toReplace">置換する文字列を指定する式。</param>
      <param name="replacement">置換文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />、<paramref name="toReplace" />、または <paramref name="replacement" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" />、<paramref name="toReplace" />、および <paramref name="replacement" /> の結果と同じ型の引数を受け取る正規の 'Replace' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Reverse' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>
        <paramref name="stringArgument" /> の逆順の値を生成する新しい DbFunctionExpression。</returns>
      <param name="stringArgument">反転する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'Reverse' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Right' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は、文字列と整数である必要があります。式の結果型は文字列です。</summary>
      <returns>
        <paramref name="stringArgument" /> から長さ <paramref name="length" /> の右端の部分文字列を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">取得元の文字列を指定する式。この文字列の右端から部分文字列が取得されます。</param>
      <param name="length">
        <paramref name="stringArgument" /> の右端から取得する部分文字列の長さを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> または <paramref name="length" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'Right' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Round' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は、single、double、decimal のいずれかである必要があります。式の結果型は <paramref name="value" /> の結果型と同じです。</summary>
      <returns>指定された引数を最も近い整数値に丸める新しい DbFunctionExpression。</returns>
      <param name="value">丸め処理の対象の数値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> の結果と同じ型の引数を受け取る正規の 'Round' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Round' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は、single、double、decimal のいずれかと整数である必要があります。式の結果型は <paramref name="value" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="digits" /> で指定された有効桁数で、指定された引数を最も近い整数値に丸める新しい DbFunctionExpression。</returns>
      <param name="value">丸め処理の対象の数値を指定する式。</param>
      <param name="digits">丸め処理に使用する有効桁数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> または <paramref name="digits" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> および <paramref name="digits" /> の結果と同じ型の引数を受け取る正規の 'Round' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Second' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime、DateTimeOffset、または Time である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name="timeValue" /> から秒の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="timeValue">秒の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="timeValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="timeValue" /> の結果と同じ型の引数を受け取る正規の 'Second' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'StartsWith' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は文字列である必要があります。式の結果型は Boolean です。</summary>
      <returns>
        <paramref name="stringArgument" /> が <paramref name="prefix" /> で始まるかどうかを示す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">チェック対象文字列を指定する式。指定された <paramref name="prefix" /> の存在がチェックされます。</param>
      <param name="prefix">チェック対象文字列 <paramref name="stringArgument" /> の prefix を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> または <paramref name="prefix" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> および <paramref name="prefix" /> の結果と同じ型の引数を受け取る正規の 'StartsWith' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションの null 以外のメンバーに対して正規の 'StDev' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は Edm.Double です。</summary>
      <returns>コレクションの null 以外のメンバーの標準偏差値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">標準偏差の計算に使用するコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'StDev' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションの母集団に対して正規の 'StDevP' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は Edm.Double です。</summary>
      <returns>標準偏差値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">標準偏差の計算に使用するコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'StDevP' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Substring' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は、文字列と整数である必要があります。式の結果型は文字列です。</summary>
      <returns>
        <paramref name="start" /> で始まる <paramref name="stringArgument" /> から長さ <paramref name="length" /> の左端の部分文字列を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">取得元の文字列を指定する式。この文字列から部分文字列が取得されます。</param>
      <param name="start">取得する部分文字列の開始インデックスを指定する式。</param>
      <param name="length">部分文字列の長さを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />、<paramref name="start" />、または <paramref name="length" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" />、<paramref name="start" />、および <paramref name="length" /> の結果と同じ型の引数を受け取る正規の 'Substring' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションに対して正規の 'Sum' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は、コレクションの要素の型と同じです。</summary>
      <returns>合計を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">合計の計算に使用するコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'Sum' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'ToLower' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>小文字に変換した <paramref name="stringArgument" /> の値を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">小文字に変換する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'ToLower' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'ToUpper' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>大文字に変換した <paramref name="stringArgument" /> の値を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">大文字に変換する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'ToUpper' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Trim' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>先頭と末尾の空白が削除されている <paramref name="stringArgument" /> の値を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">先頭と末尾の空白を削除する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'Trim' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'RTrim' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>末尾の空白が削除されている <paramref name="stringArgument" /> の値を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">末尾の空白を削除する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'RTrim' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'LTrim' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型も文字列です。</summary>
      <returns>先頭の空白が削除されている <paramref name="stringArgument" /> の値を返す新しい DbFunctionExpression。</returns>
      <param name="stringArgument">先頭の空白を削除する文字列を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="stringArgument" /> の結果と同じ型の引数を受け取る正規の 'LTrim' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Truncate' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は、single、double、decimal のいずれかと整数である必要があります。式の結果型は <paramref name="value" /> の結果型と同じです。</summary>
      <returns>
        <paramref name="digits" /> で指定された有効桁数で、指定された引数を最も近い整数値に切り捨てる新しい DbFunctionExpression。</returns>
      <param name="value">切り捨ての対象の数値を指定する式。</param>
      <param name="digits">切り捨てに使用する有効桁数を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> または <paramref name="digits" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> および <paramref name="digits" /> の結果と同じ型の引数を受け取る正規の 'Truncate' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'TruncateTime' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset である必要があります。式の結果型は <paramref name="dateValue" /> の結果型と同じです。</summary>
      <returns>時刻がゼロに設定された <paramref name="dateValue" /> の値を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue">時刻部分が切り捨て対象となる値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> の結果と同じ型の引数を受け取る正規の 'TruncateTime' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションの null 以外のメンバーに対して正規の 'Var' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は Edm.Double です。</summary>
      <returns>コレクションの null 以外のメンバーの統計的分散値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">統計的分散の計算に使用するコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'Var' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたコレクションの母集団に対して正規の 'VarP' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。式の結果型は Edm.Double です。</summary>
      <returns>統計的分散値を生成する新しい DbFunctionExpression。</returns>
      <param name="collection">統計的分散の計算に使用するコレクションを指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> の結果と同じ型の引数を受け取る正規の 'VarP' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Year' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は DateTime または DateTimeOffset である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>
        <paramref name=" dateValue" /> から年の整数値を返す新しい DbFunctionExpression。</returns>
      <param name="dateValue">年の取得元の値を指定する式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dateValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateValue" /> の結果と同じ型の引数を受け取る正規の 'Year' 関数のオーバーロードはありません。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>Row クラスは、&lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt; を呼び出すことでコンストラクターと同様の手段を提供するためのものであることを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>最初の列の値と (オプションで) 後続の列の値を指定して、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="columnValue">新しい行インスタンスの最初の列を提供するキー/値のペア (必須)。</param>
      <param name="columnValues">新しい行インスタンス内の以降の列を提供するキー/値のペア (省略可能)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Row オブジェクトを <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> に変換します。</summary>
      <returns>変換された Row オブジェクトを表す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</returns>
      <param name="row">行オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>この Row インスタンスに格納されている列に基づいて新しい行を構築する新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" /> を作成します。</summary>
      <returns>この Row インスタンスと同じ列名と DbExpression 値で行を構築する新しい DbNewInstanceExpression。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>空間に関する EDM の正規関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> を構築するための API を提供し、適切であれば、式の型そのものの拡張メソッドとして API にアクセスできるようにします。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'Area' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>spatialValue の領域か、または spatialValue がサーフェスでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">エリアを計算する必要がある空間のサーフェス値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'AsBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Binary です。</summary>
      <returns>spatialValue の既知のバイナリ表現を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">既知のバイナリ表現を生成する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'AsGml' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.String です。</summary>
      <returns>spatialValue の GML (Geography Markup Language) 表現を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">地理の Markup Language (GML) 表現を生成する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'AsText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.String です。</summary>
      <returns>spatialValue の既知のテキスト表現を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">既知のテキスト表現を生成する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'Centroid' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>geometryValue の重心点 (サーフェス自体の上にない可能性がある) か、または geometryValue がサーフェスでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">中心点を取得する必要があるジオメトリのサーフェス値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'CoordinateSystemId' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>spatialValue から整数 SRID 値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">座標系 ID (SRID) を取得する必要がある値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'Distance' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する各引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は Edm.Double です。</summary>
      <returns>spatialValue1 と spatialValue1 の最も近い点間の距離を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">spatialValue1 からの距離を測定する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'Elevation' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>spatialValue の昇格値か、または spatialValue が点でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">昇格 (Z 座標) の値を取得する必要がある空間ポイント値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'EndPoint' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。結果型は spatialValue の結果型と同じです。</summary>
      <returns>spatialValue の終点か、または spatialValue が曲線でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">エンドポイントを取得する必要がある空間のカーブ値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'ExteriorRing' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>ポリゴンの geometryValue の外部リングか、または geometryValue がポリゴンでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">geometry 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyCollectionFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。geographyCollectionWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のコレクション値を返す新しい DbFunctionExpression。</returns>
      <param name="geographyCollectionWellKnownBinaryValue">地理のコレクション値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理のコレクション値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyCollectionFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。geographyCollectionWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のコレクション値を返す新しい DbFunctionExpression。</returns>
      <param name="geographyCollectionWellKnownText">地理のコレクション値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理のコレクション値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型はバイナリである必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定されたバイナリ値に基づいて新しい geography 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">地理の値の既知のバイナリ表現を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。wellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい geography 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">地理の値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理の値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyFromGml' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>基になるプロバイダーの既定の座標系 ID (SRID) で指定された値に基づく新しい geography 値を返す新しい DbFunctionExpression。</returns>
      <param name="geographyMarkup">地理の値の Geography Markup Language (GML) 表現を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyFromGml' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。geographyMarkup の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい geography 値を返す新しい DbFunctionExpression。</returns>
      <param name="geographyMarkup">地理の値の Geography Markup Language (GML) 表現を提供する式。</param>
      <param name="coordinateSystemId">地理の値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型は Edm.Geography です。その値には、基になるプロバイダーの既定の座標系 ID (SRID) があります。</summary>
      <returns>指定された値に基づいて新しい geography 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownText">地理の値の既知のテキスト表現を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。wellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい geography 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownText">地理の値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理の値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyLineFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。lineWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のライン値を返す新しい DbFunctionExpression。</returns>
      <param name="lineWellKnownBinaryValue">地理のライン値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理のライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyLineFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。lineWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のライン値を返す新しい DbFunctionExpression。</returns>
      <param name="lineWellKnownText">地理のライン値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理のライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyMultiLineFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiLineWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のマルチライン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiLineWellKnownBinaryValue">地理のマルチライン値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理のマルチライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyMultiLineFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiLineWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のマルチライン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiLineWellKnownText">地理のマルチライン値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理のマルチライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyMultiPointFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPointWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のマルチポイント値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPointWellKnownBinaryValue">地理のマルチポイント値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理のマルチポイント値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyMultiPointFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPointWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のマルチポイント値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPointWellKnownText">地理のマルチポイント値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理のマルチポイント値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyMultiPolygonFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPolygonWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のマルチポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownBinaryValue">地理のマルチポリゴン値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理のマルチポリゴン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyMultiPolygonFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPolygonWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のマルチポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownText">地理のマルチポリゴン値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理のマルチポリゴン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyPointFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。pointWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のポイント値を返す新しい DbFunctionExpression。</returns>
      <param name="pointWellKnownBinaryValue">地理のポイント値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理のポイント値の座標系 pointWellKnownBinaryValue の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyPointFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。</summary>
      <returns>標準 'GeographyPointFromText' 関数。</returns>
      <param name="pointWellKnownText">地理のポイント値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理のポイント値の座標系 systempointWellKnownTextValue の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyPolygonFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。polygonWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="polygonWellKnownBinaryValue">地理の多角形値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">地理の多角形値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeographyPolygonFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。polygonWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geography です。</summary>
      <returns>指定された値に基づいて新しい地理のポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="polygonWellKnownText">地理の多角形値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">地理の多角形値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryCollectionFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。geometryCollectionWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ コレクション値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryCollectionWellKnownBinaryValue">ジオメトリのコレクション値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのコレクション値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryCollectionFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。geometryCollectionWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ コレクション値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryCollectionWellKnownText">ジオメトリのコレクション値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのコレクション値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型はバイナリ型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定されたバイナリ値に基づいて新しい geometry 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">ジオメトリの値の既知のバイナリ表現を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。wellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しい geometry 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownBinaryValue">ジオメトリの値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリの値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryFromGml' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>基になるプロバイダーの既定の座標系 ID (SRID) で指定された値に基づく新しい geometry 値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryMarkup">ジオメトリの値の Geography Markup Language (GML) 表現を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryFromGml' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。geometryMarkup の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しい geometry 値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryMarkup">ジオメトリの値の Geography Markup Language (GML) 表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリの値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は文字列である必要があります。式の結果型は Edm.Geometry です。その値には、基になるプロバイダーの既定の座標系 ID (SRID) があります。</summary>
      <returns>指定された値に基づいて新しい geometry 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownText">ジオメトリの値の既知のテキスト表現を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。wellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しい geometry 値を返す新しい DbFunctionExpression。</returns>
      <param name="wellKnownText">ジオメトリの値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリの値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryLineFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。lineWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ ライン値を返す新しい DbFunctionExpression。</returns>
      <param name="lineWellKnownBinaryValue">ジオメトリのライン値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryLineFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。lineWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ ライン値を返す新しい DbFunctionExpression。</returns>
      <param name="lineWellKnownText">ジオメトリのライン値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryMultiLineFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiLineWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ マルチライン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiLineWellKnownBinaryValue">ジオメトリのマルチライン値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのマルチライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryMultiLineFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiLineWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ マルチライン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiLineWellKnownText">ジオメトリのマルチライン値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのマルチライン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryMultiPointFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPointWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ マルチポイント値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPointWellKnownBinaryValue">ジオメトリのマルチポイント値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのマルチポイント値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryMultiPointFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPointWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ マルチポイント値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPointWellKnownText">ジオメトリのマルチポイント値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのマルチポイント値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryMultiPolygonFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPolygonWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ マルチポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownBinaryValue">ジオメトリのマルチポリゴン値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのマルチポリゴン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryMultiPolygonFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。multiPolygonWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ マルチポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="multiPolygonWellKnownText">ジオメトリのマルチポリゴン値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのマルチポリゴン値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryPointFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。pointWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ ポイント値を返す新しい DbFunctionExpression。</returns>
      <param name="pointWellKnownBinaryValue">ジオメトリのポイント値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのポイント値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryPointFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。pointWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ ポイント値を返す新しい DbFunctionExpression。</returns>
      <param name="pointWellKnownText">ジオメトリのポイント値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリのポイント値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryPolygonFromBinary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。polygonWellKnownBinaryValue の結果型はバイナリ型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ ポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="polygonWellKnownBinaryValue">ジオメトリの多角形値の既知のバイナリ表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリの多角形値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'GeometryPolygonFromText' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。polygonWellKnownText の結果型は文字列型であり、coordinateSystemId の結果型は整数の数値型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>指定された値に基づいて新しいジオメトリ ポリゴン値を返す新しい DbFunctionExpression。</returns>
      <param name="polygonWellKnownText">ジオメトリの多角形値の既知のテキスト表現を提供する式。</param>
      <param name="coordinateSystemId">ジオメトリの多角形値の座標系の座標系 ID (SRID) を提供する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'InteriorRingAt' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。最初の引数には、Edm.Geometry 結果型が含まれる必要があります。2 番目の引数は、整数の数値結果型である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>geometryValue 内の位置 indexValue にある内部リングか、または geometryValue がポリゴンでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">geometry 値。</param>
      <param name="indexValue">多角形から取得される内部リングの位置を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'InteriorRingCount' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>ポリゴンの geometryValue の内部リングの数か、または geometryValue がポリゴンでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">geometry 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'IsClosedSpatial' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。結果型は Edm.Boolean です。</summary>
      <returns>spatialValue が閉じているかどうかを示すブール値か、または spatialValue が曲線でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">IsClosedSpatial 値を取得する必要がある空間のカーブ値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'IsEmptySpatial' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>spatialValue が空かどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">IsEmptySptiaal 値を取得する必要がある空間の値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'IsRing' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。結果型は Edm.Boolean です。</summary>
      <returns>geometryValue がリング (閉じたものと単純なもの両方) であるかどうかを示すブール値か、または geometryValue が曲線でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">IsRing 値を取得する必要があるジオメトリのカーブ値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'IsSimpleGeometry' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue が単純なジオメトリかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">geometry 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'IsValidGeometry' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue が有効かどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">空間の有効性をテストする必要があるジオメトリの値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'Latitude' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>geographyValue の緯度値か、または geographyValue が点でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geographyValue">緯度値を取得する必要がある地理ポイント値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'Longitude' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>geographyValue の経度値か、または geographyValue が点でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geographyValue">経度値を取得する必要がある地理ポイント値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'Measure' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>spatialValue のメジャーか、または spatialValue が点でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">メジャー (M) 座標の値を取得する必要がある空間ポイント値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'PointAt' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。最初の引数には、Edm.Geography 結果型または Edm.Geometry 結果型が含まれる必要があります。2 番目の引数は、整数の数値結果型である必要があります。式の結果型は spatialValue の結果型と同じです。</summary>
      <returns>spatialValue 内の位置 indexValue にある点か、または spatialValue がライン文字列でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">空間ライン文字列値を指定する式。</param>
      <param name="indexValue">ライン文字列から取得される点の位置を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'PointCount' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>spatialValue の点の数か、または spatialValue がライン文字列でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">ポイントの数を取得する必要がある空間ライン文字列値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'PointOnSurface' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>サーフェスの geometryValue 上にあることが保証される点か、または geometryValue がサーフェスでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">点を取得する必要があるジオメトリのサーフェス値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialBoundary' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>geometryValue の境界を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">SpatialBoundary 値を取得する必要があるジオメトリの値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialBuffer' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry および Edm.Double である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>spatialValue から distance 以下のすべてのポイントを表す geometry 値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">空間値を指定する式。</param>
      <param name="distance">バッファー間隔を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialContains' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue1 が空間的に geometryValue2 を含むかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue1">1 つ目のジオメトリ値を指定する式。</param>
      <param name="geometryValue2">geometryValue1 と比較する必要がある geometry 値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialConvexHull' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>geometryValue の凸包を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">IsRing 値を取得する必要があるジオメトリの凸包値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialCrosses' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue1 が geometryValue2 の交差と交わるかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue1">1 つ目のジオメトリ値を指定する式。</param>
      <param name="geometryValue2">geometryValue1 と比較する必要がある geometry 値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialDifference' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は spatialValue1 と spatialValue2 の型と同じです。</summary>
      <returns>spatialValue2 の spatialValue1 との差を表すジオメトリ値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">spatialValue1 との差を計算する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialDimension' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>spatialValue からの Dimension 値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">Dimension 値を取得する必要がある値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialDisjoint' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>spatialValue1 と spatialValue2 が空間的に離れているかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">結合解除のために spatialValue1 と比較する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定された引数で正規の 'SpatialElementAt' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。最初の引数には、Edm.Geography 結果型または Edm.Geometry 結果型が含まれる必要があります。2 番目の引数は、整数の数値結果型である必要があります。式の結果型は spatialValue の結果型と同じです。</summary>
      <returns>spatialValue 内の位置 indexValue にあるコレクション要素か、または spatialValue がコレクションでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">地理またはジオメトリのコレクション値を指定する式。</param>
      <param name="indexValue">地理またはジオメトリのコレクションから取得される要素の位置を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialElementCount' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Int32 です。</summary>
      <returns>spatialValue の要素の数か、または spatialValue がコレクションでない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">要素の数を取得する必要がある地理またはジオメトリのコレクション値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialEnvelope' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Geometry です。</summary>
      <returns>geometryValue の最小の境界ボックスを返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">Envelope 値を取得する必要がある値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialEquals' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>spatialValue1 と spatialValue2 が同一かどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">等価性のために spatialValue1 と比較する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialIntersection' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は spatialValue1 と spatialValue2 の型と同じです。</summary>
      <returns>spatialValue1 と spatialValue2 の交差部分を表す空間値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">spatialValue1 との交差を計算する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialIntersects' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>spatialValue1 と spatialValue2 が交差するかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">交差のために spatialValue1 と比較する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialLength' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>spatialValue の長さか、または spatialValue が曲線でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">長さを取得する必要がある空間のカーブ値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialOverlaps' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue1 が空間的に geometryValue2 と重複するかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue1">1 つ目のジオメトリ値を指定する式。</param>
      <param name="geometryValue2">geometryValue1 と比較する必要がある geometry 値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialRelate' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry および文字列である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue1 が intersectionPatternMatrix で指定された空間的なリレーションシップに従って geometryValue2 と空間的に関連しているかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue1">1 つ目のジオメトリ値を指定する式。</param>
      <param name="geometryValue2">geometryValue1 と比較する必要がある geometry 値を指定する式。</param>
      <param name="intersectionPatternMatrix">geometryValue1 と geometryValue2 を比較するために使用される Dimensionally Extended Nine-Intersection Model (DE-9IM) 交差パターンのテキスト表現を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialSymmetricDifference' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は spatialValue1 と spatialValue2 の型と同じです。</summary>
      <returns>spatialValue2 の spatialValue1 との対称差を表すジオメトリ値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">spatialValue1 との対称差を計算する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialTouches' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue1 が geometryValue2 と接触するかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue1">1 つ目のジオメトリ値を指定する式。</param>
      <param name="geometryValue2">geometryValue1 と比較する必要がある geometry 値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialTypeName' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。式の結果型は Edm.String です。</summary>
      <returns>spatialValue から文字列 Geometry Type 名を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">Geometry Type 名を取得する必要がある値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialUnion' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。spatialValue1 の結果型と spatialValue2 の結果型は一致している必要があります。式の結果型は spatialValue1 と spatialValue2 の型と同じです。</summary>
      <returns>spatialValue1 と spatialValue2 の和集合を表す空間値を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue1">1 つ目の空間値を指定する式。</param>
      <param name="spatialValue2">spatialValue1 との和集合を計算する必要がある空間値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'SpatialWithin' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Boolean です。</summary>
      <returns>geometryValue1 が空間的に geometryValue2 内にあるかどうかを示すブール値を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue1">1 つ目のジオメトリ値を指定する式。</param>
      <param name="geometryValue2">geometryValue1 と比較する必要がある geometry 値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'StartPoint' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geography または Edm.Geometry である必要があります。結果型は spatialValue の結果型と同じです。</summary>
      <returns>spatialValue の始点か、または spatialValue が曲線でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="spatialValue">開始点を取得する必要がある空間のカーブ値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'XCoordinate' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>geometryValue の X 座標の値か、または geometryValue が点でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">X 座標の値を取得する必要がある地理のポイント値を指定する式。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定した引数で正規の 'YCoordinate' 関数を呼び出す <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> を作成します。指定する引数の結果型は Edm.Geometry である必要があります。式の結果型は Edm.Double です。</summary>
      <returns>geometryValue の Y 座標の値か、または geometryValue が点でない場合は null を返す新しい DbFunctionExpression。</returns>
      <param name="geometryValue">Y 座標の値を取得する必要があるジオメトリのポイント値を指定する式。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>Public Entity SQL Parser クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>指定のパラメーターで指定のクエリを解析します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> を含む <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> およびインライン関数の定義を記述する情報 (存在する場合)。</returns>
      <param name="query">解析対象の EntitySQL クエリ。</param>
      <param name="parameters">オプションのクエリ パラメーター。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>特定の変数を設定して特定のクエリを解析し、<see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> を生成します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> を含む <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> およびインライン関数の定義を記述する情報 (存在する場合)。</returns>
      <param name="query">解析対象のクエリ。</param>
      <param name="variables">オプションのクエリ変数。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" /> の一部として返される Entity SQL クエリのインライン関数定義を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>eSQL クエリ テキストの関数定義の終了位置。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>関数の本体とパラメーター。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>関数名。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>eSQL クエリ テキストの関数定義の開始位置。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>Entity SQL パーサーの結果の情報。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>解析中に生成されるコマンド ツリー。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>クエリのインライン関数定義を表す <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" /> オブジェクトのリスト。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>概念レイヤーのコマンドを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>値を指定して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>指定したステートメントを使用して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statement">コマンドのテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>指定したステートメントと接続を使用して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statement">コマンドのテキスト。</param>
      <param name="connection">データ ソースへの接続。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>指定したステートメント、接続、およびトランザクションを使用して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="statement">コマンドのテキスト。</param>
      <param name="connection">データ ソースへの接続。</param>
      <param name="transaction">コマンドを実行するトランザクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>指定された eSQL ステートメントと使用する接続オブジェクトを含む EntityCommand オブジェクトを構築します。</summary>
      <param name="statement">実行する eSQL コマンド テキスト</param>
      <param name="connection">接続オブジェクト</param>
      <param name="resolver">DbProviderServices の解決に使用されるリゾルバー</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> の実行をキャンセルします。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>実行するコマンドまたはストアド プロシージャを指定する Entity SQL ステートメントを取得または設定します。</summary>
      <returns>実行するコマンドまたはストアド プロシージャを指定する Entity SQL ステートメント。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>タイムアウトするまでに待機する時間を取得または設定します。</summary>
      <returns>コマンドの実行を待機する時間 (秒単位)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>実行するコマンド ツリーを取得または設定します。コマンド ツリーまたはコマンド テキストのどちらか一方のみを設定でき、両方を設定することはできません。</summary>
      <returns>実行するコマンド ツリー。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> プロパティをどのように解釈するかを示す値を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 列挙値のいずれか。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> により使用される <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> を取得または設定します。</summary>
      <returns>エンティティ コマンドによって使用される接続。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>eSQL ステートメントのパラメーターを表す新しいパラメーター オブジェクトを作成し、返します。</summary>
      <returns>パラメーター オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクトの新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクトの新しいインスタンス。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>コマンドの実行に使用される接続オブジェクト</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>このコマンドのパラメーターのコレクション</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>このコマンドを実行するトランザクション</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>Windows フォーム デザイナー コントロールにコマンド オブジェクトを表示するかどうかを示す値を取得または設定します。</summary>
      <returns>コマンド オブジェクトを Windows フォーム デザイナー コントロールに表示する必要がある場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>クエリ プランのキャッシュが有効かどうかを示す値を取得または設定します。</summary>
      <returns>クエリ プランのキャッシュが有効の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>コマンドを実行し、結果を読み取るためのデータ リーダーを返します。</summary>
      <returns>DbDataReader オブジェクト</returns>
      <param name="behavior">コマンドを実行するときに使用する動作</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>コマンドを非同期に実行し、結果を読み取るためのデータ リーダーを返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、DbDataReader オブジェクトが示されます。</returns>
      <param name="behavior">コマンドを実行するときに使用する動作</param>
      <param name="cancellationToken">キャンセル要求を監視するためのトークン</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>現在のコマンドを実行します。</summary>
      <returns>影響を受けた行数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>コマンドを非同期に実行し、コマンドから返される結果を破棄します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、影響を受けた行の数が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>コマンドを実行し、データ リーダーを返します。</summary>
      <returns>結果を含む <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> をコマンド ツリーにコンパイルし、それを実行用のストア プロバイダーに解析した後、生成された結果から、指定された <see cref="T:System.Data.CommandBehavior" /> を使用して <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> を構築します。</summary>
      <returns>結果を含む <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />。</returns>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 値のいずれか。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>コマンドを非同期に実行し、結果を読み取るためのデータ リーダーを返します。CommandType.CommandText でのみ呼び出すことができます (それ以外の場合は、標準の Execute* メソッドを使用します)。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、EntityDataReader オブジェクトが示されます。</returns>
      <exception cref="T:System.InvalidOperationException">ストアド プロシージャ コマンドの場合に、エンティティ コレクションの結果以外を得るために呼び出されるとスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>コマンドを非同期に実行し、結果を読み取るためのデータ リーダーを返します。CommandType.CommandText でのみ呼び出すことができます (それ以外の場合は、標準の Execute* メソッドを使用します)。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、EntityDataReader オブジェクトが示されます。</returns>
      <param name="behavior">コマンドを実行するときに使用する動作</param>
      <exception cref="T:System.InvalidOperationException">ストアド プロシージャ コマンドの場合に、エンティティ コレクションの結果以外を得るために呼び出されるとスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>コマンドを非同期に実行し、結果を読み取るためのデータ リーダーを返します。CommandType.CommandText でのみ呼び出すことができます (それ以外の場合は、標準の Execute* メソッドを使用します)。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、EntityDataReader オブジェクトが示されます。</returns>
      <param name="behavior">コマンドを実行するときに使用する動作</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">ストアド プロシージャ コマンドの場合に、エンティティ コレクションの結果以外を得るために呼び出されるとスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>コマンドを非同期に実行し、結果を読み取るためのデータ リーダーを返します。CommandType.CommandText でのみ呼び出すことができます (それ以外の場合は、標準の Execute* メソッドを使用します)。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、EntityDataReader オブジェクトが示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">ストアド プロシージャ コマンドの場合に、エンティティ コレクションの結果以外を得るために呼び出されるとスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>コマンドを実行し、結果セット内の先頭行の最初の列を返します。以降の列または行は無視されます。</summary>
      <returns>結果セット内の先頭行の最初の列。または結果セットが空の場合は NULL 参照 (Visual Basic の場合は Nothing)。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>Entity SQL ステートメントまたはストアド プロシージャのパラメーターを取得します。</summary>
      <returns>Entity SQL ステートメントまたはストアド プロシージャのパラメーター。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>エンティティ レベルのコマンドをコンパイルし、コマンドの準備バージョンを作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>エンティティ レベルのコマンドをコンパイルし、格納コマンド テキストを返します。</summary>
      <returns>ストア コマンド テキスト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlCommand" /> を実行するトランザクションを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.SqlClient.SqlCommand" /> を実行するトランザクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>コマンドの結果が更新される行に適用される方法を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 値のいずれか。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>概念レイヤーの接続を表すクラス。エンティティ接続は (接続を開くことによって) 一度だけ初期化される場合があります。その後で、接続文字列の変更、新しいストア接続のアタッチ、ストア接続文字列の変更はできません。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> と <see cref="T:System.Data.Common.DbConnection" /> を使用して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="workspace">この <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> に関連付けられた <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</param>
      <param name="connection">この <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> オブジェクトの基になるデータ ソース接続。</param>
      <exception cref="T:System.ArgumentNullException">workspace または connection パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">概念モデルがワークスペースから見つかりません。または、マッピング ファイルがワークスペースから見つかりません。または、ストレージ モデルがワークスペースから見つかりません。または、接続が閉じた状態ではありません。</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">connection が ADO.NET Entity Framework 互換のプロバイダーからのものではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>メモリに読み込まれたメタデータから EntityConnection を構築します</summary>
      <param name="workspace">メタデータ情報を含むワークスペース。</param>
      <param name="connection">ストア接続。</param>
      <param name="entityConnectionOwnsStoreConnection">true に設定した場合、エンティティ接続が破棄されたときにストア接続も破棄されます。それ以外の場合は、呼び出し元がストア接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>接続文字列に基づいて、<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionString">プロバイダー固有の接続文字列。</param>
      <exception cref="T:System.ArgumentException">無効な接続文字列キーワードが指定されたか、必要な接続文字列キーワードが指定されていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>データベース トランザクションを開始します</summary>
      <returns>新しいトランザクションを表すオブジェクト</returns>
      <param name="isolationLevel">トランザクションの分離レベル</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>基になるプロバイダーを使用してトランザクションを開始します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />。返される <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> インスタンスを後で <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> と関連付けて、そのトランザクション内でコマンドを実行することができます。</returns>
      <exception cref="T:System.InvalidOperationException">基になるプロバイダーが不明です。または、<see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> に対する呼び出しが、既に現在のトランザクションが存在する <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> に対して行われました。または、<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>基になるプロバイダーを使用して、指定の分離レベルでトランザクションを開始します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />。返される <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> インスタンスを後で <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> と関連付けて、そのトランザクション内でコマンドを実行することができます。</returns>
      <param name="isolationLevel">トランザクションの分離レベル。</param>
      <exception cref="T:System.InvalidOperationException">基になるプロバイダーが不明です。または、<see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> に対する呼び出しが、既に現在のトランザクションが存在する <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> に対して行われました。または、<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>サポートされていません。</summary>
      <param name="databaseName">サポートされていません。</param>
      <exception cref="T:System.NotSupportedException">メソッドが呼び出された場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>データベースへの接続を閉じます。</summary>
      <exception cref="T:System.InvalidOperationException">接続を閉じるときにエラーが発生しました。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> 接続文字列を取得または設定します。</summary>
      <returns>データ ソースへの初期接続を確立するために必要な接続文字列。既定値は空の文字列です。閉じている接続では、現在の設定値が返されます。値が設定されていない場合は、空の文字列が返されます。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>接続を確立する際、試行を終了してエラーを生成するまでに待機する秒数を取得します。</summary>
      <returns>接続が開くのを待機する時間 (秒単位)。既定値は、基になるデータ プロバイダーの既定のタイムアウト値です。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" /> をこの <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> に設定して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> の新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> オブジェクト。</returns>
      <exception cref="T:System.InvalidOperationException">基になるデータ プロバイダーの名前が不明です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>この接続オブジェクトを使用する新しいコマンド オブジェクトを作成します</summary>
      <returns>コマンド オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.CurrentTransaction">
      <summary>この接続が登録されている現在のトランザクションを取得します。NULL である可能性があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>現在のデータベースの名前、または接続が開かれた後に使用されるデータベースの名前を取得します。</summary>
      <returns>基になるデータ プロバイダーの Database プロパティの値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>接続先のデータ ソースの名前またはネットワーク アドレスを取得します。</summary>
      <returns>データ ソースの名前。既定値は空の文字列です。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>EntityConnection に関連付けられたプロバイダー ファクトリを取得します</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>この接続オブジェクトをクリーンアップします</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true、アンマネージ リソースだけを解放する場合は false</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> を指定されたトランザクションに登録します。</summary>
      <param name="transaction">登録先のトランザクション オブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> の状態が <see cref="F:System.Data.ConnectionState.Open" /> ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> に関連付けられている <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> に関連付けられている <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">インライン接続文字列に無効な Metadata キーワード値が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>基になるデータ プロバイダーの Open メソッドを呼び出して、データ ソースへの接続を確立します。</summary>
      <exception cref="T:System.InvalidOperationException">接続が開いたときにエラーが発生したか、基になるデータ プロバイダーの名前が不明です。</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">インライン接続文字列に無効な Metadata キーワード値が含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>基になるデータ プロバイダーの Open メソッドを呼び出して、データ ストアへの接続を非同期に確立します</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>クライアントが接続されているデータ ソースのバージョンを含む文字列を取得します。</summary>
      <returns>プロバイダー接続文字列に含まれるデータ ソースのバージョン。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>EntityConnection の状態を取得します。これは、この EntityConnection でラップされている基になるデータベース接続の状態を追跡するためにセットアップされます。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> オブジェクトで使用される、基になるデータ ソース接続へのアクセスを提供します。</summary>
      <returns>データ ソース接続の <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>エンティティ クライアント プロバイダーの接続文字列ビルダーを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>提供された接続文字列を使用して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionString">基になるデータ ソースに対するプロバイダーに固有の接続文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> インスタンスの内容を消去します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>特定のキーが <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> に含まれるかどうかを調べます。</summary>
      <returns>指定されたキーを持つ要素が <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> に含まれている場合は true を返し、それ以外の場合は false を返します。</returns>
      <param name="keyword">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 内で検索するキー。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> によってキーワード/値ペアの固定サイズのコレクションが提供されるので、常に true が返されます。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>指定されたキーに関連付けられている値を取得または設定します。C# の場合、このプロパティはインデクサーです。</summary>
      <returns>指定したキーに関連付けられている値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 内のキーを格納している <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>接続文字列内のメタデータの位置を取得または設定します。</summary>
      <returns>接続文字列内のメタデータの位置を取得または設定します。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>構成ファイルに定義されるセクションの名前を取得または設定します。</summary>
      <returns>構成ファイル内のセクションの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>接続文字列内の基になる .NET Framework データ プロバイダーの名前を取得または設定します。</summary>
      <returns>基になる .NET Framework データ プロバイダーの不変名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>内部のプロバイダー固有の接続文字列を取得または設定します。</summary>
      <returns>内部のプロバイダー固有の接続文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>指定されたキーを持つエントリを <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> インスタンスから削除します。</summary>
      <returns>キーが接続文字列内に存在していて削除された場合は true を返します。キーが存在しなかった場合は false を返します。</returns>
      <param name="keyword">この <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> 内の接続文字列から削除するキーワード/値ペアのキー。</param>
      <exception cref="T:System.ArgumentNullException">keyword が null (Visual Basic の場合は Nothing) です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>提供されたキーに対応する値をこの <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> から取得します。</summary>
      <returns>keyword が接続文字列内に検出された場合は true を返し、それ以外の場合は false を返します。</returns>
      <param name="keyword">取得する項目のキー。</param>
      <param name="value">keyword に対応する値。</param>
      <exception cref="T:System.ArgumentNullException">keyword に NULL 値 (Visual Basic の場合は Nothing) が格納されています。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>エンティティ クライアント プロバイダーのデータ リーダー クラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> オブジェクトを閉じます。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>この <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" /> の <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> を取得します。</summary>
      <returns>データ レコードの情報。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>現在の行の入れ子の深さを示す値を取得します。</summary>
      <returns>現在の行の入れ子の深さ。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> によって使用されるリソースを解放し、<see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" /> を呼び出します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true、アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>現在の行の列の数を取得します。</summary>
      <returns>現在の行の列の数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>指定された列の値を Boolean として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>指定された列の値をバイトとして取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>指定された列の dataIndex によって示される場所から始まるバイトのストリームを、bufferIndex によって示される場所から始まるバッファーに読み取ります。</summary>
      <returns>実際に読み取られたバイト数を返します。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
      <param name="dataOffset">読み取り操作を開始する位置を示す行内のインデックス。</param>
      <param name="buffer">データのコピー先のバッファー。</param>
      <param name="bufferOffset">データのコピー先のバッファーのインデックス。</param>
      <param name="length">読み取り対象の最大文字数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>指定された列の値を単一の文字として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>指定された列の dataIndex によって示される場所から始まる文字のストリームを、bufferIndex によって示される場所から始まるバッファーに読み取ります。</summary>
      <returns>実際に読み込まれた文字数を返します。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
      <param name="dataOffset">読み取り操作を開始する位置を示す行内のインデックス。</param>
      <param name="buffer">データのコピー先のバッファー。</param>
      <param name="bufferOffset">データのコピー先のバッファーのインデックス。</param>
      <param name="length">読み取り対象の最大文字数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>入れ子になったリーダーを <see cref="T:System.Data.Common.DbDataReader" /> オブジェクトとして返します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> オブジェクトとしての入れ子になったリーダー。</returns>
      <param name="i">列の序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>入れ子になった <see cref="T:System.Data.Common.DbDataRecord" /> を返します。</summary>
      <returns>入れ子にされたデータ レコード。</returns>
      <param name="i">返す DbDataRecord の数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>指定された列のデータ型の名前を取得します。</summary>
      <returns>データ型の名前。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.DateTime" /> オブジェクトとして取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>プロバイダー固有の実装でオーバーライドできる、要求された列序数に対応した <see cref="T:System.Data.Common.DbDataReader" /> オブジェクトを返します。</summary>
      <returns>データ リーダー。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.Decimal" /> オブジェクトとして取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>指定された列の値を倍精度浮動小数点値として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>データ リーダー内の行に対して反復処理を行うために使用できる <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>データ リーダー内の行に対して反復処理を行うために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>指定された列のデータ型を取得します。</summary>
      <returns>指定された列のデータ型。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>指定された列の値を単精度浮動小数点値として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>指定された列の値をグローバル一意識別子 (GUID) として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>指定された列の値を 16 ビット符号付き整数として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>指定された列の値を 32 ビット符号付き整数として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>指定された列の値を 64 ビット符号付き整数として取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>0 から始まる列序数で指定された列の値を取得します。</summary>
      <returns>指定された列の名前。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>名前で指定された列の列序数を取得します。</summary>
      <returns>インデックス番号が 0 から始まる列序数。</returns>
      <param name="name">列の名前。</param>
      <exception cref="T:System.IndexOutOfRangeException">指定された名前は、有効な列名ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>指定された列の、プロバイダー固有のフィールド型を返します。</summary>
      <returns>指定された列のデータ型を記述する <see cref="T:System.Type" /> オブジェクト。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>現在の行のコレクション内にあるプロバイダー固有の属性列をすべて取得します。</summary>
      <returns>配列に含まれる <see cref="T:System.Object" /> のインスタンスの数。</returns>
      <param name="values">属性列のコピー先の <see cref="T:System.Object" /> の配列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> の列メタデータを記述する <see cref="T:System.Data.DataTable" /> を返します。</summary>
      <returns>列メタデータを記述する <see cref="T:System.Data.DataTable" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.String" /> のインスタンスとして取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <returns>指定された列の値。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>オブジェクトの配列に現在行の列値を設定します。</summary>
      <returns>配列に含まれる <see cref="T:System.Object" /> のインスタンスの数。</returns>
      <param name="values">属性列のコピー先の <see cref="T:System.Object" /> の配列。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> に 1 つ以上の行が含まれているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> に 1 つ以上の行が含まれている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> が閉じているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> が閉じている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>存在しない値や欠落値が列に含まれているかどうかを示す値を取得します。</summary>
      <returns>指定した列の値が <see cref="T:System.DBNull" /> に等しい場合は true。それ以外の場合は false。</returns>
      <param name="ordinal">インデックス番号が 0 から始まる列序数。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <returns>指定された列の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>指定された列の値を <see cref="T:System.Object" /> のインスタンスとして取得します。</summary>
      <returns>指定された列の値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>バッチ ステートメントの結果を読み取っているときに、次の結果にリーダーを進めます。</summary>
      <returns>次の結果セットが存在する場合は true、それ以外の場合は false</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>バッチ ステートメントを読み取っているときに、次の結果セットにリーダーを非同期に移動します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、次の結果セットが存在する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>結果セット内の次のレコードにリーダーを進めます。</summary>
      <returns>次の行が存在する場合は true、それ以外の場合は false</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>現在の結果セットの次の行にリーダーを非同期に移動します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、次の行が存在する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>SQL ステートメントの実行によって変更、挿入、または削除された行の数を取得します。</summary>
      <returns>変更、挿入、または削除された行の数。SELECT ステートメントの場合は -1 を返します。影響を受けた行がない場合やステートメントが失敗した場合は 0 を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> 内の表示フィールドの数を取得します。</summary>
      <returns>表示フィールドの数。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>EntityCommand で使用されるパラメーターを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>既定値を使用して <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>指定したパラメーター名とデータ型を指定して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 値のいずれか。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>指定したパラメーター名、データ型、およびサイズを指定して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 値のいずれか。</param>
      <param name="size">パラメーターのサイズ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>指定したプロパティを使用して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 値のいずれか。</param>
      <param name="size">パラメーターのサイズ。</param>
      <param name="direction">
        <see cref="T:System.Data.ParameterDirection" /> 値のいずれか。</param>
      <param name="isNullable">パラメーターが NULL 値を受け取る場合は true、それ以外の場合は false。</param>
      <param name="precision">値を表すために使う桁数。</param>
      <param name="scale">value が解決される、小数点以下の桁数。</param>
      <param name="sourceColumn">ソース列の名前。</param>
      <param name="sourceVersion">
        <see cref="T:System.Data.DataRowVersion" /> 値のいずれか。</param>
      <param name="value">パラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>指定したプロパティを使用して、<see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 値のいずれか。</param>
      <param name="size">パラメーターのサイズ。</param>
      <param name="sourceColumn">ソース列の名前。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>パラメーターの <see cref="T:System.Data.DbType" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DbType" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>パラメーターの方向を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>EdmType として表現されたパラメーターの型を取得または設定します。</summary>
      <returns>EdmType として表現されたパラメーターの型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>パラメーターが NULL 値を受け取るかどうかを示す値を取得または設定します。</summary>
      <returns>NULL 値を受け取る場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>エンティティ パラメーターの名前を取得または設定します。</summary>
      <returns>エンティティ パラメーターの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> プロパティを表すために使用する桁数を取得または設定します。</summary>
      <returns>値を表すために使う桁数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> に関連付けられている型をリセットします。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>
        <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> が解決される、小数点以下の桁数を取得または設定します。</summary>
      <returns>value が解決される、小数点以下の桁数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>列内のデータの最大サイズを取得または設定します。</summary>
      <returns>列内のデータの最大サイズ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>
        <see cref="T:System.Data.DataSet" /> にマップされ、<see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" /> の読み込みまたは戻しに使用されるソース列の名前を取得または設定します。</summary>
      <returns>データセットにマップされ、値を読み込むときまたは返すときに使用されるソース列の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>ソース列が Null 許容かどうかを示す値を取得または設定します。</summary>
      <returns>ソース列が Null 許容の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>値の読み込み時に使用する <see cref="T:System.Data.DataRowVersion" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 値のいずれか。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>パラメーターの文字列表現を返します。</summary>
      <returns>パラメーターの文字列表現。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>パラメーターの値を取得または設定します。</summary>
      <returns>パラメーターの値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>EntityCommand で使用されるパラメーター コレクションを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクトを <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に追加します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクト。</returns>
      <param name="value">コレクションに追加する <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</param>
      <exception cref="T:System.ArgumentException">value パラメーターに指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> は、既にこの (または別の) <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に追加されています。</exception>
      <exception cref="T:System.InvalidCastException">渡されたパラメーターが <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException">value パラメーターが NULL です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>指定されたオブジェクトを <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に追加します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクトのインデックス。</returns>
      <param name="value">
        <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>指定されたパラメーター名とデータ型を持つ <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> を <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に追加します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクト。</returns>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 値のいずれか。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>指定されたパラメーター名、データ型、および列長を持つ <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> を <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に追加します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクト。</returns>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="dbType">
        <see cref="T:System.Data.DbType" /> 値のいずれか。</param>
      <param name="size">列の長さ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>値の配列を <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> の末尾に追加します。</summary>
      <param name="values">追加する <see cref="T:System.Array" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 値の配列を <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> の末尾に追加します。</summary>
      <param name="values">追加する <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>値を <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> の末尾に追加します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクト。</returns>
      <param name="parameterName">パラメーターの名前。</param>
      <param name="value">追加する値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> からすべての <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>指定された <see cref="T:System.Object" /> がこの <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に含まれているかどうかを調べます。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> にこの値が含まれている場合は true、それ以外の場合は false。</returns>
      <param name="value">
        <see cref="T:System.Object" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> がこの <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に含まれているかどうかを調べます。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> にこの値が含まれている場合は true、それ以外の場合は false。</returns>
      <param name="parameterName">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>指定された 1 次元 <see cref="T:System.Array" /> に現在の <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> のすべての要素をコピーします。その際、指定されたコピー先の <see cref="T:System.Array" /> インデックス位置からコピーを開始します。</summary>
      <param name="array">現在の <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index">
        <see cref="T:System.Array" /> 内でコピーを開始する位置のインデックスを表す 32 ビット整数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に現在の <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> のすべての要素をコピーします。その際、指定されたコピー先のインデックス位置からコピーを開始します。</summary>
      <param name="array">現在の <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> からコピーされる要素のコピー先となる <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />。</param>
      <param name="index">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 内でコピーを開始する位置のインデックスを表す 32 ビット整数。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に含まれる要素の数を表す整数を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に含まれる要素の数を表す整数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> を反復処理する列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> の <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>コレクション内の指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> の場所を取得します。</summary>
      <returns>コレクション内の <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> である、指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> の 0 から始まる場所。オブジェクトが <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に存在しない場合、-1 を返します。</returns>
      <param name="value">検索対象の <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>コレクション内の指定された <see cref="T:System.Object" /> の場所を取得します。</summary>
      <returns>コレクション内の <see cref="T:System.Object" /> である、指定された <see cref="T:System.Object" /> の 0 から始まる場所。オブジェクトが <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に存在しない場合、-1 を返します。</returns>
      <param name="value">検索対象の <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>指定された名前を持つ指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> の場所を取得します。</summary>
      <returns>指定された (大文字と小文字の区別がある) 名前を持つ指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> の 0 から始まる場所。オブジェクトが <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に存在しない場合、-1 を返します。</returns>
      <param name="parameterName">検索する <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> の名前。大文字と小文字が区別されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクトを <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 内の指定されたインデックス位置に挿入します。</summary>
      <param name="index">値を挿入する位置を示す、0 から始まるインデックス。</param>
      <param name="value">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に挿入される <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> 内の指定したインデックス位置に <see cref="T:System.Object" /> を挿入します。</summary>
      <param name="index">値を挿入する位置を示す、0 から始まるインデックス。</param>
      <param name="value">
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> に挿入される <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> が固定サイズである場合は true を返し、それ以外の場合は false を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> が読み取り専用である場合は true を、それ以外の場合は false を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> が同期されているかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> が同期されている場合は true を返し、それ以外の場合は false を返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>指定されたインデックス位置にある <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> を取得します。</summary>
      <returns>指定したインデックスにある <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>指定された名前を持つ <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> を取得します。</summary>
      <returns>指定された名前の <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> をコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクト。</param>
      <exception cref="T:System.InvalidCastException">パラメーターが <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> ではありません。</exception>
      <exception cref="T:System.SystemException">パラメーターがコレクションに存在しません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>指定されたパラメーターをコレクションから削除します。</summary>
      <param name="value">コレクションから削除する <see cref="T:System.Object" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>指定されたインデックス位置にある <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> を <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> から削除します。</summary>
      <param name="index">削除する <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> オブジェクトの 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>指定されたパラメーター名を持つ <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> を <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> から削除します。</summary>
      <param name="parameterName">削除する <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> の名前。</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>エンティティ クライアント プロバイダーのプロバイダー ファクトリを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>
        <see cref="T:System.NotSupportedException" /> をスローします。このメソッドは現在サポートされていません。</summary>
      <returns>このメソッドは現在サポートされていません。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>
        <see cref="T:System.NotSupportedException" /> をスローします。このメソッドは現在サポートされていません。</summary>
      <returns>このメソッドは現在サポートされていません。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> クラスを実装するプロバイダーのクラスの新しいインスタンスを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>
        <see cref="T:System.NotSupportedException" /> をスローします。このメソッドは現在サポートされていません。</summary>
      <returns>このメソッドは現在サポートされていません。</returns>
      <param name="state">このメソッドは現在サポートされていません。</param>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>エンティティ クライアント プロバイダーのファクトリ オブジェクトのシングルトン オブジェクト。DbProviderFactory にはフィールドが必要であるため、パブリック フィールド (プロパティではない) のままです。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>要求された <see cref="T:System.IServiceProvider" /> クラスを返します。</summary>
      <returns>
        <see cref="T:System.IServiceProvider" /> の新しいインスタンス。サポートされる型は、<see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />、<see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" />、および <see cref="T:System.Data.IEntityAdapter" /> です。他のすべての型に対して null (Visual Basic の場合は Nothing) を返します。</returns>
      <param name="serviceType">取得する <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>概念レイヤーのトランザクションを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>基になるトランザクションをコミットします。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> の <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> を取得します。</summary>
      <returns>基になるデータ ソースへの <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>このトランザクション オブジェクトを所有する接続オブジェクト</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>このトランザクション オブジェクトをクリーンアップします</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true、アンマネージ リソースだけを解放する場合は false</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>この <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" /> の分離レベルを取得します。</summary>
      <returns>基になるトランザクションの分離レベルを表す <see cref="T:System.Data.IsolationLevel" /> 列挙値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>基になるトランザクションをロールバックします。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.StoreTransaction">
      <summary>基になるプロバイダーとのトランザクションの DbTransaction を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
      <summary>CS 空間の AssociationSet のマッピング メタデータを表します</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>新しい AssociationSetMapping インスタンスを初期化します。</summary>
      <param name="associationSet">マップされるアソシエーション セット。</param>
      <param name="storeEntitySet">マップされる格納エンティティ セット。</param>
      <param name="containerMapping">親コンテナー マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を追加します。</summary>
      <param name="condition">追加する条件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
      <summary>マップされるアソシエーション セットを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
      <summary>含まれるアソシエーション型マッピングを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
      <summary>プロパティ マッピングの条件を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
      <summary>対応する関数マッピングを取得または設定します。null を使用できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を削除します。</summary>
      <param name="condition">削除するプロパティ マッピングの条件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
      <summary>ソース エンド プロパティ マッピングを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
      <summary>マップされる格納エンティティ セットを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
      <summary>ターゲット End プロパティ マッピングを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
      <summary>アソシエーション セットの修正関数マッピングについて説明します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>新しい <see cref="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping" /> インスタンスを初期化します。</summary>
      <param name="associationSet">アソシエーション セット。</param>
      <param name="deleteFunctionMapping">削除関数マッピング。</param>
      <param name="insertFunctionMapping">挿入関数マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
      <summary>アソシエーション セットを取得します。</summary>
      <returns>アソシエーション セット。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
      <summary>削除関数マッピングを取得します。</summary>
      <returns>削除関数マッピング。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
      <summary>挿入関数マッピングを取得します。</summary>
      <returns>挿入関数マッピング。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString">
      <summary>このインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>このインスタンスの値の文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
      <summary>CS 空間のアソシエーション型マップのマッピング メタデータを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>AssociationTypeMapping インスタンスを作成します。</summary>
      <param name="associationSetMapping">この AssociationTypeMapping を含む AssociationSetMapping。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
      <summary>この AssociationTypeMapping を含む AssociationSetMapping を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
      <summary>マップされるアソシエーション型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
      <summary>1 つのマッピング フラグメントを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
      <summary>複合プロパティのマッピング メタデータ。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>新しい複合プロパティ マッピング オブジェクトを構築します</summary>
      <param name="property">この複合型のメンバーを表す MemberMetadata オブジェクト</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>入れ子になった複合型に対応する型マッピングを追加します。</summary>
      <param name="typeMapping">追加される複合型マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>入れ子になった複合型に対応する型マッピングを削除します。</summary>
      <param name="typeMapping">削除される複合型マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
      <summary>入れ子になった複合型に対応する型マッピングの読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
      <summary>複合型のマッピング メタデータ。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>ComplexTypeMapping インスタンスを作成します。</summary>
      <param name="complexType">マップされる ComplexType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を追加します。</summary>
      <param name="condition">追加されるプロパティ マッピングの条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>プロパティ マッピングを追加します。</summary>
      <param name="propertyMapping">追加されるプロパティ マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
      <summary>マップされる ComplexType を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
      <summary>プロパティ マッピングの条件の読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
      <summary>プロパティ マッピングの読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を削除します。</summary>
      <param name="condition">削除されるプロパティ マッピングの条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>プロパティ マッピングを削除します。</summary>
      <param name="propertyMapping">削除されるプロパティ マッピング。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
      <summary>型の条件付きプロパティ マッピングのマッピング メタデータ。条件プロパティ マッピングは、C 側プロパティまたは S 側プロパティで条件を指定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
      <summary>マップされた列を指定する EdmProperty を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
      <summary>マップされたプロパティを指定する EdmProperty を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
      <summary>アソシエーションの End プロパティのマッピング メタデータ。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
      <summary>アソシエーション End プロパティ マッピングを作成します。</summary>
      <param name="associationEnd">マップされるアソシエーション End を指定する AssociationEndMember。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>子プロパティ列マッピングを追加します。</summary>
      <param name="propertyMapping">追加されるプロパティ列マッピングを指定する ScalarPropertyMapping。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
      <summary>マップされるアソシエーション End を指定する AssociationEndMember を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
      <summary>このアソシエーション End プロパティ マッピングの子を指定する ScalarPropertyMapping の ReadOnlyCollection を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>子プロパティ列マッピングを削除します。</summary>
      <param name="propertyMapping">削除されるプロパティ列マッピングを指定する ScalarPropertyMapping。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
      <summary>CS 空間の EntityContainer マップのマッピング メタデータを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityContainerMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="conceptualEntityContainer">マップされる概念エンティティ コンテナー。</param>
      <param name="storeEntityContainer">マップされる格納エンティティ コンテナー。</param>
      <param name="mappingItemCollection">親マッピング項目コレクション。</param>
      <param name="generateUpdateViews">更新ビューを生成するかどうかを示すフラグ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>関数インポート マッピングを追加します。</summary>
      <param name="functionImportMapping">追加する関数インポート マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>アソシエーション セット マッピングを追加します。</summary>
      <param name="setMapping">追加するアソシエーション セット マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>エンティティ セット マッピングを追加します。</summary>
      <param name="setMapping">追加するエンティティ セット マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
      <summary>アソシエーション セット マッピングを取得します。</summary>
      <returns>アソシエーション セット マッピング。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
      <summary>この項目の型種別を取得します。</summary>
      <returns>この項目の型種別。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
      <summary>概念エンティティ コンテナーを取得します。</summary>
      <returns>概念エンティティ コンテナー。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
      <summary>エンティティ セット マッピングを取得します。</summary>
      <returns>エンティティ セット マッピング。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
      <summary>関数インポート マッピングを取得します。</summary>
      <returns>関数インポート マッピング。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
      <summary>更新ビューを生成するかどうかを示すフラグを取得します。</summary>
      <returns>更新ビューを生成する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
      <summary>親マッピング項目コレクションを取得します。</summary>
      <returns>親マッピング項目コレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>関数インポート マッピングを削除します。</summary>
      <param name="functionImportMapping">削除する関数インポート マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>アソシエーション セット マッピングを削除します。</summary>
      <param name="setMapping">削除するアソシエーション セット マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>アソシエーション セット マッピングを削除します。</summary>
      <param name="setMapping">削除するアソシエーション セット マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
      <summary>格納エンティティ コンテナーを取得します。</summary>
      <returns>格納エンティティ コンテナー。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
      <summary>CS 空間のエクステントのマッピング メタデータを表します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
      <summary>親コンテナー マッピングを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
      <summary>このマッピングに関連付けられているクエリ ビューを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
      <summary>CS 空間の EnitytSet のマッピング メタデータを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>新しい EntitySetMapping インスタンスを初期化します。</summary>
      <param name="entitySet">マップされるエンティティ セット。</param>
      <param name="containerMapping">親コンテナー マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>関数マッピングを追加します。</summary>
      <param name="modificationFunctionMapping">追加する関数マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>型マッピングを追加します。</summary>
      <param name="typeMapping">追加する型マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
      <summary>マップされるエンティティ セットを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
      <summary>含まれているエンティティ型マッピングを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
      <summary>対応する関数マッピングを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>関数マッピングを削除します。</summary>
      <param name="modificationFunctionMapping">削除する関数マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>型マッピングを削除します。</summary>
      <param name="typeMapping">削除する型マッピング。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
      <summary>エンティティ型のマッピング メタデータ。EntitySet が複数の型のエンティティを表す場合、EntitySet の EntityTypeMapping は複数あります (例: PersonSet エンティティ エクステントが Person 型と Customer 型を表す場合、PersonSet のマッピングの下に 2 つの EntityTypeMapping があります)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>EntityTypeMapping インスタンスを作成します。</summary>
      <param name="entitySetMapping">この EntityTypeMapping を含む EntitySetMapping。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>マッピング フラグメントを追加します。</summary>
      <param name="fragment">追加されるマッピング フラグメント。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>エンティティ型階層をマッピングに追加します。階層は指定したルート エンティティ型で表されます。</summary>
      <param name="type">追加される階層のルート EntityType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>エンティティ型をマッピングに追加します。</summary>
      <param name="type">追加される EntityType。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
      <summary>この EntityTypeMapping を含む EntitySetMapping を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
      <summary>マップされる 1 つの EntityType を取得します。階層型マッピングの場合は例外をスローします。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
      <summary>マップされたエンティティ型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
      <summary>マッピング フラグメントの読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
      <summary>これが型階層マッピングであるかどうかを示すフラグを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
      <summary>階層マッピングのマップされた基本データ型を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>マッピング フラグメントを削除します。</summary>
      <param name="fragment">削除されるマッピング フラグメント。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>エンティティ型階層をマッピングから削除します。階層は指定したルート エンティティ型で表されます。</summary>
      <param name="type">削除される階層のルート EntityType。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>エンティティ型をマッピングから削除します。</summary>
      <param name="type">削除される EntityType。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
      <summary>エンティティ セット内のエンティティ型の変更関数マッピングを示します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="entityType">EDM エンティティ型。</param>
      <param name="deleteFunctionMapping">削除に使用する関数のマッピング。</param>
      <param name="insertFunctionMapping">挿入に使用する関数のマッピング。</param>
      <param name="updateFunctionMapping">更新に使用する関数のマッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
      <summary>削除に使用する関数のマッピングを取得します。</summary>
      <returns>削除に使用する関数のマッピング。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
      <summary>EDM エンティティ型を取得します。</summary>
      <returns>EDM エンティティ型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
      <summary>挿入に使用する関数のマッピングを取得します。</summary>
      <returns>挿入に使用する関数のマッピング。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> オブジェクトの文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
      <summary>更新に使用する関数のマッピングを取得します。</summary>
      <returns>更新に使用する関数のマッピング。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>生成されたビューを格納するためにデザイン時に作成される型の基本クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> の名前を取得または設定します。</summary>
      <returns>コンテナー名。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>ビューとそのキーが格納されている指定されたインデックス位置のキーと値のペアを返します。</summary>
      <returns>ビューとそのキーが格納されているインデックス位置のキーと値のペア。</returns>
      <param name="index">ビューのインデックス。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>ビューのハッシュ値。</summary>
      <returns>ハッシュ値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>ハッシュ値。</summary>
      <returns>ハッシュ値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>ストレージ スキーマの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> を取得または設定します。</summary>
      <returns>コンテナー名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>ビューの数を取得または設定します。</summary>
      <returns>ビュー数。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>生成されたビューの種類を含むアセンブリをマークするための属性。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="viewGenerationType">ビューの種類。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>ビューの T:System.Type を取得します。</summary>
      <returns>ビューの T:System.Type。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
      <summary>関数インポートの結果の複合型マッピングを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
      <summary>新しい FunctionImportComplexTypeMapping インスタンスを初期化します</summary>
      <param name="returnType">戻り値の型。</param>
      <param name="properties">関数インポートの結果型のプロパティ マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
      <summary>戻り値の型を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
      <summary>関数インポート エンティティ型マッピングを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
      <summary>新しい FunctionImportEntityTypeMapping インスタンスを初期化します。</summary>
      <param name="isOfTypeEntityTypes">マップされる型階層のベースのエンティティ型。</param>
      <param name="entityTypes">マップされるエンティティ型。</param>
      <param name="properties">関数インポートの結果型のプロパティ マッピング。</param>
      <param name="conditions">マッピング条件。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
      <summary>マッピング条件を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
      <summary>マップされるエンティティ型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
      <summary>マップされる階層のベースのエンティティ型を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
      <summary>関数インポートの結果のマッピング条件を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
      <summary>条件を評価するために使用する列の名前を取得します。</summary>
      <returns>条件を評価するために使用する列の名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString">
      <summary>現在のインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
      <summary>NULL または NOT NULL であることを確認して評価される、関数インポートの結果のマッピング条件を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
      <summary>新しい FunctionImportEntityTypeMappingConditionIsNull インスタンスを初期化します。</summary>
      <param name="columnName">条件を評価するために使用する列の名前。</param>
      <param name="isNull">NULL または NOT NULL チェックを実行するかどうかを示すフラグ。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
      <summary>NULL または NOT NULL チェックを実行するかどうかを示すフラグを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
      <summary>指定された値との比較によって評価される、関数インポートの結果のマッピング条件を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
      <summary>新しい FunctionImportEntityTypeMappingConditionValue インスタンスを初期化します。</summary>
      <param name="columnName">条件を評価するために使用する列の名前。</param>
      <param name="value">比較対象の値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
      <summary>比較に使用する値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
      <summary>モデルの関数インポートからストアのコンポーザブルな関数またはコンポーザブルでない関数へのマッピングを表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
      <summary>モデル関数 (またはマッピングのソース) を取得します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
      <summary>ストア関数 (またはマッピングのターゲット) を取得します</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
      <summary>モデルの関数インポートからストアのコンポーザブルな関数へのマッピングを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>新しい FunctionImportMappingComposable インスタンスを初期化します。</summary>
      <param name="functionImport">モデル関数インポート。</param>
      <param name="targetFunction">コンポーザブルな格納関数。</param>
      <param name="resultMapping">関数インポートの結果マッピング。</param>
      <param name="containerMapping">親コンテナー マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
      <summary>関数インポートの結果マッピングを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
      <summary>モデル関数インポートからコンポーザブルでない格納関数へのマッピングを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>新しい FunctionImportMappingNonComposable インスタンスを初期化します。</summary>
      <param name="functionImport">モデル関数インポート。</param>
      <param name="targetFunction">コンポーザブルでない格納関数。</param>
      <param name="resultMappings">関数インポートの結果マッピング。</param>
      <param name="containerMapping">親コンテナー マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
      <summary>関数インポートの結果マッピングを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
      <summary>関数インポートの結果マッピングを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>型マッピングを追加します。</summary>
      <param name="typeMapping">追加する型マッピング。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>型マッピングを削除します。</summary>
      <param name="typeMapping">削除する型マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
      <summary>型マッピングを取得します。</summary>
      <returns>型マッピング。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
      <summary>関数インポートの戻り値の型のプロパティをマッピングするための基本クラスです。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
      <summary>関数インポートの戻り値の型のプロパティをテーブル列にマップします。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
      <summary>新しい FunctionImportReturnTypeScalarPropertyMapping インスタンスを初期化します。</summary>
      <param name="propertyName">マップされたプロパティ名。</param>
      <param name="columnName">マップされた列名。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
      <summary>マップされた列名を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
      <summary>マップされたプロパティ名を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
      <summary>関数インポート構造型マッピングを指定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
      <summary>関数インポートの結果型のプロパティ マッピングを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
      <summary>プロパティ/列の値が NULL または NOT NULL であるかどうかを確認して評価されるマッピング条件を指定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
      <summary>IsNullConditionMapping インスタンスを作成します。</summary>
      <param name="propertyOrColumn">プロパティまたは列を指定する EdmProperty。</param>
      <param name="isNull">NULL または NOT NULL チェックを実行するかどうかを示すブール値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
      <summary>条件が NULL チェックまたは NOT NULL チェックを実行することによって評価されるかどうかを指定するブール値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
      <summary>すべてのマッピング メタデータの基本項目クラスを表します</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
      <summary>マッピング フラグメントのメタデータを表します。一連のマッピング フラグメントは、セット マッピング (EntitySet、AssociationSet、または CompositionSet) を構成します。各 MappingFragment は、単一のテーブルにマップされる型のプロパティにマッピングを提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
      <summary>MappingFragment インスタンスを作成します。</summary>
      <param name="storeEntitySet">マップされたビューのテーブルに対応する EntitySet。</param>
      <param name="typeMapping">この MappingFragment を含む TypeMapping。</param>
      <param name="makeColumnsDistinct">クエリを生成する場合に 'DISTINCT' を含めるかどうかを示すフラグ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を追加します。</summary>
      <param name="condition">追加されるプロパティ マッピングの条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>プロパティ マッピングを追加します。</summary>
      <param name="propertyMapping">追加されるプロパティ マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
      <summary>プロパティ マッピングの条件の読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
      <summary>クエリを生成する場合に 'DISTINCT' を含めるかどうかを示すフラグを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
      <summary>プロパティ マッピングの読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を削除します。</summary>
      <param name="condition">削除されるプロパティ マッピングの条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>プロパティ マッピングを削除します。</summary>
      <param name="propertyMapping">削除されるプロパティ マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
      <summary>マップされたテーブルまたはビューに対応する EntitySet を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
      <summary>この MappingFragment を含む TypeMapping を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
      <summary>マッピング領域 (DataSpace.CSSpace) の項目の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingItem.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.MappingItem" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>Edm 空間のマッピング項目のコレクションを表すクラス。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
      <summary>エンティティまたはアソシエーションの変更処理の修正関数バインドについて説明します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="entitySet">エンティティまたはアソシエーション セット。</param>
      <param name="entityType">エンティティまたはアソシエーション型。</param>
      <param name="function">バインドする必要がある関数のメタデータ。</param>
      <param name="parameterBindings">関数パラメーターのバインド。</param>
      <param name="rowsAffectedParameter">影響を受ける行の数を生成する出力パラメーター。</param>
      <param name="resultBindings">関数評価の結果のバインド。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
      <summary>バインドする必要がある関数のメタデータを取得します。</summary>
      <returns>バインドする必要がある関数のメタデータ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
      <summary>関数パラメーターのバインドを取得します。</summary>
      <returns>関数パラメーターのバインド。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
      <summary>関数評価の結果のバインドを取得します。</summary>
      <returns>関数評価の結果のバインド。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
      <summary>影響を受ける行の数を生成する出力パラメーターを取得します。NULL である可能性があります。</summary>
      <returns>影響を受ける行の数を生成する出力パラメーター。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString">
      <summary>このインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
      <summary>エンティティまたはアソシエーション型構造内のメンバーの場所について説明します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="members">リーフ (バインドされているメンバー) から構造体のルートへのパスのメンバー。</param>
      <param name="associationSet">このメンバーによるナビゲーション先のアソシエーション セット。値が NULL の場合、これはナビゲーション メンバー パスではありません。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
      <summary>このメンバーによるナビゲーション先のアソシエーション セットを取得します。値が NULL の場合、これはナビゲーション メンバー パスではありません。</summary>
      <returns>このメンバーによるナビゲーション先のアソシエーション セット。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
      <summary>リーフ (バインドされているメンバー) から構造体のルートへのパスのメンバーを取得します。</summary>
      <returns>リーフ (バインドされているメンバー) から構造体のルートへのパスのメンバー。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString">
      <summary>このインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>このインスタンスの値の文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
      <summary>修正対象となるエンティティまたはアソシエーションのメンバーへの修正関数パラメーターのバインドを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameter">値を取得するパラメーター。</param>
      <param name="memberPath">値を定義するエンティティまたはアソシエーション メンバーへのパス。</param>
      <param name="isCurrent">現在または元のメンバーの値をバインドする場合は true、それ以外の場合は false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
      <summary>現在または元のメンバーの値がバインドされているかどうかを示すフラグを取得します。</summary>
      <returns>現在または元のメンバーの値がバインドされている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
      <summary>値を定義するエンティティまたはアソシエーション メンバーへのパスを取得します。</summary>
      <returns>値を定義するエンティティまたはアソシエーション メンバーへのパス。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
      <summary>値を取得するパラメーターを取得します。</summary>
      <returns>値を取得するパラメーター。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString">
      <summary>指定された形式を使用して、このインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>このインスタンスの値を指定の形式で表現した文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
      <summary>名前付き結果セット列から値を取得しているメンバーへのバインドを定義します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="columnName">関数結果セットからバインドする列の名前。</param>
      <param name="property">エンティティに設定するプロパティ。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
      <summary>関数結果セットからバインドする列の名前を取得します。</summary>
      <returns>関数結果セットからバインドする列の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
      <summary>エンティティに設定するプロパティを取得します。</summary>
      <returns>エンティティに設定するプロパティ。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString">
      <summary>このインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>このインスタンスの値の文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
      <summary>すべての種類のプロパティ マッピングのマッピング メタデータ。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
      <summary>マップされたプロパティを指定する EdmProperty を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
      <summary>スカラー プロパティのマッピング メタデータ。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>単純なプロパティと列の間のマッピングを作成します。</summary>
      <param name="property">マップされるプロパティ。</param>
      <param name="column">マップされる列。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
      <summary>マップされた列を指定する EdmProperty を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>ストレージの割り当て (CS マッピング) 領域内のアイテムのコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />、および XML リーダーを使用して、<see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> の新しいインスタンスを初期化します。</summary>
      <param name="edmCollection">このマッピングで使用する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">このマッピングで使用する <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="xmlReaders">このマッピングで使用する XML リーダー。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />、およびメタデータ ファイル パスを示すコレクションに基づいて、<see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="edmCollection">このマッピングで使用する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />。</param>
      <param name="storeCollection">このマッピングで使用する <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />。</param>
      <param name="filePaths">このマッピングで使用するファイル パス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>コレクション内の単一のコンテナー マッピングのハッシュ値を計算します。</summary>
      <returns>計算されたハッシュ値を指定する文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>マップされたコンテナーの名前によって指定されるコンテナー マッピングのハッシュ値を計算します。</summary>
      <returns>計算されたハッシュ値を指定する文字列。</returns>
      <param name="conceptualModelContainerName">概念モデルのコンテナーの名前。</param>
      <param name="storeModelContainerName">ストア モデルのコンテナーの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> を作成します。</summary>
      <returns>エラーが発生しなかった場合は <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" /> インスタンス。それ以外の場合は null を返します。</returns>
      <param name="edmItemCollection">マップする EDM メタデータ コレクション。null は使用できません。</param>
      <param name="storeItemCollection">マップするストア メタデータ コレクション。null は使用できません。</param>
      <param name="xmlReaders">読み込む MSL 成果物。null は使用できません。</param>
      <param name="filePaths">MSL 成果物へのパス。エラー メッセージで使用されます。null を使用できます。その場合は、XmlReader のベース URI がパスとして使用されます。</param>
      <param name="errors">読み込み中に発生したエラーのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>コレクション内の単一のコンテナー マッピングのディクショナリ (エクステント、生成されたビュー) を作成します。</summary>
      <returns>生成されたビューを指定するディクショナリ (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />、<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />)。</returns>
      <param name="errors">潜在的なエラーを蓄積する一覧。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>マップされたコンテナーの名前によって指定されるコンテナー マッピングのディクショナリ (エクステント、生成されたビュー) を作成します。</summary>
      <returns>生成されたビューを指定するディクショナリ (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />、<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />)。</returns>
      <param name="conceptualModelContainerName">概念モデルのコンテナーの名前。</param>
      <param name="storeModelContainerName">ストア モデルのコンテナーの名前。</param>
      <param name="errors">潜在的なエラーを蓄積する一覧。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>この <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> が表しているバージョンを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> が表すバージョン。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>事前に生成されたマッピング ビューを取得するために使用される <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> インスタンスを作成するための <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> を取得または設定します。</summary>
      <returns>事前に生成されたマッピング ビューを取得するために使用される <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> インスタンスを作成するための <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
      <summary>構造型マッピングを指定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を追加します。</summary>
      <param name="condition">追加されるプロパティ マッピングの条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>プロパティ マッピングを追加します。</summary>
      <param name="propertyMapping">追加されるプロパティ マッピング。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
      <summary>プロパティ マッピングの条件の読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
      <summary>プロパティ マッピングの読み取り専用コレクションを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>プロパティ マッピングの条件を削除します。</summary>
      <param name="condition">削除されるプロパティ マッピングの条件。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>プロパティ マッピングを削除します。</summary>
      <param name="propertyMapping">削除されるプロパティ マッピング。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
      <summary>CS 空間の型マップのマッピング メタデータを表します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
      <summary>指定された値のプロパティまたは列の値を比較して評価されるマッピング条件を指定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
      <summary>ValueConditionMapping インスタンスを作成します。</summary>
      <param name="propertyOrColumn">プロパティまたは列を指定する EdmProperty。</param>
      <param name="value">比較する値を指定するオブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
      <summary>確認する値を指定するオブジェクトを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>アソシエーション型の End を表します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>読み取り専用の AssociationEndMember インスタンスを作成します。</summary>
      <returns>新しく作成された AssociationEndMember インスタンス。</returns>
      <param name="name">アソシエーション End メンバーの名前。</param>
      <param name="endRefType">End の参照型。</param>
      <param name="multiplicity">End の多重度。</param>
      <param name="deleteAction">End の削除動作を示すフラグ。</param>
      <param name="metadataProperties">インスタンスに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">指定された名前が null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">指定された参照型が null です。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>アソシエーション セットを表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> の End を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> の End を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>指定されたパラメーターから読み取り専用の AssociationSet インスタンスを作成します。</summary>
      <returns>新しく作成した AssociationSet インスタンス。</returns>
      <param name="name">アソシエーション セットの名前。</param>
      <param name="type">アソシエーション セット内の要素のアソシエーション型。</param>
      <param name="sourceSet">ソース アソシエーション セットの End のエンティティ セット。</param>
      <param name="targetSet">ターゲット アソシエーション セットの End のエンティティ セット。</param>
      <param name="metadataProperties">インスタンスに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">指定された名前が null または空です。</exception>
      <exception cref="T:System.ArgumentNullException">指定したアソシエーション型が null です。</exception>
      <exception cref="T:System.ArgumentException">指定したアソシエーション型の End の 1 つが、対応するエンティティ セットの End のエンティティ型と一致しません。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> に関連付けられているアソシエーションを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> に関連付けられているアソシエーションを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>AssociationSet End を表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> オブジェクトに対応する End メンバーを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> オブジェクトに対応する End メンバーを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>この End ロールによって参照されたエンティティ セットを取得します。</summary>
      <returns>この End ロールによって参照されたエンティティ セットを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の End の名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の End の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の親アソシエーション セットを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の親アソシエーション セットを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の End ロールの名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の End ロールの名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の End ロールの名前を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" /> の End ロールの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>概念モデルの 2 つのエンティティの間のアソシエーション/リレーションシップ、またはストア モデルの 2 つのテーブルの間の外部キー リレーションシップを記述します。概念モデルでは、依存クラスで外部キー プロパティを定義できる場合もあれば、定義できない場合もあります。外部キーが定義されている場合、<see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" /> プロパティは true になり、<see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" /> プロパティに外部キーの詳細が格納されます</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> に対する End の一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> の End の一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>参照に関する制約を取得または設定します。</summary>
      <returns>参照に関する制約。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>指定されたパラメーターから読み取り専用の AssociationType インスタンスを作成します。</summary>
      <returns>新しく作成した AssociationType インスタンス。</returns>
      <param name="name">アソシエーション型の名前。</param>
      <param name="namespaceName">アソシエーション型の名前空間。</param>
      <param name="foreignKey">外部キー (FK) リレーションシップを示すフラグ。</param>
      <param name="dataSpace">アソシエーション型のデータ領域。</param>
      <param name="sourceEnd">ソース アソシエーションの End メンバー。</param>
      <param name="targetEnd">ターゲット アソシエーションの End メンバー。</param>
      <param name="constraint">参照に関する制約。</param>
      <param name="metadataProperties">インスタンスに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">指定された名前が null または空です。</exception>
      <exception cref="T:System.ArgumentException">指定した名前空間が null または空です。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>列が外部キーであるかどうかを示すブール型のプロパティ値を取得します。</summary>
      <returns>列が外部キーであるかどうかを示すブール値。true の場合、列は外部キーです。false (既定値) の場合、列は外部キーではありません。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> に対する制約の一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" /> の制約の一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>すべての組み込み型の一覧</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>アソシエーション型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>AssociationSet の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>AssociationSetEnd の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>アソシエーション型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>コレクションの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>コレクション型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>複合型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>ドキュメントの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>EdmFunction の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>EdmMember 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>EdmProperty 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Edm 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>エンティティ コンテナーの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>エンティティ セットの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>EntitySetBase の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>エンティティ型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>基本エンティティ型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>列挙型メンバーの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>列挙型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>ファセットの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>関数パラメーターの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>グローバル項目型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>メタデータ項目型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>メタデータ プロパティの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>ナビゲーション プロパティの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>DeleteAction 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>パラメーター モードの種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>プリミティブ型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>プリミティブ型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>ProviderManifest 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>参照に関する制約型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>参照型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>RelationshipEnd 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>リレーションシップ多重度型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>リレーションシップ セット型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>リレーションシップ型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>行型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>単純型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>構造型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>型情報の種類</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>コレクションの種類 (プロパティに適用)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>コレクションのセマンティクスはバッグです (順序がなく重複が許容されます)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>コレクションのセマンティクスはリストです (順序が決まっていて重複が許容されます)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>プロパティはコレクションではありません</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>Edm コレクション型を表します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>現在の <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> オブジェクトに含まれる要素の型およびその型のファセットを格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> クラスのインスタンスを取得します。</summary>
      <returns>現在の <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> オブジェクトに含まれる要素の型およびその型のファセットを格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> クラスのインスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>Edm 複合型を表します。これを使用して、概念領域モデルベースの規約から複合型を構成できます。複合型はストア モデルではサポートされません。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 型の新しいインスタンスを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> 型の新しいインスタンス。</returns>
      <param name="name">複合型の名前。</param>
      <param name="namespaceName">複合型の名前空間。</param>
      <param name="dataSpace">複合型が属する dataspace。</param>
      <param name="members">複合型のメンバー。</param>
      <param name="metadataProperties">インスタンスに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentNullException">name、namespace、または members 引数が null の場合にスローされます。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> のプロパティの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" /> のプロパティの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>プロパティの同時実行モード。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>固定の同時実行モード: プロパティは書き込み時に常に検証されます</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>既定の同時実行モード: プロパティは書き込み時に検証されません</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>単一の CSDL スキーマ ファイルの制約に準拠する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> を XML ライターにシリアル化します。シリアル化されるモデルは単一の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> を含む必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>モデルのシリアル化中にエラーが検出されると発生します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> を XmlWriter にシリアル化します。</summary>
      <returns>モデルが有効な場合は true、それ以外の場合は false。</returns>
      <param name="model">シリアル化する EdmModel。</param>
      <param name="xmlWriter">シリアル化する XmlWriter。</param>
      <param name="modelNamespace">シリアル化されたモデルの名前空間。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>Entity Framework モデルの処理中に発生したエラーについての情報を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>発生したエラーについて説明するオプションの説明メッセージを取得します。</summary>
      <returns>発生したエラーについて説明するオプションの説明メッセージ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>イベント発生の原因になった <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> を示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> がイベント発生の原因である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>イベント発生の原因になったソース項目のプロパティを示すオプションの値を取得します。</summary>
      <returns>イベント発生の原因になったソース項目のプロパティを示すオプションの値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace は CSpace 内の項目、つまり edm プリミティブ型と csdl で定義されている型を示します</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>CSpace と SSpace 間のマッピング</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>OSpace と CSpace 間のマッピング</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace は clr 空間内の項目を示します</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace は SSpace 内の項目を示します</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> の拡張メソッド。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>概念モデルを指定された DbModel から取得します。</summary>
      <returns>概念モデルを表す EdmModel のインスタンス。</returns>
      <param name="model">IEdmModelAdapter を実装するクラスのインスタンス (例 DbModel)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>ストア モデルを指定された DbModel から取得します。</summary>
      <returns>ストア モデルを表す EdmModel のインスタンス。</returns>
      <param name="model">IEdmModelAdapter を実装するクラスのインスタンス (例 DbModel)。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>項目に関連付けられたドキュメントを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
      <summary>新しいドキュメント インスタンスを初期化します。</summary>
      <param name="summary">概要の文字列。</param>
      <param name="longDescription">詳しい説明の文字列。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> オブジェクトの内容が NULL または空の <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> および <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" /> であるかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> オブジェクトの内容が NULL または空の <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> および <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" /> である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の長い説明を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の長い説明。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の概要を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の概要。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の概要を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> の概要。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>このクラスは、一般的な EDM エラーのエラー情報をカプセル化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>エラー メッセージを取得します。</summary>
      <returns>エラー メッセージ。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>関数を表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>この関数にパラメーターを追加します。</summary>
      <param name="functionParameter">追加するパラメーター。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>この関数の集計属性を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>組み込み属性がこの関数に存在するかどうかを示す値を取得します。</summary>
      <returns>属性がある場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の組み込み型種別を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 列挙の列挙値の 1 つ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>データベース管理システムまたはストレージ モデルによって使用される言語でのクエリを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> のクエリまたは更新ステートメントを含んでいる文字列値。データベース管理システムまたはストレージ モデルによって使用される構文で表されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 型の新しい読み取り専用インスタンス。</returns>
      <param name="name">関数の名前。</param>
      <param name="namespaceName">関数の名前空間。</param>
      <param name="dataSpace">関数が属する名前空間。</param>
      <param name="payload">追加の関数属性とプロパティ。</param>
      <param name="metadataProperties">関数に追加されるメタデータ プロパティ。null を使用できます。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>この型の完全名 (名前空間 + 名前) を返します。</summary>
      <returns>型の完全な名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>このインスタンスが関数またはストアド プロシージャのどちらかにマップされているかどうかを示す値を取得します。</summary>
      <returns>このインスタンスが関数にマップされる場合は true、このインスタンスがストアド プロシージャにマップされる場合は false です。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>このインスタンスがプロバイダー マニフェストから取得されたものであるかどうかを示す値を取得します。</summary>
      <returns>このインスタンスがプロバイダー マニフェストから取得されたものである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>この関数がニラディック関数 (引数を受け取らない関数) かどうかを示す値を取得します。</summary>
      <returns>関数がニラディック関数の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> のパラメーターを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> のパラメーターを格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>この関数のパラメーター型のセマンティクス属性を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の戻りパラメーターを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の戻りパラメーターを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の戻りパラメーターを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の戻り値パラメーターを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>関数に関連付けられているスキーマを取得または設定します。</summary>
      <returns>関数に関連付けられているスキーマ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>この関数の格納関数名の属性を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の追加の属性とプロパティを含みます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>関数に関連付けられているコマンド テキストを取得または設定します。</summary>
      <returns>関数に関連付けられているコマンド テキスト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>関数のエンティティ セットを取得または設定します。</summary>
      <returns>関数のエンティティ セット。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>集計関数であるかどうかを示す値を取得します。</summary>
      <returns>集計関数である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>この関数が組み込み関数であるかどうかを取得または設定します。</summary>
      <returns>この関数が組み込み関数である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>この関数がキャッシュされたストア関数であるかどうかを取得または設定します。</summary>
      <returns>この関数がキャッシュされたストア関数である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>この関数が構成可能であるかどうかを取得または設定します。</summary>
      <returns>この関数が構成可能である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>この関数がプロバイダー マニフェストから取得されたものであるかどうかを取得または設定します。</summary>
      <returns>この関数がプロバイダー マニフェストから取得された場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>この関数が関数インポートであるかどうかを取得または設定します。</summary>
      <returns>この関数が関数インポートである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>関数に引数が含まれていないかどうかを取得または設定します。</summary>
      <returns>関数に引数が含まれていない場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>関数パラメーターを取得または設定します。</summary>
      <returns>関数パラメーター。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>パラメーター型のセマンティクスを取得または設定します。</summary>
      <returns>パラメーター型のセマンティクス。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>戻りパラメーターを取得または設定します。</summary>
      <returns>戻りパラメーター。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>関数スキーマを取得または設定します。</summary>
      <returns>関数スキーマ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>格納関数名を取得または設定します。</summary>
      <returns>格納関数名。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>Edm 空間の項目のコレクションを表すクラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>概念スキーマ定義言語 (CSDL) ファイルが存在する XMLReader オブジェクトのコレクションを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlReaders">概念スキーマ定義言語 (CSDL) ファイルが存在する XMLReader オブジェクトのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="model">Entity Data Model。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>概念スキーマ定義言語 (CSDL) ファイルが存在するパスを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filePaths">概念スキーマ定義言語 (CSDL) ファイルのパス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> を作成するファクトリ メソッド。</summary>
      <returns>エラーが発生しなかった場合は <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" /> インスタンス。それ以外の場合は null を返します。</returns>
      <param name="xmlReaders">読み込む CSDL 成果物。null は使用できません。</param>
      <param name="filePaths">CSDL 成果物へのパス。エラー メッセージで使用されます。null を使用できます。その場合は、XmlReader のベース URI がパスとして使用されます。</param>
      <param name="errors">読み込み中に発生したエラーのコレクション。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>このコレクションの概念モデル バージョンを取得します。</summary>
      <returns>このコレクションの概念モデル バージョン。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> オブジェクトのコレクションを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> オブジェクトのコレクションを表す ReadOnlyCollection オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>指定した概念モデル バージョンの <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> オブジェクトのコレクションを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> オブジェクトのコレクションを表す ReadOnlyCollection オブジェクト。</returns>
      <param name="edmVersion">概念モデル バージョン。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>edm メンバー クラスを表します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>このメンバーが宣言されている型を取得します。</summary>
      <returns>このメンバーが宣言されている型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>このメンバーが EDM 定義で Computed メンバーとしてマークされているかどうかを示します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>このメンバーのストア生成パターンが EDM 定義で ID としてマークされているかどうかを示します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>プロパティの名前を取得または設定します。ストア領域モデルの規約からこれを設定すると、このプロパティのデータベース列の名前が変更されます。概念モデルでは、エンティティ クラスの対応するプロパティに一致する必要があるため、これを変更することはできません。</summary>
      <returns>このメンバーの名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>このメンバーの名前を返します。</summary>
      <returns>このメンバーの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>メンバーの型と、その型のファセットの両方を含んだ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> クラスのインスタンスを取得します。</summary>
      <returns>メンバーの型と、その型のファセットの両方を含んだ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>概念モデルまたはストア モデルを表します。このクラスを使用して、モデルの形状およびその構成方法に関する情報にアクセスできます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>アソシエーション型をモデルに追加します。</summary>
      <param name="item">追加する AssociationType インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>複合型をモデルに追加します。</summary>
      <param name="item">追加する ComplexType インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>関数をモデルに追加します。</summary>
      <param name="item">追加する EdmFunction インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>エンティティ型をモデルに追加します。</summary>
      <param name="item">追加する EntityType インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>列挙型をモデルに追加します。</summary>
      <param name="item">追加する EnumType インスタンス。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>モデルのアソシエーション型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>この型の組み込み型種別を取得します。</summary>
      <returns>この型の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>モデルの複合型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>エンティティ セット、アソシエーション セット、および関数インポートを格納するコンテナーを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>モデルが概念モデル (DataSpace.CSpace) またはストア モデル (DataSpace.SSpace) のどちらであるかを示す、モデルに関連付けられたデータ領域を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>モデルのエンティティ型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>モデルの列挙型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>モデルの関数を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>モデルに関連付けられているグローバル項目を取得します。</summary>
      <returns>モデルに関連付けられているグローバル項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>アソシエーション型をモデルから削除します。</summary>
      <param name="item">削除する AssociationType インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>複合型をモデルから削除します。</summary>
      <param name="item">削除する ComplexType インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>関数をモデルから削除します。</summary>
      <param name="item">削除する EdmFunction インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>エンティティ型をモデルから削除します。</summary>
      <param name="item">削除する EntityType インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>列挙型をモデルから削除します。</summary>
      <param name="item">削除する EnumType インスタンス。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>概念領域では、EdmProperty は Entity のプロパティを表します。ストア領域では、EdmProperty はテーブルの列を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>このモデルのコレクションの種類を取得または設定します。</summary>
      <returns>このモデルのコレクションの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>このプロパティの複合型情報を取得します。</summary>
      <returns>このプロパティの複合型情報。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>プロパティに対する同時実行モードを取得または設定します。</summary>
      <returns>プロパティの同時実行モード。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>EdmProperty 型の新しいインスタンスを作成します。</summary>
      <returns>EdmProperty 型の新しいインスタンス</returns>
      <param name="name">プロパティ名。</param>
      <param name="typeUsage">プロパティ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>新しい複合プロパティを作成します。</summary>
      <returns>新しく作成されたプロパティ。</returns>
      <param name="name">プロパティの名前。</param>
      <param name="complexType">プロパティの型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>新しい列挙プロパティを作成します。</summary>
      <returns>新しく作成されたプロパティ。</returns>
      <param name="name">プロパティの名前。</param>
      <param name="enumType">プロパティの型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>新しいプリミティブ プロパティを作成します。</summary>
      <returns>新しく作成されたプロパティ。</returns>
      <param name="name">プロパティの名前。</param>
      <param name="primitiveType">プロパティの型。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> の既定値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> の既定値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>このプロパティの列挙型情報を取得します。</summary>
      <returns>このプロパティの列挙型情報。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>プロパティがコレクション型プロパティであるかどうかを取得します。</summary>
      <returns>プロパティがコレクション型プロパティである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>このプロパティが複合型プロパティであるかどうかを取得します。</summary>
      <returns>このプロパティが複合型プロパティである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>このプロパティが列挙型プロパティであるかどうかを取得します。</summary>
      <returns>このプロパティが列挙型プロパティである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>このプロパティが固定長であるかどうかを取得または設定します。</summary>
      <returns>このプロパティが固定長である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>固定長ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>このプロパティがプロバイダーでサポートされる最大長を使用するかどうかを取得または設定します。</summary>
      <returns>このプロパティがプロバイダーでサポートされる最大長を使用する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>最大長ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>有効桁数ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>このプロパティがプリミティブ型であるかどうかを取得します。</summary>
      <returns>このプロパティがプリミティブ型である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>小数点以下桁数ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>このプロパティが基になるプリミティブ型であるかどうかを取得します。</summary>
      <returns>このプロパティが基になるプリミティブ型である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>このプロパティが Unicode プロパティであるかどうかを取得または設定します。</summary>
      <returns>このプロパティが Unicode プロパティである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>Unicode ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>プロパティの最大長を取得または設定します。</summary>
      <returns>プロパティの最大長。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> に Null 値を割り当てることができるかどうかを示す値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> に Null 値を割り当てることができる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>このプロパティの有効桁数を取得または設定します。</summary>
      <returns>このプロパティの有効桁数。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>このプロパティのプリミティブ型情報を取得します。</summary>
      <returns>このプロパティのプリミティブ型情報。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>このプロパティの小数点以下桁数を取得または設定します。</summary>
      <returns>このプロパティの小数点以下桁数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>メタデータ プロパティを設定します。</summary>
      <param name="metadataProperties">設定されるメタデータ プロパティ。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>このプロパティに関連付けられたデータベース列のデータベース生成メソッドを取得または設定します</summary>
      <returns>プロパティのストア生成パターン。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>プロパティの型名を取得します。</summary>
      <returns>プロパティの型名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>このプロパティの基になるプリミティブ型情報を取得します。</summary>
      <returns>このプロパティの基になるプリミティブ型情報。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>このクラスは、発生したスキーマ エラーに関するエラー情報をカプセル化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>EdmSchemaError オブジェクトを構築します。</summary>
      <param name="message">エラーの説明。</param>
      <param name="errorCode">このエラーに関連付けられているコード。</param>
      <param name="severity">エラーの重大度。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>エラーが発生した列を取得します。</summary>
      <returns>エラーが発生した列。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>エラー コードを取得します。</summary>
      <returns>エラー コード。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>エラーが発生した行番号を取得します。</summary>
      <returns>エラーが発生した行番号。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>エラーが存在するスキーマの場所を取得します。この文字列の最後には、スキーマの名前も含まれます。</summary>
      <returns>エラーが存在するスキーマの場所。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>エラーが存在するスキーマの名前を取得します。</summary>
      <returns>エラーが存在するスキーマの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>エラーの重大度レベルを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" /> 値のいずれか。既定値は <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" /> です。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>エラー発生時点のスタック トレースの文字列表記を取得します。</summary>
      <returns>エラー発生時点のスタック トレースの文字列表記。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>エラー メッセージを返します。</summary>
      <returns>エラー メッセージ。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Entity Framework モデルを検証するときに発生する可能性のあるエラーの重大度を定義します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>モデルの使用が妨げられるエラー。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>モデルの使用が妨げられない警告。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>すべてのモデル型の基本 EdmType クラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>抽象型かどうかを示す値を取得します。</summary>
      <returns>抽象型の場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>この型の基本データ型を取得します。</summary>
      <returns>この型の基本データ型。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>この型の完全な名前を取得します。</summary>
      <returns>この型の完全な名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>要素型がこの型である <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> のインスタンスを返します。</summary>
      <returns>要素型がこの型である <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>この型の名前を取得します。</summary>
      <returns>この型の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>この型の名前空間を取得します。</summary>
      <returns>この型の名前空間。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>この型の完全な名前を返します。</summary>
      <returns>この型の完全な名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>エンティティ コンテナーを表すクラス</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>名前とデータ領域が指定されたエンティティ コンテナーを作成します。</summary>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="dataSpace">エンティティ コンテナーのデータ領域。</param>
      <exception cref="T:System.ArgumentNullException">名前の引数が null の場合にスローされます。</exception>
      <exception cref="T:System.ArgumentException">名前の引数が空の文字列の場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>指定されたエンティティ セットをコンテナーに追加します。</summary>
      <param name="entitySetBase">追加するエンティティ セット。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>コンテナーに関数インポートを追加します。</summary>
      <param name="function">追加する関数インポート。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>このエンティティ コンテナーのアソシエーション セットを取得します。</summary>
      <returns>このエンティティ コンテナーのアソシエーション セット。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> に含まれているエンティティ セットとアソシエーション セットの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> に含まれているエンティティ セットとアソシエーション セットの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>EntityContainer オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>EntityContainer オブジェクト。</returns>
      <param name="name">作成するエンティティ コンテナーの名前。</param>
      <param name="dataSpace">このエンティティ コンテナーが属する DataSpace。</param>
      <param name="entitySets">新しいコンテナーに含まれるエンティティ セット。null を使用できます。</param>
      <param name="functionImports">新しいコンテナーに含まれる関数。null を使用できます。</param>
      <param name="metadataProperties">インスタンスに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">name 引数が null または空文字列の場合にスローされます。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>このエンティティ コンテナーのエンティティ セットを取得します。</summary>
      <returns>このエンティティ コンテナーのエンティティ セット。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の要素のコレクションを指定します。それぞれの関数は、データベースに存在するストアド プロシージャ (またはエンティティやそのプロパティにマップされる等価な CommandText) の詳細を保持しています。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> の要素を保持する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>指定されたエンティティ セット名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> オブジェクトを返します。</summary>
      <returns>指定された名前のエンティティ セットを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> オブジェクト。</returns>
      <param name="name">検索対象のエンティティ セットの名前。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>指定されたリレーションシップ セット名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> オブジェクトを返します。</summary>
      <returns>指定された名前のリレーションシップ セットを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> オブジェクト。</returns>
      <param name="name">検索対象のリレーションシップ セットの名前。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> の名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> の名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>コンテナーから特定のエンティティ セットを削除します。</summary>
      <param name="entitySetBase">削除するエンティティ セット。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> の名前を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> の名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>指定されたエンティティ セット名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致するエンティティ セットが存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">検索対象のエンティティ セットの名前。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="entitySet">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> オブジェクトが格納されます。エンティティ セットが存在しない場合、この出力パラメーターには NULL が格納されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>指定されたリレーションシップ セット名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致するリレーションシップ セットが存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">検索対象のリレーションシップ セットの名前。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="relationshipSet">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> オブジェクトが格納されます。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>EntityType に定義された構造の特定の使用を表します。概念モデルでは、これは、照会でき、エンティティを永続化できるセットを表します。ストア モデルでは、テーブルを表します。ストア領域モデルの規約から、これを使用して <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" /> プロパティでテーブル名を構成し、<see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" /> プロパティでテーブル スキーマを構成できます。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>EntitySet オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>EntitySet オブジェクト。</returns>
      <param name="name">EntitySet の名前。</param>
      <param name="schema">db スキーマ。null を使用できます。</param>
      <param name="table">db テーブル。null を使用できます。</param>
      <param name="definingQuery">この EntitySet のデータを取得するために使用する必要があるプロバイダー固有のクエリ。null を使用できます。</param>
      <param name="entityType">このエンティティ セット型に含まれるエンティティのエンティティ型。</param>
      <param name="metadataProperties">新しく作成された EntitySet に追加されるメタデータ プロパティ。null を使用できます。</param>
      <exception cref="T:System.ArgumentException">name 引数が null または空文字列の場合にスローされます。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> のエンティティ型を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> のエンティティ型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>エンティティ セットを表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>このエンティティ セットを記述するエスケープされたプロバイダー固有の SQL を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> のエンティティ型を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> のエンティティ型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>現在のエンティティ セットまたはリレーションシップ セットのエンティティ コンテナーを取得します。</summary>
      <returns>現在のエンティティ セットまたはリレーションシップ セットのエンティティ コンテナーを表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>現在のエンティティ セットまたはリレーションシップ セットの名前を取得または設定します。このプロパティをストア領域から変更する場合、新しい名前を反映するためにマップ レイヤーも更新する必要があります。ストア領域 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> のテーブル名を変更するには、Table プロパティを使用します。</summary>
      <returns>現在のエンティティ セットまたはリレーションシップ セットの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>このエンティティ セットのデータベース スキーマを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>このエンティティ セットのデータベース テーブル名を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>現在のエンティティ セットまたはリレーションシップ セットの名前を返します。</summary>
      <returns>現在のエンティティ セットまたはリレーションシップ セットの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> の構造を表します。概念モデルでは、これはエンティティの形状と構造を表します。ストア モデルでは、これはテーブルの構造を表します。Schema と Table name を変更するには、EntitySet を使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>指定されたナビゲーション プロパティをこの型のメンバーに追加します。ナビゲーション プロパティは読み取り専用フラグにかかわらず追加されます。</summary>
      <param name="property">追加するナビゲーション プロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>EntityType オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>EntityType オブジェクト。</returns>
      <param name="name">エンティティ型の名前。</param>
      <param name="namespaceName">エンティティ型の名前空間。</param>
      <param name="dataSpace">EntityType が属する dataspace。</param>
      <param name="keyMemberNames">型のキー メンバーの名前。</param>
      <param name="members">エンティティ型のメンバー (プリミティブ プロパティとナビゲーション プロパティ)。</param>
      <param name="metadataProperties">インスタンスに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">名前引数または名前空間引数が null の場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>EntityType オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>EntityType オブジェクト。</returns>
      <param name="name">エンティティ型の名前。</param>
      <param name="namespaceName">エンティティ型の名前空間。</param>
      <param name="dataSpace">EntityType が属する dataspace。</param>
      <param name="baseType">基本型。</param>
      <param name="keyMemberNames">型のキー メンバーの名前。</param>
      <param name="members">エンティティ型のメンバー (プリミティブ プロパティとナビゲーション プロパティ)。</param>
      <param name="metadataProperties">インスタンスに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">名前引数または名前空間引数が null の場合にスローされます。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>エンティティ型の宣言されたメンバーのコレクションを取得します。</summary>
      <returns>エンティティ型の宣言されたメンバーのコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>エンティティ型に関連付けられている宣言されたナビゲーション プロパティを取得します。</summary>
      <returns>エンティティ型に関連付けられている宣言されたナビゲーション プロパティ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>エンティティ型の宣言されたプロパティの一覧を取得します。</summary>
      <returns>エンティティ型の宣言されたプロパティ。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> を参照する <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> オブジェクトを返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> を参照する <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> のナビゲーション プロパティを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> のナビゲーション プロパティの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> のプロパティの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> のプロパティのリストを含む型 <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> のコレクション。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>エンティティ型を表します</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>指定されたプロパティを現在のエンティティのキーの一覧に追加します。</summary>
      <param name="member">追加するプロパティ。</param>
      <exception cref="T:System.ArgumentNullException">member 引数が null の場合</exception>
      <exception cref="T:System.InvalidOperationException">EntityType に別の EntityTypeBase の基本型が含まれる場合にスローされます。この場合は、KeyMembers を基本型に追加する必要があります</exception>
      <exception cref="T:System.InvalidOperationException">EntityType インスタンスが読み取り専用状態の場合</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>現在のエンティティの型またはリレーションシップの種類について、すべてのキー メンバーの一覧を取得します。</summary>
      <returns>現在のエンティティの型またはリレーションシップの種類について、そのキー メンバーの一覧を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>このエンティティ型のすべてのキー プロパティの一覧を取得します。</summary>
      <returns>このエンティティ型のすべてのキー プロパティの一覧。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>指定されたキー メンバーをコレクションから削除します。</summary>
      <param name="member">削除するキー メンバー。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>列挙メンバーを表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>この型の種類を取得します。</summary>
      <returns>この型の種類。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>読み取り専用の EnumMember インスタンスを作成します。</summary>
      <returns>新しく作成される EnumMember インスタンス。</returns>
      <param name="name">列挙メンバーの名前。</param>
      <param name="value">列挙メンバーの値。</param>
      <param name="metadataProperties">列挙メンバーに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">名前は null または空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>読み取り専用の EnumMember インスタンスを作成します。</summary>
      <returns>新しく作成される EnumMember インスタンス。</returns>
      <param name="name">列挙メンバーの名前。</param>
      <param name="value">列挙メンバーの値。</param>
      <param name="metadataProperties">列挙メンバーに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">名前は null または空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>読み取り専用の EnumMember インスタンスを作成します。</summary>
      <returns>新しく作成される EnumMember インスタンス。</returns>
      <param name="name">列挙メンバーの名前。</param>
      <param name="value">列挙メンバーの値。</param>
      <param name="metadataProperties">列挙メンバーに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">名前は null または空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>読み取り専用の EnumMember インスタンスを作成します。</summary>
      <returns>新しく作成される EnumMember インスタンス。</returns>
      <param name="name">列挙メンバーの名前。</param>
      <param name="value">列挙メンバーの値。</param>
      <param name="metadataProperties">列挙メンバーに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">名前は null または空。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>読み取り専用の EnumMember インスタンスを作成します。</summary>
      <returns>新しく作成される EnumMember インスタンス。</returns>
      <param name="name">列挙メンバーの名前。</param>
      <param name="value">列挙メンバーの値。</param>
      <param name="metadataProperties">列挙メンバーに関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentException">名前は null または空。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>この列挙メンバーの名前を取得します。</summary>
      <returns>この列挙メンバーの名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>System.Object.ToString をオーバーライドして、この型に適した文字列表現を提供します。</summary>
      <returns>この列挙メンバーの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>この列挙メンバーの値を取得します。</summary>
      <returns>この列挙メンバーの値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>列挙型を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>型の種類を返します</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>読み取り専用 EnumType インスタンスを作成します。</summary>
      <returns>新たに作成される EnumType インスタンス。</returns>
      <param name="name">列挙型の名前。</param>
      <param name="namespaceName">列挙型の名前空間。</param>
      <param name="underlyingType">列挙型の基になる型。</param>
      <param name="isFlags">列挙型を、ビット フィールド、つまりフラグのセットとして扱えるかどうかを示します。</param>
      <param name="members">列挙型のメンバー。</param>
      <param name="metadataProperties">列挙型に関連付けられるメタデータ プロパティ。</param>
      <exception cref="T:System.ArgumentNullException">underlyingType が null です。</exception>
      <exception cref="T:System.ArgumentException">名前は null または空。または、namespaceName が null または空。または、underlyingType はサポートされる基になる型ではありません。または、指定されたメンバーの名前が一意ではありません。または、指定されたメンバーの値が、基になる型の範囲にありません。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>列挙型をフラグ (ビット フィールドとして処理可能) として定義できるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>この列挙型の列挙メンバーのコレクションを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>この列挙型の基になるデータ型を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>Facet オブジェクトを表すクラス。このオブジェクトは変更不可 (読み取り専用に設定されているだけでなく) で、システムの一部はその動作に依存します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の説明を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の説明を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の型を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>ファセットの値が無制限であるかどうかを示す値を取得します。</summary>
      <returns>ファセットの値が無制限である場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の名前を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" /> の値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>FacetDescription オブジェクトを表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>このファセットの説明に関する既定値を取得します。</summary>
      <returns>このファセットの説明に関する既定値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>このファセットの名前を取得します。</summary>
      <returns>このファセットの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>このファセットの型を取得します。</summary>
      <returns>このファセットの型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>このファセットの値が定数であるかどうかを示す値を取得します。</summary>
      <returns>このファセットが定数である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>このファセットが必須のファセットであるかどうかを示す値を取得します。</summary>
      <returns>このファセットが必須のファセットである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>このファセットの最大値を取得します。</summary>
      <returns>このファセットの最大値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>このファセットの最小値を取得します。</summary>
      <returns>このファセットの最小値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>このファセットの名前を返します。</summary>
      <returns>このファセットの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>関数パラメーターを表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> 型の新しい読み取り専用インスタンス。</returns>
      <param name="name">パラメーターの名前。</param>
      <param name="edmType">パラメーターの EdmType。</param>
      <param name="parameterMode">パラメーターの <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>このパラメーターが宣言されている <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> を取得します。</summary>
      <returns>このパラメーターが宣言されている関数を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>パラメーターがデータベース プロバイダーでサポートされる最大長を使用するかどうかを取得します。</summary>
      <returns>パラメーターがデータベース プロバイダーでサポートされる最大長を使用する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>最大長ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>有効桁数ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>小数点以下桁数ファセットがデータベース プロバイダーに対して不変であるかどうかを取得します。</summary>
      <returns>ファセットが不変である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>パラメーターの最大長を取得します。</summary>
      <returns>パラメーターの最大長。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> のモードを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> の名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>パラメーターの有効桁数の値を取得します。</summary>
      <returns>パラメーターの有効桁数の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>パラメーターの小数点以下桁数の値を取得します。</summary>
      <returns>パラメーターの小数点以下桁数の値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> の名前を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" /> の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>このパラメーターの型名を取得します。</summary>
      <returns>このパラメーターの型名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>パラメーターの型と、その型のファセットの両方を含んだ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> クラスのインスタンスを取得します。</summary>
      <returns>パラメーターの型と、その型のファセットの両方を含んだ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>すべてのメタデータの基本項目クラスを表します</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> の基になるストアと概念モデルを取得するインターフェイス。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>概念モデルを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>ストア モデルを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>項目のコレクションを表すクラス。コレクションの実際の保持の実装は、ほとんどが MetadataCollection によって行われます。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>この項目コレクションに関連付けられているデータ モデルを取得します。</summary>
      <returns>この項目コレクションに関連付けられているデータ モデル。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>指定されたエンティティ コンテナー名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。</summary>
      <returns>エンティティ コンテナーが存在しない場合は、NULL が返されます。それ以外の場合は、最初に見つかったエンティティ コンテナーが返されます。</returns>
      <param name="name">エンティティ コンテナー名。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>指定されたエンティティ コンテナー名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。</summary>
      <returns>エンティティ コンテナーが存在しない場合は、NULL が返されます。それ以外の場合は、最初に見つかったエンティティ コンテナーが返されます。</returns>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>この項目コレクションから、指定された名前を使用して関数のオーバーロードをすべて返します。</summary>
      <returns>指定された名前を持つ関数をすべて格納する ReadOnlyCollection 型のコレクション。</returns>
      <param name="functionCollection">関数のディクショナリ。</param>
      <param name="functionName">関数の完全な名前。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>この項目コレクションから、指定された名前を使用して関数のオーバーロードをすべて返します。</summary>
      <returns>指定された名前を持つ関数をすべて格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="functionName">関数の完全な名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>この項目コレクションから、指定された名前を使用して関数のオーバーロードをすべて返します。</summary>
      <returns>指定された名前を持つ関数をすべて格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="functionName">関数の完全な名前。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>指定された ID を使用して、厳密に型指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> オブジェクトを返します。</summary>
      <returns>ID で指定された項目。</returns>
      <param name="identity">項目の ID。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>指定された ID を使用し、厳密に型指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> オブジェクトを返します。大文字と小文字を区別して検索するか、区別せずに検索するかを指定できます。</summary>
      <returns>ID で指定された項目。</returns>
      <param name="identity">項目の ID。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>この項目コレクションから、指定された型の項目をすべて返します。</summary>
      <returns>指定された型の項目をすべて格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>この項目コレクションから、指定された型名と名前空間名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>この項目コレクションにおいて、指定された型名と名前空間名に一致する型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。一致する型が存在しない場合は、NULL が返されます。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>この項目コレクションから、指定された型名と名前空間名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>この項目コレクションにおいて、指定された型名と名前空間名に一致する型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。一致する型が存在しない場合は、NULL が返されます。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>指定されたエンティティ コンテナー名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。エンティティ コンテナーが存在しない場合、この出力パラメーターには NULL が格納されます。それ以外の場合、出力パラメーターには最初のエンティティ コンテナーが格納されます。</summary>
      <returns>検索条件と一致するエンティティ コンテナーが存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="entityContainer">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトが格納されます。エンティティ コンテナーが存在しない場合、この出力パラメーターには NULL が格納されます。それ以外の場合、出力パラメーターには最初のエンティティ コンテナーが格納されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>指定されたエンティティ コンテナー名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。エンティティ コンテナーが存在しない場合、出力パラメーターには NULL が格納されます。それ以外の場合、出力パラメーターには最初のエンティティ コンテナーが格納されます。</summary>
      <returns>検索条件と一致するエンティティ コンテナーが存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="entityContainer">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトが格納されます。エンティティ コンテナーが存在しない場合、この出力パラメーターには NULL が格納されます。それ以外の場合、出力パラメーターには最初のエンティティ コンテナーが格納されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>この項目コレクションから、指定された ID を使用して、厳密に型指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致する項目が存在した場合は true、それ以外の場合は false。</returns>
      <param name="identity">項目の ID。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="item">このメソッドから制御が戻った時点で、出力パラメーターには <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> オブジェクトが格納されます。項目コレクションに、指定された ID のグローバル項目が存在しなかった場合、この出力パラメーターには NULL が格納されます。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>この項目コレクションから、指定された ID を使用して、厳密に型指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致する項目が存在した場合は true、それ以外の場合は false。</returns>
      <param name="identity">項目の ID。</param>
      <param name="item">このメソッドから制御が戻った時点で、出力パラメーターには <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> オブジェクトが格納されます。項目コレクションに、指定された ID のグローバル項目が存在しなかった場合、この出力パラメーターには NULL が格納されます。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>この項目コレクションから、指定された型名と名前空間名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="type">このメソッドから制御が戻った時点で、この出力パラメーターには <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトが格納されます。項目コレクションに、指定された名前と名前空間名に一致する型が存在しなかった場合、この出力パラメーターには NULL が格納されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>この項目コレクションから、指定された型名と名前空間名を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
      <param name="type">このメソッドから制御が戻った時点で、この出力パラメーターには <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトが格納されます。項目コレクションに、指定された名前と名前空間名に一致する型が存在しなかった場合、この出力パラメーターには NULL が格納されます。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>すべてのメタデータの基本項目クラスを表します</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>指定された名前と値で注釈を追加または更新します。</summary>
      <param name="name">注釈プロパティの名前。</param>
      <param name="value">注釈プロパティの値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>この型の組み込み型種別を取得します。</summary>
      <returns>この型の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>この型に関連付けられているドキュメントを取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> オブジェクトは、この型のドキュメントを表します。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> のいずれかの値と一致する、概念モデルの組み込み型を返します。</summary>
      <returns>EDM の組み込み型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。</returns>
      <param name="builtInTypeKind">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> 値のいずれか。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>指定された型に対する一般的なファセットの説明の一覧を返します。</summary>
      <returns>指定された型に対する一般的なファセットの説明の一覧を表す <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>現在の型のプロパティの一覧を取得します。</summary>
      <returns>現在の型のプロパティの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>指定した名前の注釈を削除します。</summary>
      <returns>注釈が削除されている場合は true、それ以外の場合は false。</returns>
      <param name="name">注釈プロパティの名前。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>項目のメタデータ属性を表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>MetadataProperty オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>MetadataProperty オブジェクト。</returns>
      <param name="name">メタデータ プロパティの名前。</param>
      <param name="typeUsage">メタデータ プロパティの型の使用法。</param>
      <param name="value">メタデータ プロパティの値。</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="typeUsage" /> が null の場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.CreateAnnotation(System.String,System.Object)">
      <summary>指定された名前と値を持つメタデータの注釈を作成します。</summary>
      <returns>作成された注釈を表す MetadataProperty インスタンス。</returns>
      <param name="name">注釈名。</param>
      <param name="value">注釈の値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
      <summary>メタデータ プロパティが注釈かどうかを示すブール値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" /> の値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" /> の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の型と、その型のファセットの両方を含んだ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> クラスのインスタンスを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の型と、その型のファセットの両方を含んだ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> の値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>ランタイム メタデータ ワークスペース</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>指定したパスおよびアセンブリを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="paths">ワークスペース メタデータへのパス。</param>
      <param name="assembliesToConsider">ワークスペースの構築に使用するアセンブリの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>従来の EDMX マッピングからのすべての項目コレクション (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />) に対して、ローダーを持つ <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> を構築します。既定の O 空間および O/C マッピング コレクションが使用されます。項目コレクションのデリゲートは、指定されたコレクションが初めて使用されたときに限定的に実行されます。コレクションがまったく使用されない場合は null を返すデリゲートを渡すことは許容されますが、この方法が使用されることはほとんどありません。このようなケースで EF がコレクションを使用しようとすると、例外になります。</summary>
      <param name="cSpaceLoader">C 空間 (CSDL) の項目コレクションを返すデリゲート。</param>
      <param name="sSpaceLoader">S 空間 (SSDL) の項目コレクションを返すデリゲート。</param>
      <param name="csMappingLoader">C/S マッピング (MSL) の項目コレクションを返すデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>EF が必要とするすべての項目コレクション (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />) に対して、ローダーを持つ <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> を構築します。ただし、指定された O 空間および C 空間のローダーに基づいて自動的に作成される O/C マッピングは除きます。項目コレクションのデリゲートは、指定されたコレクションが初めて使用されたときに限定的に実行されます。コレクションがまったく使用されない場合は null を返すデリゲートを渡すことは許容されますが、この方法が使用されることはほとんどありません。このようなケースで EF がコレクションを使用しようとすると、例外になります。</summary>
      <param name="cSpaceLoader">C 空間 (CSDL) の項目コレクションを返すデリゲート。</param>
      <param name="sSpaceLoader">S 空間 (SSDL) の項目コレクションを返すデリゲート。</param>
      <param name="csMappingLoader">C/S マッピング (MSL) の項目コレクションを返すデリゲート。</param>
      <param name="oSpaceLoader">O 空間の項目コレクションを返すデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>メタデータ キャッシュ エントリをすべてクリアします。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>
        <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" /> データ領域を使用するように構成された <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" /> を作成します。</summary>
      <returns>作成されたパーサー オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>指定されたクエリ式に基づいて、このメタデータ ワークスペースにバインドされる新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> を作成します。</summary>
      <returns>
        <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" /> プロパティのように、指定された式を持つ新しい <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />。</returns>
      <param name="query">クエリを定義する <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> が null の場合</exception>
      <exception cref="T:System.ArgumentException">このメタデータ ワークスペースで解決できないメタデータが <paramref name="query" /> に含まれている場合</exception>
      <exception cref="T:System.ArgumentException">解決できない変数参照を含んでいるために <paramref name="query" /> が構造的に有効でない場合</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>objectSpaceType パラメーターで指定された型と一致する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。一致する型が存在しない場合は、NULL が返されます。</returns>
      <param name="objectSpaceType">オブジェクト空間の型を指定する <see cref="T:System.Data.Metadata.Edm.EnumlType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>objectSpaceType パラメーターで指定された型と一致する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。一致する型が存在しない場合は、NULL が返されます。</returns>
      <param name="objectSpaceType">オブジェクト空間の型を指定する <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定されたエンティティ コンテナー名およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。</summary>
      <returns>エンティティ コンテナーが存在しない場合は、NULL が返されます。それ以外の場合は、最初に見つかったエンティティ コンテナーが返されます。</returns>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="dataSpace">エンティティ コンテナーを検索する概念モデル。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定されたエンティティ コンテナー名およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。</summary>
      <returns>エンティティ コンテナーが存在しない場合は、NULL が返されます。それ以外の場合は、最初に見つかったエンティティ コンテナーが返されます。</returns>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="dataSpace">エンティティ コンテナーを検索する概念モデル。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定された名前、名前空間名、およびデータ モデルを使用して、特定の関数のすべてのオーバーロードを返します。</summary>
      <returns>特定の名前空間およびデータ モデルの、指定された名前と一致するすべての関数を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="name">関数の名前。</param>
      <param name="namespaceName">関数の名前空間。</param>
      <param name="dataSpace">関数を検索する概念モデル。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>指定された名前、名前空間名、およびデータ モデルを使用して、特定の関数のすべてのオーバーロードを返します。</summary>
      <returns>特定の名前空間およびデータ モデルの、指定された名前と一致するすべての関数を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="name">関数の名前。</param>
      <param name="namespaceName">関数の名前空間。</param>
      <param name="dataSpace">関数を検索する概念モデル。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定された ID とデータ モデルを使用して項目を返します。</summary>
      <returns>指定されたデータ モデルの、特定の ID と一致する項目。</returns>
      <param name="identity">項目の ID。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="dataSpace">項目を検索する概念モデル。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定された ID とデータ モデルを使用して項目を返します。</summary>
      <returns>指定されたデータ モデルの、特定の ID と一致する項目。</returns>
      <param name="identity">項目の ID。</param>
      <param name="dataSpace">項目を検索する概念モデル。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> アイテムを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> 項目。</returns>
      <param name="dataSpace">項目の取得元となる <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定されたデータ モデルのすべての項目を取得します。</summary>
      <returns>指定されたデータ モデルのすべての項目を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="dataSpace">項目のリストを必要とする概念モデル。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定されたデータ モデルのすべての項目を取得します。</summary>
      <returns>指定されたデータ モデルのすべての項目を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="dataSpace">項目のリストを必要とする概念モデル。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>edmSpaceType パラメーターで指定された型と一致するオブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトを返します。</summary>
      <returns>オブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。一致する型が存在しない場合は、NULL が返されます。</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>edmSpaceType パラメーターで指定された型と一致するオブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトを返します。</summary>
      <returns>オブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。一致する型が存在しない場合は、NULL が返されます。</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定されたデータ モデルのプリミティブ型の一覧を返します。</summary>
      <returns>指定されたデータ モデルのすべてのプリミティブ型を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <param name="dataSpace">プリミティブ型一覧の取得対象となるデータ モデル。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>エンティティの変更時に元の値を必要とする特定の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />/<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> のメンバーを返します。</summary>
      <returns>元の値が必要な <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />。</returns>
      <param name="entitySet">C 空間に属する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />。</param>
      <param name="entityType">任意の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> に参加する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />。</param>
      <param name="partialUpdateSupported">エンティティを部分的に更新できる場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>エンティティ セットとエンティティ型から元の値のメンバーを取得します。</summary>
      <returns>エンティティ セットとエンティティ型からの元の値のメンバー。</returns>
      <param name="entitySet">元の値の取得先のエンティティ セット。</param>
      <param name="entityType">元の値の取得に使用するエンティティの型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定された型名、名前空間名、およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="dataSpace">型を検索する概念モデル。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>指定された型名、名前空間名、およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>指定されたデータ モデルにおいて、指定された型名と名前空間名に一致する型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。一致する型が存在しない場合は、NULL が返されます。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
      <param name="dataSpace">型を検索する概念モデル。</param>
      <exception cref="T:System.ArgumentException">領域が有効な領域でない場合にスローされます。有効な領域は、C、O、CS、OCSpace です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>指定されたアセンブリからメタデータを読み込みます。</summary>
      <param name="assembly">メタデータの読み込み元のアセンブリ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>指定されたアセンブリからメタデータを読み込みます。</summary>
      <param name="assembly">メタデータの読み込み元のアセンブリ。</param>
      <param name="logLoadMessage">読み込みメッセージをログに記録するためのデリゲート。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>ランタイムによってサポートされる EDM の最大のバージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>関連付けられている各データ モデルに項目コレクションを登録します。</summary>
      <param name="collection">登録対象となる出力パラメーター コレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>objectSpaceType パラメーターで指定された型と一致する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> オブジェクトを、出力パラメーター edmSpaceType を介して返します。</summary>
      <returns>成功した場合は true、失敗した場合は false。</returns>
      <param name="objectSpaceType">オブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> オブジェクト。</param>
      <param name="edmSpaceType">このメソッドが返されるときに、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> オブジェクトを格納します。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>objectSpaceType パラメーターで指定された型と一致する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトを、出力パラメーター edmSpaceType を介して返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="objectSpaceType">オブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。</param>
      <param name="edmSpaceType">このメソッドが返されるときに、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトを格納します。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>指定されたエンティティ コンテナー名およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致するエンティティ コンテナーが存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="dataSpace">エンティティ コンテナーを検索する概念モデル。</param>
      <param name="entityContainer">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトが格納されます。エンティティ コンテナーが存在しない場合、この出力パラメーターには NULL が格納されます。それ以外の場合、最初のエンティティ コンテナーが返されます。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>指定されたエンティティ コンテナー名およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致するエンティティ コンテナーが存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">エンティティ コンテナー名。</param>
      <param name="dataSpace">エンティティ コンテナーを検索する概念モデル。</param>
      <param name="entityContainer">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> オブジェクトが格納されます。エンティティ コンテナーが存在しない場合、この出力パラメーターには NULL が格納されます。それ以外の場合、最初のエンティティ コンテナーが返されます。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>指定された ID とデータ モデルを使用して項目を返します。</summary>
      <returns>検索条件と一致する項目が存在した場合は true、それ以外の場合は false。</returns>
      <param name="identity">項目を検索する概念モデル。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="dataSpace">項目を検索する概念モデル。</param>
      <param name="item">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Metadata.Edm.GlobalIem" /> オブジェクトが格納されます。このパラメーターは初期化せずに渡されます。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>指定された ID とデータ モデルを使用して項目を返します。</summary>
      <returns>検索条件と一致する項目が存在した場合は true、それ以外の場合は false。</returns>
      <param name="identity">項目を検索する概念モデル。</param>
      <param name="space">項目を検索する概念モデル。</param>
      <param name="item">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Metadata.Edm.GlobalIem" /> オブジェクトが格納されます。このパラメーターは初期化せずに渡されます。</param>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> の取得をテストします。</summary>
      <returns>取得が正常に完了した場合は true、それ以外の場合は false。</returns>
      <param name="dataSpace">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> の取得を試みる <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />。</param>
      <param name="collection">このメソッドが返されるときに、項目コレクションを格納します。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>edmSpaceType パラメーターで指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> と一致する型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> オブジェクトを、出力パラメーター objectSpaceType を介して返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> オブジェクト。</param>
      <param name="objectSpaceType">このメソッドが返されるときに、オブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> オブジェクトが格納されます。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>edmSpaceType パラメーターで指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> と一致する型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトを、出力パラメーター objectSpaceType を介して返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="edmSpaceType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクト。</param>
      <param name="objectSpaceType">このメソッドが返されるときに、オブジェクト空間型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> オブジェクトが格納されます。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>指定された型名、名前空間名、およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="dataSpace">型を検索する概念モデル。</param>
      <param name="type">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトが格納されます。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>指定された型名、名前空間名、およびデータ モデルを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトを返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="name">型の名前。</param>
      <param name="namespaceName">型の名前空間。</param>
      <param name="dataSpace">型を検索する概念モデル。</param>
      <param name="type">このメソッドから制御が戻った時点で、<see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクトが格納されます。このパラメーターは初期化せずに渡されます。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>EDM ナビゲーション プロパティ クラスを表します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>指定されたパラメーターから NavigationProperty インスタンスを作成します。</summary>
      <returns>新しく作成した NavigationProperty インスタンス。</returns>
      <param name="name">ナビゲーション プロパティの名前。</param>
      <param name="typeUsage">ナビゲーション プロパティ型とそのファセットを指定します。</param>
      <param name="relationshipType">ナビゲーションのリレーションシップ型。</param>
      <param name="from">ナビゲーションのソース End メンバー。</param>
      <param name="to">ナビゲーションのターゲット End メンバー。</param>
      <param name="metadataProperties">ナビゲーション プロパティのメタデータ プロパティ。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>このナビゲーションにおいて、リレーションシップの起点となる End メンバーを取得します。</summary>
      <returns>このナビゲーションにおいて、リレーションシップの起点となる End メンバー。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>指定されたナビゲーション プロパティが参照に関する制約の依存 End にある場合は、外部キー プロパティを返します。それ以外の場合は、空のセットを返します。プリンシパル End キー プロパティの順序でメンバーを返します。</summary>
      <returns>外部キー プロパティのコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>このナビゲーション プロパティの適用対象となるリレーションシップの種類を取得します。</summary>
      <returns>このナビゲーション プロパティの適用対象となるリレーションシップの種類。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>このナビゲーションにおいて、リレーションシップの終点となる End メンバーを取得します。</summary>
      <returns>このナビゲーションにおいて、リレーションシップの終点となる End メンバー。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>オブジェクト レイヤーの項目のコレクションを表すクラス。コレクションの実際の保持の実装は、ほとんどが ItemCollection によって行われます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>メソッドは、指定した OSpace 型引数について、基になる CLR 型を返します。パラメーターの DataSpace が OSpace でない場合は、ArgumentException がスローされます。</summary>
      <returns>OSpace 引数の CLR 型。</returns>
      <param name="objectSpaceType">検索対象の OSpace 型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>objectSpaceType パラメーターに指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> に対応する CLR 型を返します。</summary>
      <returns>OSpace 引数の CLR 型。</returns>
      <param name="objectSpaceType">オブジェクト空間の型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>この項目コレクションから、指定された型の項目をすべて返します。</summary>
      <returns>指定された型の項目をすべて格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
      <typeparam name="T">メソッドによって返される型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>プリミティブ型オブジェクトのコレクションを返します。</summary>
      <returns>プリミティブ型オブジェクトのコレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>指定されたアセンブリからメタデータを読み込みます。</summary>
      <param name="assembly">メタデータの読み込み元のアセンブリ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>指定したアセンブリからメタデータを読み込みます。</summary>
      <param name="assembly">メタデータの読み込み元のアセンブリ。</param>
      <param name="edmItemCollection">O 空間メタデータの EDM メタデータ ソース。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>指定されたアセンブリからメタデータを読み込みます。</summary>
      <param name="assembly">メタデータの読み込み元のアセンブリ。</param>
      <param name="edmItemCollection">O 空間メタデータの EDM メタデータ ソース。</param>
      <param name="logLoadMessage">ログ メッセージの送信先のデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>指定した OSpace 列挙型引数の基になる CLR 型を返します。パラメーターの DataSpace が OSpace でない場合、メソッドは false を返し、out パラメーターを null に設定します。</summary>
      <returns>成功した場合は true、失敗した場合は false</returns>
      <param name="objectSpaceType">検索対象の OSpace 列挙型</param>
      <param name="clrType">OSpace 引数の CLR 列挙型</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>objectSpaceType パラメーターに指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> に対応する CLR 型を返します。</summary>
      <returns>検索条件と一致する型が存在した場合は true、それ以外の場合は false。</returns>
      <param name="objectSpaceType">オブジェクト空間の型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />。</param>
      <param name="clrType">CLR 型。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>削除操作に使用できるアクションの一覧を表します</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>他の End に連鎖します</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>アクションなし</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>パラメーターのモードを定義する列挙体</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>入力パラメーター</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>入力および出力パラメーター</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>出力パラメーター</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>戻り値パラメーター</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>関数オーバーロードの解決に使用される型のセマンティクスを定義する列挙。これらのフラグはプロバイダー マニフェストで関数定義によって定義されます。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>指定された引数の型と仮引数の型との間の暗黙的な変換を許可します (既定)。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>指定された引数の型と仮引数の型との間に生じる型の上位変換を許可します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>厳密な等価性のみを使用します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>プリミティブ型を表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> に相当する共通言語ランタイム (CLR) 型を返します。<see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> プロパティは、NULL 値が許容されない型の値を常に返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> に相当する共通言語ランタイム (CLR) 型を表す <see cref="T:System.Type" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> を記述するファセットの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> のファセット記述の一覧を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> に相当する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> に相当する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> の等価の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> と等価の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。</returns>
      <param name="primitiveTypeKind">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> 型の値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>プリミティブ型の一覧を返します。</summary>
      <returns>プリミティブ型の一覧を格納する <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> のプリミティブ型を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 列挙値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> のプリミティブ型を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" /> 列挙値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>EDM で定義されているプリミティブ型</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>バイナリ型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>ブール型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Byte 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>DateTime 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>DateTimeOffset 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>10 進数型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>倍精度型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Geography 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Geography コレクション型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Geography ラインストリング型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Geography マルチラインストリング型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Geography マルチポイント型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Geography マルチポリゴン型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Geography ポイント型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Geography ポリゴン型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Geometry 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Geometry コレクション型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Geometry ラインストリング型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Geometry マルチラインストリング型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Geometry マルチポイント型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Geometry マルチポリゴン型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Geometry ポイント型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Geometry ポリゴン型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Guid 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Int16 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Int32 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Int64 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>SByte 型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>単精度型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>文字列型の種類</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>時刻型の種類</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>概念モデルにおける項目属性の種類を指定します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>項目属性が Extended であるかどうかを示す列挙メンバー。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>項目属性が System であるかどうかを示す列挙メンバー。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>MetadataCollection の読み取り専用ラッパーを表すクラス</summary>
      <typeparam name="T">このコレクション内の項目の型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>指定された ID の項目がコレクションに存在するかどうかを調べます。</summary>
      <returns>検索対象の項目がコレクションに存在する場合は true、それ以外の場合は false。既定値は false です。</returns>
      <param name="identity">項目の ID。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>このコレクションを反復処理できる列挙子を返します。</summary>
      <returns>この <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" /> の反復処理に使用できる <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>指定された ID を使用して、このコレクションから項目を取得します。</summary>
      <returns>このコレクションから取得された項目。</returns>
      <param name="identity">検索対象となる項目の ID。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>このコレクション内の指定された値のインデックスを返します。</summary>
      <returns>このコレクション内の指定された値のインデックス。</returns>
      <param name="value">検索する値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>このコレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns>このコレクションが読み取り専用である場合は true、読み取り専用ではない場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>指定された ID を使用して、このコレクションから項目を取得します。</summary>
      <returns>このコレクションから取得された項目。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>指定された ID を使用して、このコレクションから項目を取得します。</summary>
      <returns>検索条件と一致する項目が存在した場合は true、それ以外の場合は false。</returns>
      <param name="identity">検索対象となる項目の ID。</param>
      <param name="ignoreCase">大文字と小文字を区別せずに検索する場合は true、それ以外の場合は false。</param>
      <param name="item">このメソッドから制御が戻った時点で、この出力パラメーターにはコレクションから取得された項目が格納されます。一致する項目が存在しない場合、この出力パラメーターには NULL が格納されます。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>MetadataCollection の列挙子</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>現在位置にあるメンバーを取得します。</summary>
      <returns>現在位置にあるメンバー。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>この列挙子を破棄します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" /> 型のコレクション内で次のメンバーに移動します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" /> 型のコレクション内で列挙子が移動された場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクションで、列挙子を先頭位置の前に配置します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>現在位置にあるメンバーを取得します</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>このクラスは、リレーションシップの開始側 End と終了側 End を指定する 2 つのエンティティの間の参照に関する制約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>リレーションシップに新しい制約を構築します</summary>
      <param name="fromRole">リレーションシップの作成元のロール</param>
      <param name="toRole">リレーションシップのリンク先または対象のロール</param>
      <param name="fromProperties">制約に参加している to ロールのエンティティ型のプロパティ</param>
      <param name="toProperties">制約に参加している from ロールのエンティティ型のプロパティ</param>
      <exception cref="T:System.ArgumentNullException">いずれかの引数が null の場合は Null 引数例外</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> が定義されている "from ロール" のプロパティの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> が定義されている "from ロール" のプロパティの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> に参加する "from ロール" を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> に参加する "from ロール" を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> が定義されている "to ロール" のプロパティの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> が定義されている "to ロール" のプロパティの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> に参加する "to ロール" を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" /> に参加する "to ロール" を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>
        <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> と <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> の名前の組み合わせを返します。</summary>
      <returns>
        <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> と <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" /> の名前の組み合わせ。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>参照型のクラスを表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> によって参照されるエンティティ型を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" /> によって参照されるエンティティ型を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>RelationshipEndMember クラスの新しいインスタンスを初期化します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>このリレーションシップの End メンバーの処理上の動作を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" /> 値のいずれか。既定値は <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" /> です。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>アソシエーションの EndMember の EntityType にアクセスします。</summary>
      <returns>アソシエーションの EndMember の EntityType。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>このリレーションシップの End メンバーの複数要素の接続性を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 値のいずれか。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>リレーションシップ型の End に関する複数要素の接続性情報を表します</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>下限はゼロ、上限は NULL です</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>下限と上限の両方が 1 です</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>下限はゼロ、上限は 1 です</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>リレーションシップ セットを表すためのクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> のリレーションシップの種類を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> のリレーションシップの種類を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>リレーションシップ型を表します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>このリレーションシップの種類に対する End の一覧を取得します。</summary>
      <returns>このリレーションシップの種類に対する End の一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>Edm 行型を表します</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> オブジェクトを作成するためのファクトリ メソッド。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> オブジェクトの新しい読み取り専用インスタンス。</returns>
      <param name="properties">行型オブジェクトのプロパティ。</param>
      <param name="metadataProperties">関数に追加されるメタデータ プロパティ。null を使用できます。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>現在の型によって定義されたプロパティのコレクションを取得します。</summary>
      <returns>現在の型によって定義されたプロパティのコレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> のプロパティの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" /> のプロパティの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>単純型を表すクラス</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> のストレージ (データベース) セクションを XML にシリアル化するためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>モデルのシリアル化中にエラーが検出されると発生します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> を <see cref="T:System.Xml.XmlWriter" /> にシリアル化します。</summary>
      <returns>モデルをシリアル化できる場合は true、それ以外の場合は false。</returns>
      <param name="dbDatabase">シリアル化する EdmModel。</param>
      <param name="namespaceName">スキーマ要素の名前空間の名前。</param>
      <param name="provider">スキーマ要素のプロバイダー情報。</param>
      <param name="providerManifestToken">スキーマ要素の ProviderManifestToken 情報。</param>
      <param name="xmlWriter">シリアル化する XmlWriter。</param>
      <param name="serializeDefaultNullability">既定値に設定されている場合に NULL 許容属性をシリアル化するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> を <see cref="T:System.Xml.XmlWriter" /> にシリアル化します。</summary>
      <returns>モデルをシリアル化できる場合は true、それ以外の場合は false。</returns>
      <param name="dbDatabase">シリアル化する EdmModel。</param>
      <param name="provider">スキーマ要素のプロバイダー情報。</param>
      <param name="providerManifestToken">スキーマ要素の ProviderManifestToken 情報。</param>
      <param name="xmlWriter">シリアル化する XmlWriter。</param>
      <param name="serializeDefaultNullability">既定値に設定されている場合に NULL 許容属性をシリアル化するかどうかを示す値。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>サーバーによって生成されるプロパティのパターン。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>挿入時にも更新時にも値が生成されます。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>挿入時には値が生成されますが、更新時には変更されません。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>サーバーによって生成されるプロパティではありません。これは、既定の設定です。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>Store 空間の項目のコレクションを表すクラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>指定した XMLReader を使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="xmlReaders">メタデータの作成に使用する XMLReader。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="model">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> のモデル。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>指定したファイル パスを使用して、<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filePaths">メタデータの作成に使用するファイル パス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> を作成するファクトリ メソッド。</summary>
      <returns>エラーが発生しなかった場合は <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> インスタンス。それ以外の場合は null を返します。</returns>
      <param name="xmlReaders">読み込む SSDL 成果物。null は使用できません。</param>
      <param name="filePaths">SSDL 成果物へのパス。エラー メッセージで使用されます。null を使用できます。その場合は、XmlReader のベース URI がパスとして使用されます。</param>
      <param name="resolver">カスタム リゾルバー。現在は DbProviderServices 実装を解決するために使用されます。null の場合は、既定のリゾルバーが使用されます。</param>
      <param name="errors">読み込み中に発生したエラーのコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> オブジェクトのコレクションを返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> オブジェクトのコレクションを表す <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>StoreItemCollection のプロバイダー ファクトリを取得します。</summary>
      <returns>StoreItemCollection のプロバイダー ファクトリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>StoreItemCollection の不変名を取得します。</summary>
      <returns>StoreItemCollection の不変名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>StoreItemCollection のプロバイダー マニフェストを取得します。</summary>
      <returns>StoreItemCollection のプロバイダー マニフェスト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>StoreItemCollection のマニフェスト トークンを取得します。</summary>
      <returns>StoreItemCollection のマニフェスト トークン。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>このコレクションのストア スキーマのバージョンを取得します。</summary>
      <returns>このコレクションのストア スキーマのバージョン。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>構造型を表します</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>この型にメンバーを追加します</summary>
      <param name="member">追加するメンバー</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>この型のメンバーの一覧を取得します。</summary>
      <returns>この型の一連のメンバーを格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>メンバーをこの型から削除します。</summary>
      <param name="member">削除対象のメンバー。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>項目の型情報を表すクラス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> の組み込み型種別を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> の組み込み型種別を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>EdmType とファセットを指定して TypeUsage を作成するためのファクトリ メソッド</summary>
      <returns>新しい TypeUsage インスタンス</returns>
      <param name="edmType">型の使用法の作成対象の EdmType</param>
      <param name="facets">新しい TypeUsage にコピーされるファセット</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>指定されたファセット値を使用してバイナリ型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトを作成します。</summary>
      <returns>指定されたファセット値を使用してバイナリ型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">対応する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトが作成される <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isFixedLength">バイナリ型の長さを固定長に設定する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>指定されたファセット値を使用してバイナリ型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトを作成します。</summary>
      <returns>指定されたファセット値を使用してバイナリ型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">対応する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトが作成される <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isFixedLength">バイナリ型の長さを固定長に設定する場合は true。それ以外の場合は false。</param>
      <param name="maxLength">バイナリ型の最大長。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>パラメーターが表す型の <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> オブジェクトを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">オフセットの測定単位を定義する単純型。</param>
      <param name="precision">
        <see cref="T:System." />DateTimeOffset の単位 (サポートされている小数点以下の桁数に基づく秒の端数表現)。たとえば、有効桁数が 3 の場合、サポートされる単位はミリ秒になります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>パラメーターが表す型の <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> オブジェクトを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">
        <see cref="T:System." />DateTime オブジェクトの測定単位を定義する単純型。</param>
      <param name="precision">
        <see cref="T:System." />DateTimeOffset の単位 (サポートされている小数点以下の桁数に基づく秒の端数表現)。たとえば、有効桁数が 3 の場合、サポートされる単位はミリ秒になります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>制限のない有効桁数ファセット値および小数点以下桁数ファセットを使用して 10 進数型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトを作成します。</summary>
      <returns>制限のない有効桁数ファセット値および小数点以下桁数ファセット値を使用して 10 進数型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">対応する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトが作成される <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>指定されたファセット値を使用して 10 進数型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトを作成します。</summary>
      <returns>指定されたファセット値を使用して 10 進数型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">対応する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトが作成される <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="precision">Decimal 型の有効桁数 (<see cref="T:System.Byte" /> 型として)。</param>
      <param name="scale">Decimal 型の小数点以下桁数 (<see cref="T:System.Byte" /> 型として)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>指定された概念モデルの型の <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトを作成します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> の既定のファセット値を持つ <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
      <param name="edmType">対応する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトが作成される <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>指定されたファセット値および無制限の MaxLength を使用して文字列型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトを作成します。</summary>
      <returns>指定されたファセット値および無制限の MaxLength を使用して文字列型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">対応する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトが作成される <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isUnicode">文字列型の文字エンコード標準を Unicode に設定する場合は true。それ以外の場合は false。</param>
      <param name="isFixedLength">文字列型の長さを固定長に設定する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>指定されたファセット値を使用して文字列型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトを作成します。</summary>
      <returns>指定されたファセット値を使用して文字列型を記述する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">対応する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクトが作成される <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />。</param>
      <param name="isUnicode">文字列型の文字エンコード標準を Unicode に設定する場合は true。それ以外の場合は false。</param>
      <param name="isFixedLength">文字列型の文字エンコード標準を Unicode に設定する場合は true。それ以外の場合は false。</param>
      <param name="maxLength">文字列型の長さを固定長に設定する場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>パラメーターが表す型の <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> オブジェクトを作成します。</summary>
      <returns>
        <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> オブジェクト。</returns>
      <param name="primitiveType">
        <see cref="T:System." />DateTime オブジェクトの測定単位を定義する単純型。</param>
      <param name="precision">
        <see cref="T:System." />DateTimeOffset の単位 (サポートされている小数点以下の桁数に基づく秒の端数表現)。たとえば、有効桁数が 3 の場合、サポートされる単位はミリ秒になります。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> によって記述される型情報を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> によって記述される型情報を表す <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> によって記述される型のファセットの一覧を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> によって記述される型のファセットの一覧を格納する <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" /> 型のコレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> が、指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> のサブタイプかどうかを確認します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> が、指定された <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> のサブタイプである場合は true。それ以外の場合は false。</returns>
      <param name="typeUsage">確認する <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> オブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>プロバイダー型のモデル型の使用法を返します</summary>
      <returns>モデル (CSpace) 型の使用法</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> によって記述された型の完全な名前を返します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> によって表される型の完全名の文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>ELinq クエリをキャッシュします</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`10" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`11" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg9">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg9 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`12" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg9">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg9 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg10">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg10 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`13" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg9">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg9 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg10">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg10 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg11">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg11 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`14" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg9">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg9 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg10">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg10 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg11">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg11 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg12">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg12 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`15" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg9">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg9 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg10">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg10 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg11">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg11 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg12">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg12 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg13">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg13 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`16" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg9">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg9 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg10">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg10 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg11">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg11 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg12">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg12 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg13">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg13 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg14">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg14 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`17" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg8">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg8 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg9">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg9 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg10">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg10 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg11">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg11 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg12">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg12 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg13">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg13 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg14">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg14 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg15">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg15 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`2" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`3" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`4" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`5" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`6" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`7" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`8" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>コンパイル済みの LINQ to Entities クエリを表す新しいデリゲートを作成します。</summary>
      <returns>コンパイル済みの LINQ to Entities クエリを表すジェネリック デリゲート (<see cref="T:System.Func`9" />)。</returns>
      <param name="query">コンパイルするラムダ式。</param>
      <typeparam name="TArg0">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の派生型。</typeparam>
      <typeparam name="TArg1">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg1 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg2">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg2 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg3">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg3 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg4">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg4 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg5">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg5 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg6">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg6 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TArg7">このメソッドから返されたデリゲートの実行時に渡す必要のあるパラメーターの型を表します。TArg7 はプリミティブ型である必要があります。</typeparam>
      <typeparam name="TResult">
        <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" /> メソッドによって返されたデリゲートを実行することによって返される T 型のクエリ結果。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>現在エンティティのプロパティに割り当てられている値です。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>オブジェクト データの元の値へのアクセスを提供します。DbUpdatableDataRecord は、オブジェクトの元の値を更新できるようにするメソッドを実装します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>データ レコード情報を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>レコード内のフィールド数を取得します。</summary>
      <returns>フィールド数を示す整数値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>フィールド値を Boolean として取得します。</summary>
      <returns>Boolean としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>フィールド値をバイトとして取得します。</summary>
      <returns>バイトとしてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>フィールド値をバイト配列として取得します。</summary>
      <returns>コピーされたバイト数。</returns>
      <param name="i">フィールドの序数。</param>
      <param name="dataIndex">データのコピーを開始する位置を示すインデックス。</param>
      <param name="buffer">データのコピー先バッファー。</param>
      <param name="bufferIndex">コピーを開始するコピー先バッファー内のインデックス。</param>
      <param name="length">コピーするバイト数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>フィールド値を文字として取得します。</summary>
      <returns>文字としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>フィールド値を文字配列として取得します。</summary>
      <returns>コピーされた文字数。</returns>
      <param name="i">フィールドの序数。</param>
      <param name="dataIndex">データのコピーを開始する位置を示すインデックス。</param>
      <param name="buffer">データのコピー先バッファー。</param>
      <param name="bufferIndex">コピーを開始するコピー先バッファー内のインデックス。</param>
      <param name="length">コピーする文字数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Common.DbDataReader" /> として取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Data.Common.DbDataRecord" /> として取得します。</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataRecord" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>フィールドのデータ型の名前を取得します。</summary>
      <returns>フィールドのデータ型の名前。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>フィールド値を <see cref="T:System.DateTime" /> として取得します。</summary>
      <returns>
        <see cref="T:System.DateTime" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Common.DbDataReader" /> として取得します</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>フィールド値を decimal として取得します。</summary>
      <returns>decimal としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>フィールド値を double として取得します。</summary>
      <returns>double としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>フィールドの型を取得します。</summary>
      <returns>フィールドの型。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>フィールド値を float として取得します。</summary>
      <returns>float としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Guid" /> として取得します。</summary>
      <returns>
        <see cref="T:System.Guid" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Int16" /> として取得します。</summary>
      <returns>
        <see cref="T:System.Int16" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Int32" /> として取得します。</summary>
      <returns>
        <see cref="T:System.Int32" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Int64" /> として取得します。</summary>
      <returns>
        <see cref="T:System.Int64" /> としてのフィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>フィールドの名前を取得します。</summary>
      <returns>フィールドの名前。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>フィールドの名前を使用して、フィールドの序数を取得します。</summary>
      <returns>フィールドの序数。</returns>
      <param name="name">フィールドの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>フィールドの値を取得します。</summary>
      <returns>フィールド値。</returns>
      <param name="ordinal">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>フィールド値を文字列として取得します。</summary>
      <returns>フィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>フィールドの値を取得します。</summary>
      <returns>フィールド値。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>オブジェクトの配列に現在のレコードのフィールド値を設定します。</summary>
      <returns>返されたフィールド値の数。</returns>
      <param name="values">フィールド値を格納するオブジェクトの配列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>指定されたフィールドが <see cref="T:System.DBNull" /> に設定されているかどうかを返します。</summary>
      <returns>フィールドが <see cref="T:System.DBNull" /> に設定されている場合は true、それ以外の場合は false。</returns>
      <param name="i">フィールドの序数。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>指定されたフィールドの序数を持つ値を返します。</summary>
      <returns>指定されたフィールドの序数を持つ値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>指定したフィールド名を持つ値を取得します。</summary>
      <returns>フィールド値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>フィールドを <see cref="T:System.DBNull" /> 値に設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>レコード内のフィールドの値を設定します。</summary>
      <param name="ordinal">フィールドの序数。</param>
      <param name="value">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>レコード内の複数のフィールド値を設定します。</summary>
      <returns>設定されたフィールドの数。</returns>
      <param name="values">フィールドの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>フィールド値を <see cref="T:System.Data.IDataReader" /> として取得します。</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> としてのフィールド値。</returns>
      <param name="ordinal">フィールドの序数。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities クエリで EDM の正規関数を公開する共通言語ランタイム (CLR: Common Language Runtime) のメソッドを提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した日数を日付/時刻に加算する AddDays EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する日数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した日数を日付/時刻に加算する AddDays EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する日数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した時間数を日付/時刻に加算する AddHours EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した時間数を日付/時刻に加算する AddHours EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した時間を期間に加算する AddHours EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する時間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したマイクロ秒数を日付/時刻に加算する AddMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するマイクロ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したマイクロ秒数を日付/時刻に加算する AddMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するマイクロ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したマイクロ秒数を期間に加算する AddMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するマイクロ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したミリ秒数を日付/時刻に加算する AddMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するミリ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したミリ秒数を日付/時刻に加算する AddMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するミリ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したミリ秒数を期間に加算する AddMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するミリ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した分数を日付/時刻に加算する AddMinutes EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する分数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した分数を日付/時刻に加算する AddMinutes EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する分数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した分数を期間に加算する AddMinutes EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する分数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した月数を日付/時刻に加算する AddMonths EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する月数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した月数を日付/時刻に加算する AddMonths EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">加算する月数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したナノ秒数を日付/時刻に加算する AddNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するナノ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したナノ秒数を日付/時刻に加算する AddNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するナノ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定したナノ秒数を期間に加算する AddNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算するナノ秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した秒数を日付/時刻に加算する AddSeconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した秒数を日付/時刻に加算する AddSeconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した秒数を期間に加算する AddSeconds EDM 正規関数を呼び出します。</summary>
      <returns>生成される期間。</returns>
      <param name="timeValue">入力する日付と時刻。</param>
      <param name="addValue">加算する秒数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した年数を日付/時刻に加算する AddYears EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">追加する年数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した年数を日付/時刻に加算する AddYears EDM 正規関数を呼び出します。</summary>
      <returns>生成される日付/時刻。</returns>
      <param name="dateValue">入力する日付と時刻。</param>
      <param name="addValue">追加する年数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、入力を非 Unicode 文字列として処理する演算子として機能します。</summary>
      <returns>非 Unicode 文字列として処理される入力文字列。</returns>
      <param name="value">入力文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、入力を Unicode 文字列として処理する演算子として機能します。</summary>
      <returns>Unicode 文字列として処理される入力文字列。</returns>
      <param name="value">入力文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、新しい <see cref="T:System.DateTime" /> オブジェクトを作成する CreateDateTime EDM 正規関数を呼び出します。</summary>
      <returns>新しい日付と時刻。</returns>
      <param name="year">年。</param>
      <param name="month">月 (1 ベース)。</param>
      <param name="day">日 (1 ベース)。</param>
      <param name="hour">時間。</param>
      <param name="minute">分。</param>
      <param name="second">秒 (必要に応じて秒の端数を含む)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、新しい <see cref="T:System.DateTimeOffset" /> オブジェクトを作成する CreateDateTimeOffset EDM 正規関数を呼び出します。</summary>
      <returns>新しい日付と時刻。</returns>
      <param name="year">年。</param>
      <param name="month">月 (1 ベース)。</param>
      <param name="day">日 (1 ベース)。</param>
      <param name="hour">時間。</param>
      <param name="minute">分。</param>
      <param name="second">秒 (必要に応じて秒の端数を含む)。</param>
      <param name="timeZoneOffset">新しい日付のタイム ゾーン オフセット部分。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、新しい <see cref="T:System.TimeSpan" /> オブジェクトを作成する CreateTime EDM 正規関数を呼び出します。</summary>
      <returns>新しい期間。</returns>
      <param name="hour">時間。</param>
      <param name="minute">分。</param>
      <param name="second">秒 (必要に応じて秒の端数を含む)。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間を計算する DiffDays EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の日数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間を計算する DiffDays EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の日数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の時間数を計算する DiffHours EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の時間数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の時間数を計算する DiffHours EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の時間数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間の時間数を計算する DiffHours EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間の時間数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のマイクロ秒数を計算する DiffMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のマイクロ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のマイクロ秒数を計算する DiffMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のマイクロ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間のマイクロ秒数を計算する DiffMicroseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間のマイクロ秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のミリ秒数を計算する DiffMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のミリ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のミリ秒数を計算する DiffMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のミリ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間のミリ秒数を計算する DiffMilliseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間のミリ秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の分数を計算する DiffMinutes EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の分数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の分数を計算する DiffMinutes EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の分数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間の分数を計算する DiffMinutes EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間の分数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の月数を計算する DiffMonths EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の月数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の月数を計算する DiffMonths EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の月数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のナノ秒数を計算する DiffNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のナノ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間のナノ秒数を計算する DiffNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間のナノ秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間のナノ秒数を計算する DiffNanoseconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間のナノ秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の秒数を計算する DiffSeconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の秒数を計算する DiffSeconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の秒数。</returns>
      <param name="timeValue1">最初の日付と時刻。</param>
      <param name="timeValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの期間の間の秒数を計算する DiffSeconds EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の期間の間の秒数。</returns>
      <param name="timeValue1">最初の期間。</param>
      <param name="timeValue2">2 番目の期間。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の年数を計算する DiffYears EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の年数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、2 つの日付/時刻の間の年数を計算する DiffYears EDM 正規関数を呼び出します。</summary>
      <returns>最初と 2 番目の日付/時刻の間の年数。</returns>
      <param name="dateValue1">最初の日付と時刻。</param>
      <param name="dateValue2">2 番目の日付と時刻。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した日付/時刻が UTC からオフセットされる分数を返す GetTotalOffsetMinutes EDM 関数を起動します。この値は通常、+780 ～ -780 (+ 13 時間～ - 13 時間) の間になります。</summary>
      <returns>UTC からの入力のオフセット。</returns>
      <param name="dateTimeOffsetArgument">使用する日付/時刻値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、文字列内の左端の文字を指定数返す Left EDM 正規関数を呼び出します。</summary>
      <returns>入力文字列の左から要求された文字数を含む文字列。</returns>
      <param name="stringArgument">入力文字列。</param>
      <param name="length">返される文字数</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定文字列の文字の順番を逆にして返す Reverse EDM 正規関数を呼び出します。</summary>
      <returns>入力文字列の文字の順序を逆にした結果。</returns>
      <param name="stringArgument">入力文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、文字列内の右端の文字を指定数返す Right EDM 正規関数を呼び出します。</summary>
      <returns>入力文字列の右から要求された文字数を含む文字列。</returns>
      <param name="stringArgument">入力文字列。</param>
      <param name="length">返される文字数</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの標準偏差を計算する StDev EDM 正規関数を呼び出します。</summary>
      <returns>標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の標準偏差を計算する StDevP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の標準偏差。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した値を指定桁数に切り捨てる Truncate EDM 正規関数を呼び出します。</summary>
      <returns>切り捨てられた値。</returns>
      <param name="value">切り捨てる値。</param>
      <param name="digits">保持する桁数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定した値を指定桁数に切り捨てる Truncate EDM 正規関数を呼び出します。</summary>
      <returns>切り捨てられた値。</returns>
      <param name="value">切り捨てる値。</param>
      <param name="digits">保持する桁数。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定日から時刻部分を除いた値を返す TruncateTime EDM 正規関数を呼び出します。</summary>
      <returns>入力された日付から時刻部分を除いた値。</returns>
      <param name="dateValue">使用する日付/時刻値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、指定日から時刻部分を除いた値を返す TruncateTime EDM 正規関数を呼び出します。</summary>
      <returns>入力された日付から時刻部分を除いた値。</returns>
      <param name="dateValue">使用する日付/時刻値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、コレクションの分散を計算する Var EDM 正規関数を呼び出します。</summary>
      <returns>分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>LINQ to Entities クエリの一部として使用された場合、このメソッドは、母集団の分散を計算する VarP EDM 正規関数を呼び出します。</summary>
      <returns>母集団の分散。</returns>
      <param name="collection">計算を実行する対象となるコレクション。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>クエリを実行するためのオプションを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" /> の新しいインスタンスを作成します。</summary>
      <param name="mergeOption">エンティティ結果に使用するマージ オプション。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" /> の新しいインスタンスを作成します。</summary>
      <param name="mergeOption">エンティティ結果に使用するマージ オプション。</param>
      <param name="streaming">クエリがストリーミングまたはバッファリングの場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コードを返します。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>エンティティ結果に使用するマージ オプションを取得します。</summary>
      <returns>エンティティ結果に使用するマージ オプション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>指定したオブジェクトが等しいかどうかを判断します。</summary>
      <returns>2 つのオブジェクトが等しい場合は true、それ以外の場合は false。</returns>
      <param name="left">比較の左辺のオブジェクト。</param>
      <param name="right">比較の右辺のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>指定したオブジェクトが等しくないかどうかを判断します。</summary>
      <returns>2 つのオブジェクトが等しくない場合は true、それ以外の場合は false。</returns>
      <param name="left">比較の左辺のオブジェクト。</param>
      <param name="right">比較の右辺のオブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>クエリがストリーミングか、またはバッファリングか示す値を取得します。</summary>
      <returns>クエリがストリーミングである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>結果セットのメンバーシップへの変更を許可する IQueryable の実装の動作を定義します。</summary>
      <typeparam name="TEntity">クエリ可能なものから返されるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>セットに対して、新しいエンティティを表すオブジェクトを追加する必要があることを通知します。</summary>
      <param name="entity">セットに追加する新しいオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>セットに対して、既存のエンティティを表すオブジェクトを追加する必要があることを通知します。</summary>
      <param name="entity">セットに追加する既存のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>既存のエンティティを表すオブジェクトをセットから削除する必要があることを通知します。</summary>
      <param name="entity">セットから削除する既存のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>既存のエンティティを表すオブジェクトをセットから切り離す必要があることを通知します。</summary>
      <param name="entity">セットから切り離すオブジェクト。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>データベースから読み込まれた新しいオブジェクトを、既にメモリ内にあるオブジェクトにマージする各種の方法です。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>新しい (一意の最上位の) 行のみを追加します。これが既定の動作です。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>キャッシュは変更されません。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>LoadOption.OverwriteChanges と同じ動作。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>LoadOption.PreserveChanges と同じ動作。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext は、CLR とデータベース間の接続をカプセル化し、作成、読み取り、更新、削除など、各種の操作のゲートウェイとして機能する、最上位レベルのオブジェクトです。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>指定された接続を使用して、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。構築時に、メタデータ ワークスペースが <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> オブジェクトから抽出されます。</summary>
      <param name="connection">モデルおよびデータ ソース接続への参照を含む <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</param>
      <exception cref="T:System.ArgumentNullException">connection が null です。</exception>
      <exception cref="T:System.ArgumentException">connection が無効であるか、メタデータ ワークスペースが無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>指定した接続とメタデータ ワークスペースを使用して ObjectContext を作成します。</summary>
      <param name="connection">ストアへの接続</param>
      <param name="contextOwnsConnection">true に設定した場合、コンテキストが破棄されたときに接続も破棄されます。それ以外の場合は、呼び出し元が接続を破棄する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>指定された接続およびエンティティ コンテナー名を使用して、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connection">モデルおよびデータ ソース接続への参照を含む <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />。</param>
      <param name="defaultContainerName">既定のエンティティ コンテナーの名前。このメソッドで defaultContainerName を設定すると、プロパティが読み取り専用になります。</param>
      <exception cref="T:System.ArgumentNullException">connection が null です。</exception>
      <exception cref="T:System.ArgumentException">connection、defaultContainerName、またはメタデータ ワークスペースが無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>指定された接続文字列および既定のエンティティ コンテナー名を使用して、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionString">メタデータ情報へのアクセスも可能にする接続文字列。</param>
      <exception cref="T:System.ArgumentNullException">connectionString が null です。</exception>
      <exception cref="T:System.ArgumentException">connectionString が無効であるか、メタデータ ワークスペースが無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>指定された接続文字列およびエンティティ コンテナー名を使用して、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionString">メタデータ情報へのアクセスも可能にする接続文字列。</param>
      <param name="defaultContainerName">既定のエンティティ コンテナーの名前。このメソッドで defaultContainerName を設定すると、プロパティが読み取り専用になります。</param>
      <exception cref="T:System.ArgumentNullException">connectionString が null です。</exception>
      <exception cref="T:System.ArgumentException">connectionString、defaultContainerName、またはメタデータ ワークスペースが無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>オブジェクト コンテキストでのオブジェクトに対するすべての変更を受け入れます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>オブジェクトをオブジェクト コンテキストに追加します。</summary>
      <param name="entitySetName">必要に応じてエンティティ コンテナー名で修飾できるエンティティ セット名を表します。</param>
      <param name="entity">追加する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">entity パラメーターが null か、entitySetName が適切ではありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>指定されたオブジェクトのスカラー値を、同じキーを持つ <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> のオブジェクトにコピーします。</summary>
      <returns>更新後のオブジェクト。</returns>
      <param name="entitySetName">オブジェクトが属しているエンティティ セットの名前。</param>
      <param name="currentEntity">元のオブジェクトに適用するプロパティ更新を含むデタッチしたオブジェクト。currentEntity のエンティティ キーは、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 内のエントリの <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> プロパティと一致する必要があります。</param>
      <typeparam name="TEntity">オブジェクトのエンティティ型。</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName または current が null です。</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName からの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> がオブジェクト <see cref="T:System.Data.Entity.Core.EntityKey" /> の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> と一致しないか、オブジェクトが <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> にないか、オブジェクトが <see cref="F:System.Data.Entity.EntityState.Detached" /> 状態であるか、指定されたオブジェクトのエンティティ キーが無効か、いずれかのケースに該当します。</exception>
      <exception cref="T:System.ArgumentException">entitySetName が空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>指定されたオブジェクトのスカラー値を、同じキーを持つ <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> のオブジェクトの一連の元の値にコピーします。</summary>
      <returns>更新後のオブジェクト。</returns>
      <param name="entitySetName">オブジェクトが属しているエンティティ セットの名前。</param>
      <param name="originalEntity">オブジェクトに適用する元の値を含む、デタッチされているオブジェクト。originalEntity のエンティティ キーは、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 内のエントリの <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> プロパティと一致する必要があります。</param>
      <typeparam name="TEntity">エンティティ オブジェクトの型。</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName または original が null です。</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName からの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> がオブジェクト <see cref="T:System.Data.Entity.Core.EntityKey" /> の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> に一致しないか、オブジェクトの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> が <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> で見つからないか、オブジェクトが <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Detached" /> 状態であるか、指定されたオブジェクトのエンティティキーが無効またはプロパティが変更されているか、いずれかのケースに該当します。</exception>
      <exception cref="T:System.ArgumentException">entitySetName が空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>デタッチしたオブジェクトのプロパティの変更を、オブジェクト コンテキストに既にアタッチされているオブジェクトに適用します。</summary>
      <param name="entitySetName">オブジェクトが属しているエンティティ セットの名前。</param>
      <param name="changed">元のオブジェクトに適用するプロパティ更新を含むデタッチしたオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">entitySetName が null または空の文字列の場合、あるいは変更が null の場合。</exception>
      <exception cref="T:System.InvalidOperationException">entitySetName からの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> がオブジェクト <see cref="T:System.Data.Entity.Core.EntityKey" /> の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> に一致しない場合、またはエンティティが <see cref="F:System.Data.Entity.EntityState.Modified" /> または <see cref="F:System.Data.Entity.EntityState.Unchanged" /> 以外の状態である場合、または元のオブジェクトがコンテキストに関連付けられていない場合。</exception>
      <exception cref="T:System.ArgumentException">changed オブジェクトの型が元のオブジェクトの型とは異なる場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>オブジェクトがエンティティ キーを持つ場合にオブジェクトまたはオブジェクト グラフをオブジェクト コンテキストにアタッチします。</summary>
      <param name="entity">アタッチするオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">entity が null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ キーが無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>オブジェクトまたはオブジェクト グラフをオブジェクト コンテキストの特定のエンティティ セットにアタッチします。</summary>
      <param name="entitySetName">必要に応じてエンティティ コンテナー名で修飾できるエンティティ セット名を表します。</param>
      <param name="entity">アタッチする <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">entity が null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ セットが無効、オブジェクトに一時キーが存在する、オブジェクトに <see cref="T:System.Data.Entity.Core.EntityKey" /> が存在し、メソッドの引数として渡されたエンティティ セットと <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> が一致しない、オブジェクトに <see cref="T:System.Data.Entity.Core.EntityKey" /> が存在せず、エンティティ セットが提供されない、オブジェクト グラフのいずれかのオブジェクトに一時的な <see cref="T:System.Data.Entity.Core.EntityKey" /> が存在する、オブジェクト グラフのいずれかのオブジェクトに無効な <see cref="T:System.Data.Entity.Core.EntityKey" /> が存在する (キーの値がオブジェクトの値と一致しないなど)、指定された entitySetName 名とエンティティ コンテナー名からエンティティ セットが見つからない、オブジェクト グラフのいずれかのオブジェクトが既に別の状態マネージャーに存在する、のいずれかのケースが該当します。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>すべてのオブジェクト コンテキスト操作のタイムアウト値の秒数を取得または設定します。null 値は、基になるプロバイダーの既定値が使用されることを示します。</summary>
      <returns>タイムアウト値の秒数を表す <see cref="T:System.Int32" /> 値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>オブジェクト コンテキストで使用される接続を取得します。</summary>
      <returns>接続を表す <see cref="T:System.Data.Common.DbConnection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の動作に影響するオプションを格納する <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> インスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の動作に影響するオプションを格納する <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>現在のデータ ソース接続と <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> のメタデータを使用して、データベースを作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 内のメタデータに対するスキーマ オブジェクト (テーブル、主キー、外部キー) を作成するデータ定義言語 (DDL) スクリプトを生成します。<see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> は、ストア スキーマ定義言語 (SSDL) ファイルからメタデータを読み込みます。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> 内のメタデータに対するスキーマ オブジェクトを作成する DDL スクリプト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>特定のオブジェクトのエンティティ キーを作成するか、エンティティ キーが既に存在する場合はそのエンティティ キーを返します。</summary>
      <returns>オブジェクトの <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
      <param name="entitySetName">エンティティ オブジェクトが属しているエンティティ セットの完全修飾名。</param>
      <param name="entity">エンティティ キーを取得するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">いずれかのパラメーターが null の場合。</exception>
      <exception cref="T:System.ArgumentException">entitySetName が空である、エンティティ オブジェクトの型がエンティティ セットに存在しない、entitySetName が完全修飾されてない、のいずれかのケースが該当する場合。</exception>
      <exception cref="T:System.InvalidOperationException">指定されたパラメーターに基づいてエンティティ キーを正常に作成できない場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>要求された型のインスタンスを作成して返します。</summary>
      <returns>要求された T 型のインスタンス、または Entity Framework で T を使用できるようにする派生型のインスタンス。返されるオブジェクトは、要求された型のインスタンス、または Entity Framework で要求された型を使用できるようにする派生型のインスタンスです。</returns>
      <typeparam name="T">取得するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>指定したエンティティ型のオブジェクトを照会、追加、変更、および削除するために使用される新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> インスタンスを作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> インスタンス。</returns>
      <typeparam name="TEntity">要求する <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> のエンティティ型。</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> プロパティが設定されていないか、指定された型が複数のエンティティ セットに属しています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>指定したエンティティ セット名を使用して、指定したエンティティ型のオブジェクトを照会、作成、変更、および削除するために使用される新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> インスタンスを作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> インスタンス。</returns>
      <param name="entitySetName">返される <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> のエンティティ セットの名前。<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> で <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> プロパティが設定されていない場合は、文字列を既定のコンテナー名で修飾する必要があります。</param>
      <typeparam name="TEntity">要求する <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> のエンティティ型。</typeparam>
      <exception cref="T:System.InvalidOperationException">entitySetName からの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> がオブジェクト <see cref="T:System.Data.Entity.Core.EntityKey" /> の <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> に一致しない、または <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> プロパティが <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に設定されておらず名前も entitySetName パラメーターの一部として修飾されていない、または指定された型が複数のエンティティ セットに属している、のいずれかのケースが該当します。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>列挙体で指定されたそれぞれの型に対して、Entity Framework で使用できる同等の型を生成します。</summary>
      <param name="types">概念モデルに対応付けられるカスタム データ クラスを表す <see cref="T:System.Type" /> オブジェクトの列挙体。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>指定されたクエリ文字列を使用して、現在のオブジェクト コンテキストで <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> を作成します。</summary>
      <returns>指定された型の <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <param name="queryString">実行するクエリ文字列。</param>
      <param name="parameters">クエリに渡すパラメーター。</param>
      <typeparam name="T">返された <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> のエンティティ型。</typeparam>
      <exception cref="T:System.ArgumentNullException">queryString または parameters パラメーターが null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>現在のストア接続でデータベースとして指定されているデータベースがストアに存在するかどうかを確認します。実際の作業のほとんどは、現在のストア接続の DbProviderServices 実装によって実行されます。</summary>
      <returns>データベースが存在する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>既定のコンテナー名を取得または設定します。</summary>
      <returns>既定のコンテナー名を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>現在のデータ ソース接続でデータベースとして指定されているデータベースを削除します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>オブジェクトを削除の対象としてマークします。</summary>
      <param name="entity">削除するエンティティを示すオブジェクト。オブジェクトの状態は、<see cref="F:System.Data.Entity.EntityState.Detached" /> 以外であればどの状態でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>オブジェクトをオブジェクト コンテキストから削除します。</summary>
      <param name="entity">デタッチするオブジェクト。entity のみが削除されます。同じ <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> によって追跡されている関連オブジェクトがある場合、このようなオブジェクトは自動的にはデタッチされません。</param>
      <exception cref="T:System.ArgumentNullException">entity が null です。</exception>
      <exception cref="T:System.InvalidOperationException">entity がこの <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に関連付けられていません (たとえば、新しく作成されてまだどのコンテキストにも関連付けられていないか、他のコンテキストを通じて取得されたか、既にデタッチされていることが考えられます)。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の変更が、<see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> によって追跡されるすべてのオブジェクトの変更と同期されるようにします。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>オブジェクト コンテキストで使用されるリソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>オブジェクト コンテキストで使用されるリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>既定のコンテナーで指定した関数を実行します。</summary>
      <returns>この関数の実行結果を表すオブジェクト。</returns>
      <param name="functionName">関数名。コンテナーを含めるか (ContainerName.FunctionName など)、関数名だけを含めることができます (DefaultContainerName がわかっている場合)。</param>
      <param name="executionOptions">この関数を実行するためのオプション。</param>
      <param name="parameters">関数に使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">関数の結果の要素型。</typeparam>
      <exception cref="T:System.ArgumentException">関数が null または空の場合</exception>
      <exception cref="T:System.InvalidOperationException">関数が無効な場合 (構文が無効であるか、関数が存在しないか、戻り値の型に T との互換性がない関数を参照しています)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>データ ソースで定義され、概念モデルで表現される指定のストアド プロシージャまたは関数を、パラメーターとマージ オプションを指定して実行します。型指定された <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> を返します。</summary>
      <returns>ストアド プロシージャによって返されるデータの <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">ストアド プロシージャまたは関数の名前。名前には、&lt;Container Name&gt;.&lt;Function Name&gt; などのコンテナー名が含まれます。既定のコンテナー名がわかっている場合は、関数名のみが必要です。</param>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> オブジェクトの配列。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">データ ソースに対して関数が実行されたときに返された <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> のエンティティ型。この型は、<see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" /> を実装している必要があります。</typeparam>
      <exception cref="T:System.ArgumentException">関数が null または空であるか、関数が見つかりません。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ リーダーがこの関数をサポートしていないか、リーダーと関数の型が一致しません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>データ ソースで定義され、概念モデルにマップされたストアド プロシージャまたは関数を、パラメーターを指定して実行します。型指定された <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> を返します。</summary>
      <returns>ストアド プロシージャによって返されるデータの <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="functionName">ストアド プロシージャまたは関数の名前。名前には、&lt;Container Name&gt;.&lt;Function Name&gt; などのコンテナー名が含まれます。既定のコンテナー名がわかっている場合は、関数名のみが必要です。</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> オブジェクトの配列。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">データ ソースに対して関数が実行されたときに返された <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> のエンティティ型。この型は、<see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" /> を実装している必要があります。</typeparam>
      <exception cref="T:System.ArgumentException">関数が null または空であるか、関数が見つかりません。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ リーダーがこの関数をサポートしていないか、リーダーと関数の型が一致しません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>データ ソースで定義され、概念モデルで表現されるストアド プロシージャまたは関数を実行します。関数から返される結果は破棄され、実行によって影響を受けた行の数が返されます。</summary>
      <returns>影響を受けた行数。</returns>
      <param name="functionName">ストアド プロシージャまたは関数の名前。名前には、&lt;Container Name&gt;.&lt;Function Name&gt; などのコンテナー名が含まれます。既定のコンテナー名がわかっている場合は、関数名のみが必要です。</param>
      <param name="parameters">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> オブジェクトの配列。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <exception cref="T:System.ArgumentException">関数が null または空であるか、関数が見つかりません。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ リーダーがこの関数をサポートしていないか、リーダーと関数の型が一致しません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>既存の接続を使用して、データ ソースに対して任意のコマンドを直接実行します。コマンドは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>影響を受けた行数。</returns>
      <param name="transactionalBehavior">このコマンドのトランザクションの作成を制御します。</param>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するコマンド。</param>
      <param name="parameters">クエリに使用するパラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>既存の接続を使用して、データ ソースに対して任意のコマンドを直接実行します。コマンドは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>影響を受けた行数。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するコマンド。</param>
      <param name="parameters">クエリに使用するパラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>既存の接続を使用して、データ ソースに対して任意のコマンドを直接、非同期的に実行します。コマンドは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、影響を受けた行の数が示されます。</returns>
      <param name="transactionalBehavior">このコマンドのトランザクションの作成を制御します。</param>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するコマンド。</param>
      <param name="parameters">クエリに使用するパラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>既存の接続を使用して、データ ソースに対して任意のコマンドを直接、非同期的に実行します。コマンドは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、影響を受けた行の数が示されます。</returns>
      <param name="transactionalBehavior">このコマンドのトランザクションの作成を制御します。</param>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するコマンド。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">クエリに使用するパラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>既存の接続を使用して、データ ソースに対して任意のコマンドを直接、非同期的に実行します。コマンドは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、影響を受けた行の数が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するコマンド。</param>
      <param name="parameters">クエリに使用するパラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>既存の接続を使用して、データ ソースに対して任意のコマンドを直接、非同期的に実行します。コマンドは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、影響を受けた行の数が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するコマンド。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">クエリに使用するパラメーターの値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>データ ソースに対してクエリを直接実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。コンテキストによる結果の追跡は行われません。結果を追跡する場合は、エンティティ セット名を指定するオーバーロードを使用してください。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 型のオブジェクトの列挙体。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="executionOptions">このクエリを実行するためのオプション。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>データ ソースに対してクエリを直接実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。コンテキストによる結果の追跡は行われません。結果を追跡する場合は、エンティティ セット名を指定するオーバーロードを使用してください。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 型のオブジェクトの列挙体。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>データ ソースに対してクエリを直接実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。エンティティ セット名を指定した場合、コンテキストによって結果が追跡されます。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 型のオブジェクトの列挙体。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="entitySetName">TResult 型のエンティティ セット。エンティティ セットの名前を指定しない場合、結果は追跡されません。</param>
      <param name="executionOptions">このクエリを実行するためのオプション。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>データ ソースに対してクエリを直接実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。エンティティ セット名を指定した場合、コンテキストによって結果が追跡されます。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQuery&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>
        <paramref name="TElement" /> 型のオブジェクトの列挙体。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="entitySetName">TResult 型のエンティティ セット。エンティティ セットの名前を指定しない場合、結果は追跡されません。</param>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>データ ソースに対してクエリを直接、非同期的に実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。コンテキストによる結果の追跡は行われません。結果を追跡する場合は、エンティティ セット名を指定するオーバーロードを使用してください。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="TElement" /> 型のオブジェクトの列挙体が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="executionOptions">このクエリを実行するためのオプション。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>データ ソースに対してクエリを直接、非同期的に実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。コンテキストによる結果の追跡は行われません。結果を追跡する場合は、エンティティ セット名を指定するオーバーロードを使用してください。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="TElement" /> 型のオブジェクトの列挙体が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="executionOptions">このクエリを実行するためのオプション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>データ ソースに対してクエリを直接、非同期的に実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。コンテキストによる結果の追跡は行われません。結果を追跡する場合は、エンティティ セット名を指定するオーバーロードを使用してください。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="TElement" /> 型のオブジェクトの列挙体が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>データ ソースに対してクエリを直接、非同期的に実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。エンティティ セット名を指定した場合、コンテキストによって結果が追跡されます。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="TElement" /> 型のオブジェクトの列挙体が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="entitySetName">TResult 型のエンティティ セット。エンティティ セットの名前を指定しない場合、結果は追跡されません。</param>
      <param name="executionOptions">このクエリを実行するためのオプション。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>データ ソースに対してクエリを直接、非同期的に実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。エンティティ セット名を指定した場合、コンテキストによって結果が追跡されます。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="TElement" /> 型のオブジェクトの列挙体が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="entitySetName">TResult 型のエンティティ セット。エンティティ セットの名前を指定しない場合、結果は追跡されません。</param>
      <param name="executionOptions">このクエリを実行するためのオプション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>データ ソースに対してクエリを直接、非同期的に実行し、型指定された結果のシーケンスを返します。クエリは、SQL などのサーバーのネイティブなクエリ言語を使用して指定します。コンテキストによる結果の追跡は行われません。結果を追跡する場合は、エンティティ セット名を指定するオーバーロードを使用してください。SQL を受け入れる API と同様に、すべてのユーザー入力をパラメーター化して、SQL インジェクション攻撃から保護することが重要です。パラメーターのプレースホルダーを SQL クエリ文字列に含めて、パラメーター値を追加の引数として指定することができます。指定したパラメーター値はすべて、DbParameter に自動的に変換されます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); または、DbParameter を構築して、それを SqlQuery に指定することもできます。これにより、SQL クエリ文字列で名前付きパラメーターを使用できます。context.ExecuteStoreQueryAsync&amp;lt;Post&amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="TElement" /> 型のオブジェクトの列挙体が示されます。</returns>
      <param name="commandText">サーバーのネイティブなクエリ言語で指定するクエリ。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <param name="parameters">クエリに使用するパラメーターの値。出力パラメーターを使用する場合は、結果が完全に読み取られるまでそれらの値は利用できません。これは、DbDataReader の基になっている動作のためです。詳しくは http://go.microsoft.com/fwlink/?LinkID=398589 を参照してください。</param>
      <typeparam name="TElement">結果のシーケンスの要素型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> クラスのインスタンスを終了処理します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>既存のプロキシ型をすべて返します。</summary>
      <returns>既存のすべてのプロキシ型の <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>指定されたエンティティ キーを持つオブジェクトを返します。</summary>
      <returns>エンティティ型のインスタンスである <see cref="T:System.Object" />。</returns>
      <param name="key">検索するオブジェクトのキー。</param>
      <exception cref="T:System.ArgumentNullException">key パラメーターが null です。</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> またはデータ ソースでオブジェクトが見つかりません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>指定した型のプロキシ オブジェクトに関連付けられている POCO エンティティのエンティティ型を返します。</summary>
      <returns>関連付けられている POCO エンティティの <see cref="T:System.Type" />。</returns>
      <param name="type">プロキシ オブジェクトの <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.InterceptionContext">
      <summary>このコンテキストに使用されている <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" /> を返します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>指定したナビゲーション プロパティと既定のマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
      <param name="entity">関連オブジェクトを読み込むエンティティ。</param>
      <param name="navigationProperty">読み込む関連オブジェクトを返すナビゲーション プロパティの名前。</param>
      <exception cref="T:System.InvalidOperationException">エンティティの状態が <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," />、<see cref="F:System.Data.Entity.EntityState.Deleted" /> のいずれかであるか、またはエンティティが、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定したナビゲーション プロパティと指定したマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
      <param name="entity">関連オブジェクトを読み込むエンティティ。</param>
      <param name="navigationProperty">読み込む関連オブジェクトを返すナビゲーション プロパティの名前。</param>
      <param name="mergeOption">関連オブジェクトの読み込み時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 値。</param>
      <exception cref="T:System.InvalidOperationException">エンティティの状態が <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," />、<see cref="F:System.Data.Entity.EntityState.Deleted" /> のいずれかであるか、またはエンティティが、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>指定した LINQ クエリと既定のマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
      <param name="entity">関連オブジェクトを読み込むソース オブジェクト。</param>
      <param name="selector">読み込む関連オブジェクトを定義する LINQ 式。</param>
      <typeparam name="TEntity">エンティティの型。</typeparam>
      <exception cref="T:System.ArgumentException">selector は有効な入力パラメーターを指定しません。</exception>
      <exception cref="T:System.ArgumentNullException">selector が null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティの状態が <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," />、<see cref="F:System.Data.Entity.EntityState.Deleted" /> のいずれかであるか、またはエンティティが、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定した LINQ クエリと指定したマージ オプションを使用して、指定したオブジェクトに関連するオブジェクトを明示的に読み込みます。</summary>
      <param name="entity">関連オブジェクトを読み込むソース オブジェクト。</param>
      <param name="selector">読み込む関連オブジェクトを定義する LINQ 式。</param>
      <param name="mergeOption">関連オブジェクトの読み込み時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 値。</param>
      <typeparam name="TEntity">エンティティの型。</typeparam>
      <exception cref="T:System.ArgumentException">selector は有効な入力パラメーターを指定しません。</exception>
      <exception cref="T:System.ArgumentNullException">selector が null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティの状態が <see cref="F:System.Data.Entity.EntityState.Detached" />、<see cref="F:System.Data.Entity.EntityState.Added," />、<see cref="F:System.Data.Entity.EntityState.Deleted" /> のいずれかであるか、またはエンティティが、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の別のインスタンスにアタッチされています。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>オブジェクト コンテキストで使用されるメタデータ ワークスペースを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に関連付けられている <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> オブジェクト。</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>クエリまたは読み込み操作の一部として、データ ソース内のデータから新しいエンティティ オブジェクトが作成されたときに発生します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>オブジェクトの変更を追跡するためにオブジェクト コンテキストで使用されるオブジェクト状態マネージャーを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> で使用される <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>このオブジェクト コンテキストに関連付けられている LINQ クエリ プロバイダーを取得します。</summary>
      <returns>このオブジェクト コンテキストで使用される <see cref="T:System.Linq.IQueryProvider" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>オブジェクト コンテキスト内のオブジェクトのコレクションをデータベース内のデータで更新します。</summary>
      <param name="refreshMode">オブジェクト コンテキストでのプロパティの変更がデータベースのプロパティ値で上書きされるかどうかを示す <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 値。</param>
      <param name="collection">更新するオブジェクトの <see cref="T:System.Collections.IEnumerable" /> コレクション。</param>
      <exception cref="T:System.ArgumentNullException">collection が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode が無効です。</exception>
      <exception cref="T:System.ArgumentException">collection が空であるか、オブジェクトがコンテキストにアタッチされていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>オブジェクト コンテキスト内のオブジェクトをデータベース内のデータで更新します。</summary>
      <param name="refreshMode">オブジェクト コンテキストでのプロパティの変更がデータベースのプロパティ値で上書きされるかどうかを示す <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 値。</param>
      <param name="entity">更新するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">entity が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode が無効です。</exception>
      <exception cref="T:System.ArgumentException">entity がコンテキストにアタッチされていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>オブジェクト コンテキスト内のオブジェクトのコレクションをデータベース内のデータで非同期的に更新します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="refreshMode">オブジェクト コンテキストでのプロパティの変更がデータベースのプロパティ値で上書きされるかどうかを示す <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 値。</param>
      <param name="collection">更新するオブジェクトの <see cref="T:System.Collections.IEnumerable" /> コレクション。</param>
      <exception cref="T:System.ArgumentNullException">collection が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode が無効です。</exception>
      <exception cref="T:System.ArgumentException">collection が空であるか、オブジェクトがコンテキストにアタッチされていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>オブジェクト コンテキスト内のオブジェクトのコレクションをデータベース内のデータで非同期的に更新します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="refreshMode">オブジェクト コンテキストでのプロパティの変更がデータベースのプロパティ値で上書きされるかどうかを示す <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 値。</param>
      <param name="collection">更新するオブジェクトの <see cref="T:System.Collections.IEnumerable" /> コレクション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">collection が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode が無効です。</exception>
      <exception cref="T:System.ArgumentException">collection が空であるか、オブジェクトがコンテキストにアタッチされていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>オブジェクト コンテキスト内のオブジェクトをデータベース内のデータで非同期的に更新します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="refreshMode">オブジェクト コンテキストでのプロパティの変更がデータベースのプロパティ値で上書きされるかどうかを示す <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 値。</param>
      <param name="entity">更新するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">entity が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode が無効です。</exception>
      <exception cref="T:System.ArgumentException">entity がコンテキストにアタッチされていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>オブジェクト コンテキスト内のオブジェクトをデータベース内のデータで非同期的に更新します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="refreshMode">オブジェクト コンテキストでのプロパティの変更がデータベースのプロパティ値で上書きされるかどうかを示す <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" /> 値。</param>
      <param name="entity">更新するオブジェクト。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">entity が null です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">refreshMode が無効です。</exception>
      <exception cref="T:System.ArgumentException">entity がコンテキストにアタッチされていません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>すべての更新をデータベースに保存して、オブジェクト コンテキストの変更の追跡をリセットします。</summary>
      <returns>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が呼び出されたときの <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" />、または <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状態のオブジェクトの数。</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">変更の保存中に、オプティミスティック同時実行制御違反が発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>すべての更新をデータベースに保存して、必要に応じてオブジェクト コンテキストの変更の追跡をリセットします。</summary>
      <returns>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が呼び出されたときの <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" />、または <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状態のオブジェクトの数。</returns>
      <param name="acceptChangesDuringSave">このパラメーターは、クライアント側のトランザクションのサポートに必要です。true の場合、<see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> の完了後にすべてのオブジェクトに対する変更の追跡がリセットされます。false の場合、<see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" /> の後に <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" /> メソッドを呼び出す必要があります。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">変更の保存中に、オプティミスティック同時実行制御違反が発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>すべての更新をデータベースに保存して、必要に応じてオブジェクト コンテキストの変更の追跡をリセットします。</summary>
      <returns>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が呼び出されたときの <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" />、または <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状態のオブジェクトの数。</returns>
      <param name="options">操作の動作を決定する <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 値。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">変更の保存中に、オプティミスティック同時実行制御違反が発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>非同期的にすべての更新をデータベースに保存して、オブジェクト コンテキストの変更の追跡をリセットします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が呼び出されたときの <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" />、または <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状態のオブジェクトの数が示されます。</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">変更の保存中に、オプティミスティック同時実行制御違反が発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>非同期的にすべての更新をデータベースに保存し、必要に応じてオブジェクト コンテキストの変更の追跡をリセットします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が呼び出されたときの <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" />、または <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状態のオブジェクトの数が示されます。</returns>
      <param name="options">操作の動作を決定する <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 値。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">変更の保存中に、オプティミスティック同時実行制御違反が発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>非同期的にすべての更新をデータベースに保存し、必要に応じてオブジェクト コンテキストの変更の追跡をリセットします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が呼び出されたときの <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" />、または <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状態のオブジェクトの数が示されます。</returns>
      <param name="options">操作の動作を決定する <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" /> 値。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">変更の保存中に、オプティミスティック同時実行制御違反が発生しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>非同期的にすべての更新をデータベースに保存して、オブジェクト コンテキストの変更の追跡をリセットします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が呼び出されたときの <see cref="F:System.Data.Entity.EntityState.Added" />、<see cref="F:System.Data.Entity.EntityState.Modified" />、または <see cref="F:System.Data.Entity.EntityState.Deleted" /> 状態のオブジェクトの数が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">変更の保存中に、オプティミスティック同時実行制御違反が発生しました。</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>変更内容がデータ ソースに保存されるときに発生します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>メソッド自体を返します。ObjectContext は、<see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" /> を実装して、<see cref="T:System.Data.Entity.DbContext" /> と ObjectContext の共通インターフェイスを提供します。その両方が、基になる ObjectContext を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
      <summary>このコンテキストで使用中のトランザクション ハンドラーを取得します。トランザクションが開始されない場合、NULL の可能性があります。</summary>
      <returns>トランザクション ハンドラー。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>エンティティ データの行を含む <see cref="T:System.Data.Common.DbDataReader" /> を、要求されたエンティティ型のオブジェクトに変換します。</summary>
      <returns>TResult 型のオブジェクトの列挙体。</returns>
      <param name="reader">エンティティ オブジェクトに変換するエンティティ データを格納している <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <typeparam name="TElement">エンティティ型。</typeparam>
      <exception cref="T:System.ArgumentNullException">reader が null の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>エンティティ セットとマージ オプションを指定して、エンティティ データの行を含む <see cref="T:System.Data.Common.DbDataReader" /> を、要求されたエンティティ型のオブジェクトに変換します。</summary>
      <returns>TResult 型のオブジェクトの列挙体。</returns>
      <param name="reader">エンティティ オブジェクトに変換するエンティティ データを格納している <see cref="T:System.Data.Common.DbDataReader" />。</param>
      <param name="entitySetName">TResult 型のエンティティ セット。</param>
      <param name="mergeOption">変換したオブジェクトをオブジェクト コンテキストに追加するときに使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
      <typeparam name="TEntity">エンティティ型。</typeparam>
      <exception cref="T:System.ArgumentNullException">reader が null の場合。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定された mergeOption が、有効な <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> 値でない場合。</exception>
      <exception cref="T:System.InvalidOperationException">指定された entitySetName が、TResult 型の有効なエンティティ セットでない場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>指定されたエンティティ キーを持つオブジェクトを返します。</summary>
      <returns>オブジェクトが正常に取得された場合は true。key が一時キーの場合、接続が null の場合、または value が null の場合は false。</returns>
      <param name="key">検索するオブジェクトのキー。</param>
      <param name="value">このメソッドから制御が戻った時点で、オブジェクトが格納されます。</param>
      <exception cref="T:System.ArgumentException">key のメタデータに互換性がありません。</exception>
      <exception cref="T:System.ArgumentNullException">key が null です。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>ObjectContext の動作に影響するオプションを定義します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands">
      <summary>SQL の関数とコマンドが常にトランザクション内で実行されるかどうかを決定する値を取得または設定します。</summary>
      <returns>既定のトランザクションの動作。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>ナビゲーション プロパティにアクセスしたときに自動的に関連オブジェクトが読み込まれるかどうかを決定するブール値を取得または設定します。</summary>
      <returns>遅延読み込みが有効な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>永続化に依存しないカスタム データ クラスに対してプロキシ インスタンスが作成されるかどうかを決定するブール値を取得または設定します。</summary>
      <returns>プロキシが作成される場合は true、それ以外の場合は false。既定値は true です。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>一貫した NullReference の動作を使用するかどうかを決定するブール値を取得または設定します。</summary>
      <returns>一貫した NullReference 動作を使用する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>C# の NullComparison 動作を使用するかどうかを決定するブール値を取得または設定します。</summary>
      <returns>C# NullComparison 動作を使用する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>従来の PreserveChanges の動作を使用するかどうかを決定するブール値を取得または設定します。</summary>
      <returns>PreserveChanges のレガシ動作を使用する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>ObjectMaterialized イベントの EventArgs。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>作成されたエンティティ オブジェクトを取得します。</summary>
      <returns>作成されたエンティティ オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>ObjectMaterialized イベントのデリゲート</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>このクラスは、名前、型、および値で構成されるオブジェクト レイヤーのクエリ パラメーターを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>指定した名前および値を使用して、<see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">パラメーターの名前。この名前には、Entity SQL ステートメントで使用される "@" パラメーター マーカーは含めないでください。実際の名前だけにする必要があります。式の先頭の文字は、英字にする必要があります。式の 2 番目以降の文字には、英字、数字、アンダースコア (_) のいずれかを使用してください。</param>
      <param name="value">パラメーターの初期値 (本質的には型)。</param>
      <exception cref="T:System.ArgumentNullException">いずれかの引数の値が NULL の場合。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">name 引数の値が無効の場合。パラメーター名は、先頭を英字にする必要があり、英字、数字、およびアンダースコアのみを含めることができます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>指定した名前と型を使用して <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name">パラメーターの名前。この名前には、Entity SQL ステートメントで使用される "@" パラメーター マーカーは含めないでください。実際の名前だけにする必要があります。式の先頭の文字は、英字にする必要があります。式の 2 番目以降の文字には、英字、数字、アンダースコア (_) のいずれかを使用してください。</param>
      <param name="type">パラメーターの共通言語ランタイム (CLR) 型。</param>
      <exception cref="T:System.ArgumentNullException">いずれかの引数の値が NULL の場合。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">name 引数の値が無効の場合。パラメーター名は、先頭を英字にする必要があり、英字、数字、およびアンダースコアのみを含めることができます。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>パラメーター名を取得します。パラメーター名は、コンストラクターでのみ設定できます。</summary>
      <returns>パラメーター名。パラメーター名は、コンストラクターでのみ設定できます。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>パラメーターの型を取得します。</summary>
      <returns>パラメーターの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>パラメーター値を取得または設定します。</summary>
      <returns>パラメーター値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>オブジェクト レイヤーのクエリ パラメーターのコレクションを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> をコレクションに追加します。</summary>
      <param name="item">コレクションに追加するパラメーター。</param>
      <exception cref="T:System.ArgumentNullException">parameter 引数が null です。</exception>
      <exception cref="T:System.ArgumentException">parameter 引数がコレクション内に既に存在しています。この動作は、エントリの重複を許可するほとんどのコレクションの動作とは異なります。または、パラメーター引数と同じ名前を持つ別のパラメーターがコレクションに既に存在します。参照では大文字と小文字が区別されないことに注意してください。この動作は、ほとんどのコレクションの動作とは異なり、むしろ <see cref="T:System.Collections.Generic.Dictionary" /> の動作に似ています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">parameter の型が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>コレクションからすべての <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> インスタンスを削除します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>指定した <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> がコレクション内に存在するかどうかを参照によって確認します。</summary>
      <returns>パラメーター オブジェクトがコレクション内で見つかった場合は true を返します。それ以外の場合は false を返します。</returns>
      <param name="item">コレクション内で検索する <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />。</param>
      <exception cref="T:System.ArgumentNullException">parameter 引数が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>指定した名前の <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> がコレクション内に存在するかどうかを調べます。</summary>
      <returns>指定した名前のパラメーターがコレクション内で見つかった場合は true を返します。それ以外の場合は false を返します。</returns>
      <param name="name">コレクション内で検索するパラメーターの名前。この名前には、Entity SQL ステートメントで使用される "@" パラメーター マーカーは含めないでください。実際の名前だけにする必要があります。</param>
      <exception cref="T:System.ArgumentNullException">name パラメーターが null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>指定された配列にコレクション内のパラメーターをコピーできます。その際、指定されたインデックス位置のオブジェクトからコピーを開始します。</summary>
      <param name="array">パラメーターのコピー先の配列。</param>
      <param name="arrayIndex">パラメーターのコピーを開始する位置を示す配列内のインデックス。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>コレクション内に現在存在するパラメーターの数を取得します。</summary>
      <returns>コレクション内に現在存在する <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> オブジェクトの数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>列挙子インスタンスを返します。これにより、コレクションを反復処理およびスキャンできます。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>呼び出し元がパラメーターを名前によって取得できるようにするインデクサーを取得します。</summary>
      <returns>呼び出し元がパラメーターを名前によって取得できるようにするインデクサー。</returns>
      <param name="name">項目名。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>参照によって、<see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> のインスタンスをコレクションから削除します (コレクション内に存在する場合)。</summary>
      <returns>パラメーター オブジェクトが見つかり、コレクションから削除した場合は true を返します。それ以外の場合は false を返します。</returns>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">parameter 引数が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> が読み取り専用であるかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> が読み取り専用である場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションに対する型指定されていない列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> インスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>このクラスは、オブジェクトレイヤーの型指定されていないクエリを実装します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>クエリのコマンド テキストを返します。</summary>
      <returns>文字列値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>このオブジェクト クエリに関連付けられているオブジェクト コンテキストを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンスに関連付けられている <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>クエリ プランをキャッシュするかどうかを示す値を取得または設定します。</summary>
      <returns>クエリ プランをキャッシュするかどうかを示す値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用して型指定されていないオブジェクト クエリを実行します。</summary>
      <returns>クエリによって返されるエンティティ オブジェクトのコレクションを含む <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用して型指定されていないオブジェクト クエリを非同期的に実行します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリによって返されるエンティティ オブジェクトのコレクションを含む <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> が示されます。</returns>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>指定されたマージ オプションを使用して型指定されていないオブジェクト クエリを非同期的に実行します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリによって返されるエンティティ オブジェクトのコレクションを含む <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> が示されます。</returns>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>クエリの結果型に関する情報を返します。</summary>
      <returns>クエリの結果型に関する情報を含む <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> 値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>クエリから返されたオブジェクトをオブジェクト コンテキストに追加する方法を取得または設定します。</summary>
      <returns>クエリの <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>このオブジェクト クエリのパラメーター コレクションを取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> のパラメーター コレクション。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>クエリはストリーミングか、またはバッファリングか</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>コレクションを反復処理する列挙子を返します。</summary>
      <returns>コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>このクエリにクエリ オブジェクトのコレクションが含まれているかどうかを示す値を取得します。</summary>
      <returns>このクエリにクエリ オブジェクトのコレクションが含まれている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>コレクションを、データ バインドで使用される <see cref="T:System.Collections.IList" /> として返します。</summary>
      <returns>エンティティ オブジェクトの <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対して指定された SQL クエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>このクエリ インスタンスの結果要素型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>このクエリを記述する式を取得します。LINQ ビルダー パターンを使用して作成されたクエリの場合、完全な LINQ 式ツリーを返します。それ以外の場合は、このクエリをラップする定数式を返します。既定の式はキャッシュされないことに注意してください。これにより、LINQ クエリと Entity-SQL クエリを区別できます。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>このクエリ インスタンスに関連付けられている <see cref="T:System.Linq.IQueryProvider" /> を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>データ ソースに対して実行するコマンドを返します。</summary>
      <returns>データ ソースに対してクエリで実行されるコマンドを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>ObjectQuery は、オブジェクト レイヤーで厳密に型指定されたクエリを実装します。クエリは Entity SQL 文字列を使用して指定され、ObjectQuery で宣言された Entity SQL ベースのクエリ ビルダー メソッドを呼び出すことによって作成できます。</summary>
      <typeparam name="T">この ObjectQuery の結果型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>指定された Entity SQL コマンドを最初のクエリとして使用して、新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンスを作成します。</summary>
      <param name="commandText">Entity SQL クエリ。</param>
      <param name="context">クエリが実行される <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定された Entity SQL コマンドを最初のクエリとして使用し、さらに指定されたマージ オプションを使用して、新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンスを作成します。</summary>
      <param name="commandText">Entity SQL クエリ。</param>
      <param name="context">クエリが実行される <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />。</param>
      <param name="mergeOption">このクエリによって取得されるエンティティを、同じ <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に対する以前のクエリから返されたエンティティとどのようにマージするかを指定します。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>結果が一意となるようにクエリを制限します。</summary>
      <returns>SELECT DISTINCT が適用された元のインスタンスに相当する新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>このクエリ ビルダー メソッドは、指定された他のクエリにも含まれる結果を除くこのクエリのすべての結果を返す新しいクエリを作成します。</summary>
      <returns>新しい ObjectQuery インスタンス。</returns>
      <param name="query">除外する結果を表すクエリ。</param>
      <exception cref="T:System.ArgumentNullException">query パラメーターが null の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用してオブジェクト クエリを実行します。</summary>
      <returns>クエリによって返されるエンティティ オブジェクトのコレクションを含む <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />。</returns>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用して非同期的にオブジェクト クエリを実行します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリによって返されるエンティティ オブジェクトのコレクションを含む <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> が示されます。</returns>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>指定されたマージ オプションを使用して非同期的にオブジェクト クエリを実行します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリによって返されるエンティティ オブジェクトのコレクションを含む <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> が示されます。</returns>
      <param name="mergeOption">クエリの実行時に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。既定値は <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" /> です。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>指定された条件でクエリの結果をグループ化します。</summary>
      <returns>GROUP BY が適用された元のインスタンスに相当する、<see cref="T:System.Data.Common.DbDataRecord" /> 型の新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
      <param name="keys">結果のグループ化に使用するキー列。</param>
      <param name="projection">投影を定義する、選択したプロパティの一覧。</param>
      <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
      <exception cref="T:System.ArgumentNullException">query パラメーターが null または空の文字列であるか、projection パラメーターが null または空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを使用する新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <param name="path">クエリの結果で返す関連オブジェクトをドットで区切った一覧。</param>
      <exception cref="T:System.ArgumentNullException">path が null です。</exception>
      <exception cref="T:System.ArgumentException">path が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>このクエリ ビルダー メソッドは、このクエリと指定された他のクエリの両方に含まれる結果を返す新しいクエリを作成します。</summary>
      <returns>新しい ObjectQuery インスタンス。</returns>
      <param name="query">交差する結果を表すクエリ。</param>
      <exception cref="T:System.ArgumentNullException">query パラメーターが null の場合。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>このオブジェクト クエリの名前を取得または設定します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> の名前を表す文字列値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>特定の型のみが結果となるようにクエリを制限します。</summary>
      <returns>OFTYPE が適用された元のインスタンスに相当する、新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
      <typeparam name="TResultType">フィルターを適用してクエリを実行したときに返された <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> の型。</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">指定された型が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>指定された条件でクエリの結果を並べ替えます。</summary>
      <returns>ORDER BY が適用された元のインスタンスに相当する、新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
      <param name="keys">結果の並べ替えに使用するキー列。</param>
      <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
      <exception cref="T:System.ArgumentNullException">keys または parameters パラメーターが null です。</exception>
      <exception cref="T:System.ArgumentException">key が空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>クエリの結果を、指定された投影で定義されているプロパティのみに制限します。</summary>
      <returns>SELECT が適用された元のインスタンスに相当する、<see cref="T:System.Data.Common.DbDataRecord" /> 型の新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
      <param name="projection">投影を定義する、選択したプロパティの一覧。</param>
      <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
      <exception cref="T:System.ArgumentNullException">projection が null であるか、または parameters が null です。</exception>
      <exception cref="T:System.ArgumentException">projection が空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>クエリの結果を、投影で指定されたプロパティのみに制限します。</summary>
      <returns>特定の投影と互換性がある型の新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。返される <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> は、SELECT VALUE が適用された元のインスタンスに相当します。</returns>
      <param name="projection">投影の一覧。</param>
      <param name="parameters">解析時にスコープに含める必要があるオプションのクエリ パラメーターのセット。</param>
      <typeparam name="TResultType">
        <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" /> メソッドによって返された <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> の型。</typeparam>
      <exception cref="T:System.ArgumentNullException">projection が null であるか、または parameters が null です。</exception>
      <exception cref="T:System.ArgumentException">projection が空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>指定された条件でクエリの結果を並べ替え、指定された数の結果をスキップします。</summary>
      <returns>ORDER BY と SKIP の両方が適用された元のインスタンスに相当する、新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
      <param name="keys">結果の並べ替えに使用するキー列。</param>
      <param name="count">スキップする結果の数。定数またはパラメーター参照を指定する必要があります。</param>
      <param name="parameters">解析時にスコープに含める必要があるオプションのクエリ パラメーターのセット。</param>
      <exception cref="T:System.ArgumentNullException">いずれかの引数が null です。</exception>
      <exception cref="T:System.ArgumentException">keys が空の文字列であるか、または count が空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>列挙されたときにデータベースに対して指定された SQL クエリを実行する <see cref="T:System.Collections.Generic.IEnumerator`1" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対して指定された SQL クエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>クエリの結果を、指定されたアイテム数に制限します。</summary>
      <returns>TOP が適用された元のインスタンスに相当する、新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
      <param name="count">結果に文字列として返されるアイテムの数。</param>
      <param name="parameters">解析時にスコープに含める必要があるオプションのクエリ パラメーターのセット。</param>
      <exception cref="T:System.ArgumentNullException">count が null です。</exception>
      <exception cref="T:System.ArgumentException">count が空の文字列です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>このクエリ ビルダー メソッドは、このクエリのすべての結果、および他のクエリのすべての結果を返す新しいクエリを作成します。重複は取り除かれます (つまり、結果は一意です)。</summary>
      <returns>新しい ObjectQuery インスタンス。</returns>
      <param name="query">追加する結果を表すクエリ。</param>
      <exception cref="T:System.ArgumentNullException">query パラメーターが null の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>このクエリ ビルダー メソッドは、このクエリのすべての結果、および他のクエリのすべての結果を返す新しいクエリを作成します。重複もすべて含まれます (つまり、結果は一意であるとは限りません)。</summary>
      <returns>新しい ObjectQuery インスタンス。</returns>
      <param name="query">追加する結果を表すクエリ。</param>
      <exception cref="T:System.ArgumentNullException">query パラメーターが null の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>指定されたフィルター条件と一致する結果となるようにクエリを制限します。</summary>
      <returns>WHERE が適用された元のインスタンスに相当する、新しい <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> インスタンス。</returns>
      <param name="predicate">フィルター述語。</param>
      <param name="parameters">このメソッドで使用される 0 個以上のパラメーター。</param>
      <exception cref="T:System.ArgumentNullException">predicate が null であるか、または parameters が null です。</exception>
      <exception cref="T:System.ArgumentException">predicate が空の文字列です。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>このクラスは IEnumerable と IDisposable を実装します。このクラスのインスタンスは ObjectQuery.Execute メソッドから返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.#ctor">
      <summary>このコンストラクターは、モックまたはフェイクの動作をするメンバーをオーバーライドするテスト ダブルの作成時にのみ使用することを目的としています。このコンストラクターを他の目的に使用すると、<see cref="T:System.NullReferenceException" /> のスローが含まれるものの、これに限定されない予期しない動作が発生する恐れがあります。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>リソースの解放またはリセットに関連付けられているタスクを実行します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>オブジェクト結果によって使用されているリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true、アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>派生クラスでオーバーライドされた場合、ジェネリック型の <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> を取得します。</summary>
      <returns>ジェネリック <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> の型。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>ストアド プロシージャの次の結果セットを取得します。</summary>
      <returns>次の結果セットの値を列挙する ObjectResult。これ以上ない場合、または ObjectResult がストアド プロシージャ呼び出しの結果でない場合は、null となります。</returns>
      <typeparam name="TElement">要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>クエリ結果を反復処理する列挙子を返します。</summary>
      <returns>クエリ結果を反復処理する列挙子。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection の実装。常に false を返します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>結果を、データ バインドに使用できる形式で返します。</summary>
      <returns>エンティティ オブジェクトの <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>クエリ結果を反復処理する非同期列挙子を返します。</summary>
      <returns>クエリ結果を反復処理する非同期列挙子。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>このクラスは <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" /> メソッドの結果を表します。</summary>
      <typeparam name="T">結果の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor">
      <summary>このコンストラクターは、モックまたはフェイクの動作をするメンバーをオーバーライドするテスト ダブルの作成時にのみ使用することを目的としています。このコンストラクターを他の目的に使用すると、<see cref="T:System.NullReferenceException" /> のスローが含まれるものの、これに限定されない予期しない動作が発生する恐れがあります。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> で使用されているアンマネージ リソースを解放し、オプションでマネージ リソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースを解放する場合は true、アンマネージ リソースのみを解放する場合は false。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> の型を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> の型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>クエリ結果を反復処理する列挙子を返します。</summary>
      <returns>クエリ結果を反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> を反復処理する列挙子を非同期に取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> を反復処理する列挙子。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>作成、読み取り、更新、および削除の各操作の実行に使用される型指定されたエンティティ セットを表します。</summary>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>オブジェクト コンテキストの現在のエンティティ セットにオブジェクトを追加します。</summary>
      <param name="entity">追加するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>指定されたオブジェクトのスカラー値を、同じキーを持つ <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> のオブジェクトにコピーします。</summary>
      <returns>更新後のオブジェクト。</returns>
      <param name="currentEntity">元のオブジェクトに適用するプロパティ更新を含むデタッチしたオブジェクト。currentEntity のエンティティ キーは、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 内のエントリの <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> プロパティと一致する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>指定されたオブジェクトのプロパティ値と一致するように、<see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> プロパティを設定します。</summary>
      <returns>更新後のオブジェクト。</returns>
      <param name="originalEntity">元のオブジェクトに適用するプロパティ更新を含むデタッチしたオブジェクト。originalEntity のエンティティ キーは、<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> 内のエントリの <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> プロパティと一致する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>オブジェクトまたはオブジェクト グラフをオブジェクト コンテキストの現在のエンティティ セットにアタッチします。</summary>
      <param name="entity">アタッチするオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>指定した型のインスタンスを作成します。</summary>
      <returns>要求した T 型のインスタンス、または、T 型に対応するプロキシ型のインスタンス。</returns>
      <typeparam name="T">取得するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>新しいエンティティ型オブジェクトを作成します。</summary>
      <returns>新しいエンティティ型オブジェクト、または、そのエンティティ型に対応するプロキシ型のインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>オブジェクトを削除の対象としてマークします。</summary>
      <param name="entity">削除するエンティティを表すオブジェクト。オブジェクトの状態は、<see cref="F:System.Data.Entity.EntityState.Detached" /> 以外であればどの状態でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>オブジェクトをオブジェクト コンテキストから削除します。</summary>
      <param name="entity">デタッチするオブジェクト。entity のみが削除されます。同じ <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> によって追跡されている関連オブジェクトがある場合、このようなオブジェクトは自動的にはデタッチされません。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>この <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" /> インスタンスが表すエンティティ セットのメタデータを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>エンティティ、エンティティ スタブ、またはリレーションシップを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>現在の値を元の値として受け取ります。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>指定されたオブジェクトのプロパティ値と一致するようにエントリの現在の値を設定します。</summary>
      <param name="currentEntity">オブジェクトに適用する更新された値を含む、デタッチされているオブジェクト。currentEntity には、オブジェクトのエンティティ キーを指定することもできます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>指定されたオブジェクトのプロパティ値と一致するようにエントリの元の値を設定します。</summary>
      <param name="originalEntity">オブジェクトに適用する元の値を含む、デタッチされているオブジェクト。originalEntity には、オブジェクトのエンティティ キーを指定することもできます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>エントリの状態を、指定された <see cref="T:System.Data.Entity.EntityState" /> 値に変更します。</summary>
      <param name="state">エントリの <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" /> プロパティに設定する <see cref="T:System.Data.Entity.EntityState" /> 値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>この <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> に関連付けられているオブジェクトまたはリレーションシップの現在のプロパティ値を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> に関連付けられているオブジェクトまたはリレーションシップの現在の値を含む <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>エンティティを削除済みとしてマークします。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>エンティティ オブジェクトを取得します。</summary>
      <returns>エンティティ オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>エンティティ キーを取得します。</summary>
      <returns>エンティティ キー。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>オブジェクトまたはリレーションシップの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> を取得します。</summary>
      <returns>オブジェクトまたはリレーションシップの <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>
        <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" /> が最後に呼び出された後に変更されたオブジェクトのプロパティの名前を返します。</summary>
      <returns>文字列としての名前の <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクション。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>この <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> に関連付けられているオブジェクトの元の値の更新可能なバージョンを取得します。</summary>
      <returns>オブジェクト データの更新可能な元の値。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>DetectChanges を使用して、指定された名前を持つプロパティの現在の値が元の値と異なるかどうかを判断します。変更されていないプロパティでも変更済みとしてマークできるため、変更済みとマークされるプロパティとは異なる場合があることに注意してください。</summary>
      <returns>プロパティが変更されている場合は true、それ以外の場合は false。</returns>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> がリレーションシップを表すかどうかを示す値を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> がリレーションシップを表す場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>オブジェクトまたはリレーションシップの元の値の読み取り専用バージョンを取得します。</summary>
      <returns>リレーションシップ セット エントリまたはエンティティの元の値の読み取り専用バージョン。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>指定された名前を持つプロパティが最後に読み込み、アタッチ、保存された以降に、または変更が受け付けられた以降にそのプロパティへ加えられた変更を拒否します。プロパティの元の値は格納され、プロパティには変更済みのマークが付けられません。</summary>
      <param name="propertyName">変更するプロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>エントリによって表されるオブジェクトの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> インスタンスを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>変更するオブジェクトまたはリレーションシップの状態を設定します。</summary>
      <exception cref="T:System.InvalidOperationException">状態が変更済みまたは変更なしの場合</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>指定されたプロパティを変更済みとマークします。</summary>
      <param name="propertyName">プロパティの名前。</param>
      <exception cref="T:System.InvalidOperationException">状態が変更済みまたは変更なしの場合</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の状態を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の状態。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>複合プロパティが変更されたことを報告するために使用されます。EntityMemberChanging 中にキャッシュされたプロパティ値が OriginalValues に追加されます。</summary>
      <param name="entityMemberName">変更された最上位レベルのエンティティ プロパティの名前。</param>
      <param name="complexObject">変更されたプロパティを含む複合オブジェクト</param>
      <param name="complexObjectMemberName">complexObject の変更されたプロパティの名前</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>複合プロパティが変更されようとしていることを報告するために使用されます。指定されたプロパティの現在の値は、このメソッドが呼び出されたときにキャッシュされます。</summary>
      <param name="entityMemberName">変更中の最上位レベルのエンティティ プロパティの名前</param>
      <param name="complexObject">変更中のプロパティを含む複合オブジェクト</param>
      <param name="complexObjectMemberName">complexObject で変更中のプロパティの名前</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>スカラー エンティティ プロパティが変更されたことを報告するために使用されます。EntityMemberChanging 中にキャッシュされたプロパティ値が OriginalValues に追加されます。</summary>
      <param name="entityMemberName">変更されたエンティティ プロパティの名前</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>スカラー エンティティ プロパティが変更されようとしていることを報告するために使用されます。指定されたプロパティの現在の値は、このメソッドが呼び出されたときにキャッシュされます。</summary>
      <param name="entityMemberName">変更中のエンティティ プロパティの名前</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>ObjectStateEntry から EntityState を返します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>オブジェクトの状態を維持し、エンティティ型のインスタンスおよびリレーションシップ インスタンスの ID 管理を行います。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="metadataWorkspace">マッピング情報とメタデータ情報を提供する <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>特定のオブジェクトの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の状態を、指定された entityState に変更します。</summary>
      <returns>指定されたエンティティの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">状態を変更する必要のあるオブジェクト。</param>
      <param name="entityState">オブジェクトの新しい状態。</param>
      <exception cref="T:System.ArgumentNullException">entity が null の場合。</exception>
      <exception cref="T:System.InvalidOperationException">オブジェクトがデタッチされておらず状態マネージャーにエントリがない場合、または他の <see cref="T:System.Data.Entity.EntityState." /> 状態から <see cref="F:System.Data.Entity.EntityState.Detached" /> に変更しようとした場合、または状態が有効な <see cref="T:System.Data.Entity.EntityState" /> 値でない場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>関連する 2 つのオブジェクトとナビゲーション プロパティの名前に基づいて、2 つのエンティティ オブジェクト間の指定されたリレーションシップの状態を変更します。</summary>
      <returns>変更されたリレーションシップの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">リレーションシップの一方の端にあるソース エンティティのオブジェクト インスタンスまたは <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">リレーションシップのもう一方の端にあるターゲット エンティティのオブジェクト インスタンスまたは <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="navigationProperty">指定されたターゲットを返すソースのナビゲーション プロパティの名前。</param>
      <param name="relationshipState">指定のリレーションシップに対して要求する <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">source または target が null の場合。</exception>
      <exception cref="T:System.InvalidOperationException">リレーションシップの状態を <see cref="F:System.Data.Entity.EntityState.Deleted" /> または <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外の状態に変更しようとした場合、またはソースまたはターゲットの状態が <see cref="F:System.Data.Entity.EntityState.Deleted" /> である場合、またはリレーションシップの状態を <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外の状態に変更しようとした場合、またはソースまたはターゲットの状態が <see cref="F:System.Data.Entity.EntityState.Added" /> である場合、または状態が有効な <see cref="T:System.Data.Entity.EntityState" /> 値ではない場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>関連する 2 つのオブジェクトとリレーションシップのプロパティに基づいて、2 つのエンティティ オブジェクト間の指定されたリレーションシップの状態を変更します。</summary>
      <returns>変更されたリレーションシップの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">リレーションシップの一方の端にあるソース エンティティのオブジェクト インスタンスまたは <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">リレーションシップのもう一方の端にあるターゲット エンティティのオブジェクト インスタンスまたは <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="relationshipName">リレーションシップの名前。</param>
      <param name="targetRoleName">リレーションシップのターゲット End のロール名。</param>
      <param name="relationshipState">指定のリレーションシップに対して要求する <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentNullException">source または target が null の場合。</exception>
      <exception cref="T:System.InvalidOperationException">リレーションシップの状態を <see cref="F:System.Data.Entity.EntityState.Deleted" /> または <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外の状態に変更しようとした場合、またはソースまたはターゲットの状態が <see cref="F:System.Data.Entity.EntityState.Deleted" /> である場合、またはリレーションシップの状態を <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外の状態に変更しようとした場合、またはソースまたはターゲットの状態が <see cref="F:System.Data.Entity.EntityState.Added" /> である場合、または状態が有効な <see cref="T:System.Data.Entity.EntityState" /> 値ではない場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>関連する 2 つのオブジェクトとナビゲーション プロパティを定義する LINQ 式とに基づいて、2 つのエンティティ オブジェクト間の指定されたリレーションシップの状態を変更します。</summary>
      <returns>変更されたリレーションシップの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="sourceEntity">リレーションシップの一方の端にあるソース エンティティのオブジェクト インスタンスまたは <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="targetEntity">リレーションシップのもう一方の端にあるターゲット エンティティのオブジェクト インスタンスまたは <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="navigationPropertySelector">指定された target を返す source 側のナビゲーション プロパティを選択する LINQ 式。</param>
      <param name="relationshipState">指定のリレーションシップに対して要求する <see cref="T:System.Data.Entity.EntityState" />。</param>
      <typeparam name="TEntity">ソース オブジェクトのエンティティ型。</typeparam>
      <exception cref="T:System.ArgumentNullException">source、target、selector のいずれかが null の場合。</exception>
      <exception cref="T:System.ArgumentException">selector は形式が正しくないか、ナビゲーション プロパティを返すことができません。</exception>
      <exception cref="T:System.InvalidOperationException">リレーションシップの状態を <see cref="F:System.Data.Entity.EntityState.Deleted" /> または <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外の状態に変更しようとした場合、またはソースまたはターゲットの状態が <see cref="F:System.Data.Entity.EntityState.Deleted" /> である場合、またはリレーションシップの状態を <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Detached" /> 以外の状態に変更しようとした場合、またはソースまたはターゲットの状態が <see cref="F:System.Data.Entity.EntityState.Added" /> である場合、または状態が有効な <see cref="T:System.Data.Entity.EntityState" /> 値ではない場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>指定された状態のオブジェクトまたはリレーションシップの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> オブジェクトのコレクションを返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.EntityState" /> の <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> オブジェクトのコレクション。</returns>
      <param name="state">返された <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> オブジェクトをフィルター選択するために使用する <see cref="T:System.Data.Entity.EntityState" />。</param>
      <exception cref="T:System.ArgumentException">状態が <see cref="F:System.Data.Entity.EntityState.Detached" /> の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>指定されたキーのオブジェクトまたはリレーションシップ エントリの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Core.EntityKey" /> に対応する <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="key">
        <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <exception cref="T:System.ArgumentNullException">key が null の場合。</exception>
      <exception cref="T:System.ArgumentException">指定された key が状態マネージャーに見つからない場合。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> には、指定された <see cref="T:System.Data.Entity.Core.EntityKey" /> のエンティティがありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>指定されたオブジェクトの <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> を返します。</summary>
      <returns>指定された <see cref="T:System.Object" /> に対応する <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />。</returns>
      <param name="entity">取得した <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> が属する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> には、指定された <see cref="T:System.Object" /> のエンティティがありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>指定されたオブジェクトによって使用される <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> を返します。</summary>
      <returns>指定したオブジェクトの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="entity">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> を返す対象のオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException">エンティティが IEntityWithRelationships を実装しておらず、この ObjectStateManager によって追跡されていません。</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>この状態マネージャーに関連付けられている <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> に関連付けられた <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />。</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>状態マネージャーに対してエンティティの追加または削除が実行されたときに発生します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>指定された <see cref="T:System.Data.Entity.Core.EntityKey" /> のオブジェクトまたはリレーションシップに対応する <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の取得を試みます。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Core.EntityKey" /> に対応する <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> がある場合は true、それ以外の場合は false であるブール値。</returns>
      <param name="key">指定された <see cref="T:System.Data.Entity.Core.EntityKey" />。</param>
      <param name="entry">このメソッドから制御が戻った時点で、指定された <see cref="T:System.Data.Entity.Core.EntityKey" /> の <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> が格納されます。このパラメーターは初期化されていない状態で渡されます。</param>
      <exception cref="T:System.ArgumentNullException">key に null 値 (Visual Basic では Nothing) が指定されています。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>指定された <see cref="T:System.Object" /> に対応する <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> の取得を試みます。</summary>
      <returns>指定されたオブジェクトに対応する <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> がある場合は true、それ以外の場合は false であるブール値。</returns>
      <param name="entity">取得した <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> が属する <see cref="T:System.Object" />。</param>
      <param name="entry">このメソッドから制御が戻った時点で、指定された <see cref="T:System.Data.Entity.Core.EntityKey" /> の <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> が格納されます。このパラメーターは初期化されていない状態で渡されます。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>指定されたオブジェクトによって使用される <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> を返します。</summary>
      <returns>指定したエンティティの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> インスタンスが返された場合は true、それ以外の場合は false。</returns>
      <param name="entity">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> を返す対象のオブジェクト。</param>
      <param name="relationshipManager">このメソッドから制御が戻るときに、エンティティの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> が格納されます。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>エンティティのプロパティがデータベースから取得された当初の値です。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>永続性の無視クラスに対して作成されたプロキシ型を基本型に解決する方法を認識している DataContractResolver。これは、DataContractSerializer と共に使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>逆シリアル化時に、xsi:type 情報を永続化に依存しないオブジェクトの実際の型にマップします。</summary>
      <returns>xsi:type がマップされる型を返します。xsi:type に一致する既知の型が検出されなかった場合は null を返します。</returns>
      <param name="typeName">マップする xsi:type 情報。</param>
      <param name="typeNamespace">xsi:type の名前空間。</param>
      <param name="declaredType">宣言された型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> のインスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>シリアル化時に、実際の型を xsi:type 情報にマップします。</summary>
      <returns>型が解決された場合は true、それ以外の場合は false。</returns>
      <param name="type">永続化に依存しないオブジェクトの実際の型。</param>
      <param name="declaredType">宣言された型。</param>
      <param name="knownTypeResolver">
        <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" /> のインスタンス。</param>
      <param name="typeName">このメソッドから制御が戻るときに、xsi:type 宣言の一覧が格納されます。</param>
      <param name="typeNamespace">このメソッドから制御が戻るときに、使用される名前空間の一覧が格納されます。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>データベースからのインメモリ データを更新するとき、変更されたプロパティをどのように扱うかについて、さまざまな方法を定義します。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>変更されていないクライアント オブジェクトの場合は StoreWins と同じ動作。変更されたクライアント オブジェクトの場合は、元の値をストア値で更新し、クライアント オブジェクトのすべての値を保持します。次に更新が発生したとき、すべてのクライアント変更単位は変更済みと見なされ、更新が要求されます。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>クライアントのすべての変更を破棄し、値をストア値で更新します。クライアントの元の値はストアに一致するように更新されます。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>ObjectContext.SaveChanges() の動作を変更するために使用するフラグ</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>変更が保存された後、AcceptAllChangesAfterSave メソッドが呼び出されて、ObjectStateManager の変更追跡がリセットされます。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>変更が保存される前に、DetectChanges メソッドが呼び出されて、オブジェクト コンテキストにアタッチされているオブジェクトのプロパティ値が、ObjectStateManager のデータと同期されます。</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>DetectChanges メソッドも AcceptAllChangesAfterSave メソッドも呼び出すことなく変更が保存されます。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>これは、ADO.NET のエンティティである必要がある最低限のインターフェイスを表すインターフェイスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>複合オブジェクトのプロパティが変更されたことを変更トラッカーに通知します。</summary>
      <param name="property">変更されたプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">property が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>プロパティの変更が複合オブジェクトで保留中であることを変更トラッカーに通知します。</summary>
      <param name="property">変更されるプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">property が null です。</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>複合プロパティの属性。既定の AttributeUsage プロパティである Inherited=True、AllowMultiple=False が暗黙的に指定されるため、メタデータ システムはこれを想定し、これらの各属性について最初に見つかったもののみを調べます (それ以外にも存在する場合でも)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>複合型の属性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Edm 基本クラスを識別する属性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>列挙型を示す属性。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>指定したメソッドが EDM の関数のプロキシであることを示します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>新しい DbFunctionAttribute インスタンスを作成します。</summary>
      <param name="namespaceName">属性付きメソッドによって表される EDM 関数の名前空間の名前。</param>
      <param name="functionName">属性付きメソッドによって表される EDM 関数の関数名。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>要素を格納するためにマップされるプロパティの基本属性。既定の AttributeUsage プロパティである Inherited=True、AllowMultiple=False が暗黙的に指定されるため、メタデータ システムはこれを想定し、これらの各属性について最初に見つかったもののみを調べます (それ以外にも存在する場合でも)。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>概念モデルのアソシエーションに基づいて、2 つのエンティティ型間のリレーションシップを定義します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> クラスのインスタンスを作成します。</summary>
      <param name="relationshipNamespaceName">このエンティティが参加するアソシエーションの名前空間の名前。</param>
      <param name="relationshipName">このエンティティが参加するリレーションシップの名前。</param>
      <param name="role1Name">アソシエーションの一方の End の型に対するロール名。</param>
      <param name="role1Multiplicity">一または多など、アソシエーションの一方の End での複数要素の接続性を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 値。</param>
      <param name="role1Type">アソシエーションの一方の End のエンティティの型。</param>
      <param name="role2Name">アソシエーションのもう一方の End の型に対するロール名。</param>
      <param name="role2Multiplicity">一または多など、アソシエーションのもう一方の End での複数要素の接続性を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 値。</param>
      <param name="role2Type">アソシエーションのもう一方の End のエンティティの型。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="relationshipNamespaceName">このエンティティが参加するアソシエーションの名前空間の名前。</param>
      <param name="relationshipName">このエンティティが参加するリレーションシップの名前。</param>
      <param name="role1Name">アソシエーションの一方の End の型に対するロール名。</param>
      <param name="role1Multiplicity">一または多など、アソシエーションの一方の End での複数要素の接続性を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 値。</param>
      <param name="role1Type">アソシエーションの一方の End のエンティティの型。</param>
      <param name="role2Name">アソシエーションのもう一方の End の型に対するロール名。</param>
      <param name="role2Multiplicity">一または多など、アソシエーションのもう一方の End での複数要素の接続性を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 値。</param>
      <param name="role2Type">アソシエーションのもう一方の End のエンティティの型。</param>
      <param name="isForeignKey">リレーションシップが外部キー値に基づくかどうかを示す値。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>リレーションシップが外部キー値に基づくかどうかを示すブール値を取得します。</summary>
      <returns>リレーションシップが外部キー値に基づいている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>リレーションシップの名前です。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" /> で定義されるリレーションシップの名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>リレーションシップの名前空間です。</summary>
      <returns>リレーションシップの名前空間を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>リレーションシップの一方の End での複数要素の接続性です。</summary>
      <returns>複数要素の接続性を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>リレーションシップの一方の End のロール名です。</summary>
      <returns>ロールの名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>リレーションシップの一方の End のエンティティの型です。</summary>
      <returns>アソシエーションの一方の End のオブジェクトの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>リレーションシップのもう一方の End の複数要素の接続性です。</summary>
      <returns>複数要素の接続性を示す <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" /> 値。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>リレーションシップのもう一方の End のロール名です。</summary>
      <returns>ロールの名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>リレーションシップのもう一方の End のエンティティの型です。</summary>
      <returns>アソシエーションのもう一方の End のオブジェクトの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>RelationshipSet に定義されている End を識別する属性。既定の AttributeUsage プロパティである Inherited=True、AllowMultiple=False が暗黙的に指定されるため、メタデータ システムはこれを想定し、これらの各属性について最初に見つかったもののみを調べます (それ以外にも存在する場合でも)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="relationshipNamespaceName">リレーションシップ プロパティの名前空間の名前。</param>
      <param name="relationshipName">リレーションシップの名前。リレーションシップ名は、名前空間で修飾された名前ではありません。</param>
      <param name="targetRoleName">リレーションシップのもう一方の End のロール名です。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>修飾されていないリレーションシップ名を取得します。</summary>
      <returns>リレーションシップ名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>ナビゲーション プロパティの名前空間の名前。</summary>
      <returns>名前空間の名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>リレーションシップのもう一方の End のロール名を取得します。</summary>
      <returns>ターゲット ロール名は、概念モデルでこのリレーションシップを定義するアソシエーションのもう一方の End 要素の Role 属性で指定されます。詳細については、「アソシエーション (EDM)」を参照してください。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>IEntity のスカラー プロパティの属性。既定の AttributeUsage プロパティである Inherited=True、AllowMultiple=False が暗黙的に指定されるため、メタデータ システムはこれを想定し、これらの各属性について最初に見つかったもののみを調べます (それ以外にも存在する場合でも)。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>プロパティがエンティティ キーに含まれるかどうかを示す値を取得または設定します。</summary>
      <returns>プロパティがエンティティ キーに含まれるかどうかを示す値です。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>プロパティに null 値を割り当てることができるかどうかを示す値を取得または設定します。</summary>
      <returns>プロパティに null 値を割り当てることができるかどうかを示す値。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>静的な型の属性</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>アセンブリで参照される各モデルに対する一意の値を使用して、<see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyGuid">アセンブリ内のモデルに対する一意の GUID 値を表す文字列。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>スキーマ化された型の基本属性</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>この属性が適用されるクラスにマップされる概念スキーマの型の名前。</summary>
      <returns>名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>この型にマップされる概念スキーマのエンティティ オブジェクト型または複合型の名前空間の名前。</summary>
      <returns>名前空間の名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>特定の EDM の構成要素をモデリングするエンティティのコレクション (特定の型のすべてのエンティティまたは特定のリレーションシップに参加しているエンティティ)。</summary>
      <typeparam name="TEntity">このコレクションにあるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>コレクションにオブジェクトを追加します。</summary>
      <param name="item">コレクションに追加するオブジェクト。entity は、<see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> を実装する必要があります。</param>
      <exception cref="T:System.ArgumentNullException">entity が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>オブジェクトと、オブジェクト コンテキスト内の関連オブジェクトのコレクションとのリレーションシップを定義します。</summary>
      <param name="entities">ソース オブジェクトに関連付けられているオブジェクト コンテキスト内のオブジェクトのコレクション。</param>
      <exception cref="T:System.ArgumentNullException">entities コレクションが null です。</exception>
      <exception cref="T:System.InvalidOperationException">ソース オブジェクトまたは entities コレクション内のオブジェクトが null か、状態が <see cref="F:System.Data.Entity.EntityState.Unchanged" /> または <see cref="F:System.Data.Entity.EntityState.Modified" /> ではありません。または、EDM メタデータに基づいてリレーションシップを定義できません。これは、概念スキーマのアソシエーションで 2 つの型の間のリレーションシップがサポートされていない場合に発生する可能性があります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>オブジェクト コンテキスト内の 2 つのアタッチ済みオブジェクトの間のリレーションシップを定義します。</summary>
      <param name="entity">アタッチされるオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">entity が null の場合。</exception>
      <exception cref="T:System.InvalidOperationException">entity をソース オブジェクトに関連付けられない場合。これは、概念スキーマのアソシエーションで 2 つの型の間のリレーションシップがサポートされていない場合に発生する可能性があります。または、いずれかのオブジェクトが null か、状態が <see cref="F:System.Data.Entity.EntityState.Unchanged" /> または <see cref="F:System.Data.Entity.EntityState.Modified" /> ではない場合に発生します。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>すべてのエンティティをコレクションから削除します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>特定のオブジェクトがコレクション内に存在するかどうかを確認します。</summary>
      <returns>オブジェクトが <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 内で見つかった場合は true、それ以外の場合は false。</returns>
      <param name="item">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> 内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>コレクションのすべての内容を配列にコピーします。その際、コピー対象の配列の指定したインデックス位置からコピーを開始します。</summary>
      <param name="array">コピー先の配列。</param>
      <param name="arrayIndex">コピーを開始する配列内の、0 から始まるインデックス。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>コレクションに含まれるオブジェクトの数を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> に含まれる要素の数。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>現在のコレクションに存在するのと同じオブジェクトのセットを実行時に返すオブジェクト クエリを返します。</summary>
      <returns>エンティティのコレクションを表す <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">オブジェクトの状態が <see cref="F:System.Data.Entity.EntityState.Added" /> の場合、またはオブジェクトの状態が <see cref="F:System.Data.Entity.EntityState.Detached" /> で、<see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 以外の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>コレクションのオブジェクトを反復処理するために使用される列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> によってキャッシュされている値のセットを反復処理する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns>常に false を返します。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用して、コレクションに関連オブジェクトを読み込みます。</summary>
      <param name="mergeOption">このコレクション内のオブジェクトを、同じ <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に対する以前のクエリから返されたオブジェクトとどのようにマージするかを指定します。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>既定のマージ オプションを使用して関連 End に関連エンティティを非同期に読み込みます。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="mergeOption">マージ オプション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する CancellationToken。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>エンティティ オブジェクトを逆シリアル化する目的で内部的に使用されます。</summary>
      <param name="context">ストリーム コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>エンティティ オブジェクトをシリアル化する目的で内部的に使用されます。</summary>
      <param name="context">ストリーム コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>オブジェクトをコレクションから削除して、リレーションシップを削除対象としてマークします。</summary>
      <returns>項目が正常に削除された場合は true、それ以外の場合は false。</returns>
      <param name="item">コレクションから削除するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">entity オブジェクトが null です。</exception>
      <exception cref="T:System.InvalidOperationException">エンティティ オブジェクトが同じオブジェクト コンテキストにアタッチされていません。または、エンティティ オブジェクトに有効なリレーションシップ マネージャーがありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> によってキャッシュされている値のセットを反復処理するために使用される列挙子を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> によってキャッシュされている値のセットを反復処理する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>IListSource.ContainsListCollection の実装。常に false を返します。これは、返される IList が実際のデータを含むものであり、コレクションの一覧ではないことを意味します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>コレクションを、データ バインドで使用される <see cref="T:System.Collections.IList" /> として返します。</summary>
      <returns>エンティティ オブジェクトの <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>これはすべての定義済み EntityObject クラスの基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>このオブジェクトのキーを取得または設定します。</summary>
      <returns>このオブジェクトの <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>オブジェクトのエンティティの状態を取得します。</summary>
      <returns>このオブジェクトの <see cref="T:System.Data.Entity.EntityState" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>プロパティが変更されたことを変更トラッカーに通知します。</summary>
      <param name="property">変更されたプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">property が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>プロパティの変更が保留中であることを変更トラッカーに通知します。</summary>
      <param name="property">変更されるプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException">property が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>ObjectStateManager によってこの EntityObject をキャッシュにアタッチまたはデタッチするために使用されます。</summary>
      <param name="changeTracker">このエンティティを含む ObjectStateEntry への参照</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>限定的に作成されたリレーションシップ ナビゲーション プロパティ オブジェクト (コレクションと参照) のコンテナーを返します。</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>複数要素の接続性が 1 のリレーションシップ端をモデル化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>関連オブジェクトのキーを返します。</summary>
      <returns>関連オブジェクトのキーを表す <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>複数要素の接続性が 1 のリレーションシップ端をモデル化します。</summary>
      <typeparam name="TEntity">参照されているエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> の新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>オブジェクト コンテキストで 2 つのオブジェクト間の多対一または一対一のリレーションシップを作成します。</summary>
      <param name="entity">アタッチされるオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">entity が null の場合。</exception>
      <exception cref="T:System.InvalidOperationException">entity を現在の関連 End に関連付けられない場合。これは、概念スキーマのアソシエーションで 2 つの型の間のリレーションシップがサポートされていない場合に発生する可能性があります。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>関連オブジェクトを返す同等のオブジェクト クエリを作成します。</summary>
      <returns>関連オブジェクトを返す <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">オブジェクトの状態が <see cref="F:System.Data.Entity.EntityState.Added" /> の場合、またはオブジェクトの状態が <see cref="F:System.Data.Entity.EntityState.Detached" /> で、<see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> 以外の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用してこの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> の関連オブジェクトを読み込みます。</summary>
      <param name="mergeOption">オブジェクトが既に <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に存在する場合にオブジェクトを返す方法を指定します。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> のソースが null である場合、クエリから複数の関連 End が返された場合、または 1 つの関連 End が必要なときにクエリから関連 End が返されなかった場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>既定のマージ オプションを使用して関連 End に関連エンティティを非同期に読み込みます。</summary>
      <returns>関連 End に読み込まれた関連エンティティ。</returns>
      <param name="mergeOption">マージ オプション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する CancellationToken。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>このメソッドは、関連エンティティ オブジェクトをシリアル化する目的で内部的に使用されます。</summary>
      <param name="context">シリアル化されたストリーム。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>このメソッドは、関連エンティティ オブジェクトをシリアル化する目的で内部的に使用されます。</summary>
      <param name="context">シリアル化されたストリーム。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>この <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> によって返される関連オブジェクトを取得または設定します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> によって返されるオブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>変更トラッカーによってこのインターフェイスが実装され、データ クラスによって変更を報告するために使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>複合型のプロパティが変更されたことを変更トラッカーに通知します。</summary>
      <param name="entityMemberName">変更されたエンティティ型の複合プロパティの名前。</param>
      <param name="complexObject">変更されたプロパティを含む複合型。</param>
      <param name="complexObjectMemberName">複合型の変更されたプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>複合プロパティに対する変更が保留中であることを変更トラッカーに通知します。</summary>
      <param name="entityMemberName">変更中の最上位レベルのエンティティ プロパティの名前。</param>
      <param name="complexObject">変更中のプロパティを含む複合型。</param>
      <param name="complexObjectMemberName">複合型で変更中のプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>エンティティ型のプロパティが変更されたことを変更トラッカーに通知します。</summary>
      <param name="entityMemberName">変更されたプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>エンティティ型のプロパティに対する変更が保留中であることを変更トラッカーに通知します。</summary>
      <param name="entityMemberName">変更中のプロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>追跡対象のオブジェクトの現在の状態を取得します。</summary>
      <returns>追跡対象のオブジェクトの状態を示す <see cref="T:System.Data.Entity.EntityState" />。詳細については、「ID 解決、状態管理、および変更の追跡」と「POCO エンティティでの変更の追跡」を参照してください。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>変更トラッカーによって管理するために、データ クラスが実装する必要のある最低限のインターフェイス。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>変更の報告に使用される <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" /> を取得または設定します。</summary>
      <param name="changeTracker">変更の報告に使用される <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>キーを含むエンティティを定義するインターフェイス。</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>このインターフェイスを実装しているエンティティ型のインスタンスの <see cref="T:System.Data.Entity.Core.EntityKey" /> を取得または設定します。</summary>
      <returns>このインターフェイスを実装しているエンティティ型のインスタンスの <see cref="T:System.Data.Entity.Core.EntityKey" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>データ クラスがリレーションシップを公開する場合に実装する必要があるインターフェイス</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>エンティティ型のインスタンスに対するリレーションシップを管理するリレーションシップ マネージャーを返します。</summary>
      <returns>このエンティティの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>リレーションシップの一方の End を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>関連 End にオブジェクトを追加します。</summary>
      <param name="entity">コレクションに追加するオブジェクト。entity は、<see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> を実装する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>関連 End にオブジェクトを追加します。</summary>
      <param name="entity">コレクションに追加するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>アタッチされた 2 つのオブジェクト間のリレーションシップを定義します。</summary>
      <param name="entity">アタッチされるオブジェクト。entity は、<see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> を実装する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>アタッチされた 2 つのオブジェクト間のリレーションシップを定義します。</summary>
      <param name="entity">アタッチされるオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>関連 End に属するオブジェクトを表す <see cref="T:System.Collections.IEnumerable" /> を返します。</summary>
      <returns>関連 End に属するオブジェクトを表す <see cref="T:System.Collections.IEnumerable" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>関連オブジェクトのコレクションを反復処理する <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>関連オブジェクトのコレクションを反復処理する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>エンティティ (<see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" /> の場合) またはコレクションのすべてのエンティティ (<see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> の場合) がデータベースから読み込まれているかどうかを示す値の取得または設定を行います。</summary>
      <returns>関連するエンティティがすべて読み込まれている場合、または IsLoaded が明示的に true に設定されている場合は true。それ以外の場合は、false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>既定のマージ オプションを使用してこの関連 End に関連オブジェクトを読み込みます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用して関連 End に関連オブジェクトを読み込みます。</summary>
      <param name="mergeOption">オブジェクトを既存の <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> にマージする場合に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>指定されたマージ オプションを使用して関連 End に関連オブジェクトを非同期に読み込みます。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="mergeOption">オブジェクトを既存の <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> にマージする場合に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>既定のマージ オプションを使用してこの関連 End に関連オブジェクトを非同期に読み込みます。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>この関連 End が参加するリレーションシップの名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> が参加しているリレーションシップの名前。リレーションシップ名は、名前空間で修飾された名前ではありません。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>関連 End のメタデータへの参照を返します。</summary>
      <returns>リレーションシップの End のメタデータを含む <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>関連 End のオブジェクトのコレクションからオブジェクトを削除します。</summary>
      <returns>entity が正常に削除された場合は true、entity が <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> に含まれていなかった場合は false。</returns>
      <param name="entity">コレクションから削除するオブジェクト。entity は、<see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" /> を実装する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>関連 End のオブジェクトのコレクションからオブジェクトを削除します。</summary>
      <returns>entity が正常に削除された場合は true、entity が <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> に含まれていなかった場合は false。</returns>
      <param name="entity">コレクションから削除するオブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>リレーションシップのソース End のロール名を取得します。</summary>
      <returns>リレーションシップのソース End のロール名。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>リレーションシップのターゲット End のロール名を取得します。</summary>
      <returns>リレーションシップのターゲット End のロール名。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>EntityCollection と EntityReference の基本クラス</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>関連 End に変更が加えられた場合に発生します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>関連オブジェクトのコレクションを反復処理する <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>関連オブジェクトのコレクションを反復処理する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>すべての関連オブジェクトが読み込まれているかどうかを示す値を取得します。</summary>
      <returns>関連 End にデータベースからすべての関連オブジェクトが読み込まれている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>既定のマージ オプションを使用してこの関連 End に関連オブジェクトを読み込みます。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> クエリを使用してソース オブジェクトを取得したときに <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> ではない場合、関連オブジェクトが既に読み込まれていた場合、ソース オブジェクトが <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> にアタッチされていない場合、またはソース オブジェクトが追跡されているが、状態が <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Deleted" /> である場合、または<see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> に対して使用されている <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>指定されたマージ オプションを使用して関連 End からオブジェクトを読み込みます。</summary>
      <param name="mergeOption">オブジェクトを既存の <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> にマージする場合に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> クエリを使用してソース オブジェクトを取得したときに <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> ではない場合、関連オブジェクトが既に読み込まれていた場合、ソース オブジェクトが <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> にアタッチされていない場合、またはソース オブジェクトが追跡されているが、状態が <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Deleted" /> である場合、または<see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> に対して使用されている <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>指定されたマージ オプションを使用して関連 End からオブジェクトを非同期に読み込みます。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="mergeOption">オブジェクトを既存の <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> にマージする場合に使用する <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> クエリを使用してソース オブジェクトを取得したときに <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> ではない場合、関連オブジェクトが既に読み込まれていた場合、ソース オブジェクトが <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> にアタッチされていない場合、またはソース オブジェクトが追跡されているが、状態が <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Deleted" /> である場合、または<see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> に対して使用されている <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>既定のマージ オプションを使用して関連 End に関連オブジェクトを非同期に読み込みます。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> クエリを使用してソース オブジェクトを取得したときに <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> ではない場合、関連オブジェクトが既に読み込まれていた場合、ソース オブジェクトが <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> にアタッチされていない場合、またはソース オブジェクトが追跡されているが、状態が <see cref="F:System.Data.Entity.EntityState.Added" /> または <see cref="F:System.Data.Entity.EntityState.Deleted" /> である場合、または<see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" /> に対して使用されている <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> が <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> の場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> インスタンスと共にエンティティ オブジェクトを逆シリアル化する目的で内部的に使用されます。</summary>
      <param name="context">シリアル化されたストリーム。</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>この関連 End が参加するリレーションシップの名前を取得します。</summary>
      <returns>この <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" /> が参加するリレーションシップの名前。リレーションシップ名は、名前空間で修飾された名前ではありません。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>関連 End のメタデータへの参照を取得します。</summary>
      <returns>リレーションシップの End のメタデータを含む <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>リレーションシップのソース End のロール名を取得します。</summary>
      <returns>ロールの名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>関連 End にエンティティを追加します。このメソッドは、Add(object) とまったく同じように機能します。このメソッドは、以前のバージョンの IRelatedEnd との下方互換性を保つために保持されています。</summary>
      <param name="entity">関連 End に追加するエンティティ インスタンス</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>関連 End にエンティティを追加します。所有者がキャッシュにアタッチされている場合、接続されているすべての End がオブジェクト キャッシュに追加され、対応するリレーションシップも ObjectStateManager に追加されます。リレーションシップの RelatedEnd も修正されます。</summary>
      <param name="entity">関連 End に追加するエンティティ インスタンス</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>関連 End にエンティティをアタッチします。このメソッドは、Attach(object) とまったく同じように機能します。このメソッドは、以前のバージョンの IRelatedEnd との下方互換性を保つために保持されています。</summary>
      <param name="entity">関連 End にアタッチするエンティティ</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> が null の場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">現在のリレーションシップ End を介してエンティティを関連付けられない場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>関連 End にエンティティをアタッチします。関連 End に既にエンティティが含まれている場合は、指定したエンティティと既存のエンティティがマージされます。この場合、指定したエンティティは、関連エンティティの完全なセットとは見なされません。このメソッドに渡す所有者とすべてのエンティティは、状態が Unchanged または Modified である必要があります。削除された要素は、状態マネージャーが既にリレーションシップ インスタンスを追跡中の場合にのみ使用できます。</summary>
      <param name="entity">関連 End にアタッチするエンティティ</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> が null の場合にスローされます。</exception>
      <exception cref="T:System.InvalidOperationException">現在のリレーションシップ End を介してエンティティを関連付けられない場合にスローされます。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>関連 End に属するオブジェクトを表す <see cref="T:System.Collections.IEnumerable" /> を返します。</summary>
      <returns>関連 End に属するオブジェクトを表す <see cref="T:System.Collections.IEnumerable" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>関連 End からエンティティを削除します。このメソッドは、Remove(object) とまったく同じように機能します。このメソッドは、以前のバージョンの IRelatedEnd との下方互換性を保つために保持されています。</summary>
      <returns>エンティティが正常に削除された場合は true を返し、エンティティが RelatedEnd に含まれていなかった場合は false を返します。</returns>
      <param name="entity">関連 End から削除するエンティティ インスタンス</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>関連 End からエンティティを削除します。所有者がキャッシュにアタッチされている場合は、リレーションシップを削除対象としてマークします。リレーションシップがコンポジションである場合も、エンティティを削除対象としてマークします。</summary>
      <returns>エンティティが正常に削除された場合は true を返し、エンティティが RelatedEnd に含まれていなかった場合は false を返します。</returns>
      <param name="entity">関連 End から削除するエンティティ インスタンス</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>リレーションシップのターゲット End のロール名を取得します。</summary>
      <returns>ロールの名前を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>リレーションシップの種類を識別します</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>リレーションシップはアソシエーションです</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>限定的に作成されたリレーションシップ ナビゲーション プロパティ オブジェクト (コレクションと参照) のコンテナー。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>新しい <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> オブジェクトを作成します。</summary>
      <returns>要求された <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />。</returns>
      <param name="owner">このメソッドを呼び出しているエンティティへの参照。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>リレーションシップ マネージャーによって管理されるすべての関連 End の列挙を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" /> を実装するオブジェクトの <see cref="T:System.Collections.Generic.IEnumerable`1" />。リレーションシップがまだ設定されていない場合は、空の列挙が返されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>指定されたリレーションシップ名とターゲット ロール名を持つ、関連オブジェクトの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> を取得します。</summary>
      <returns>関連オブジェクトの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />。</returns>
      <param name="relationshipName">ナビゲートするリレーションシップの名前。リレーションシップ名は、名前空間で修飾された名前ではありません。</param>
      <param name="targetRoleName">ナビゲーションのターゲット ロールの名前。リレーションシップ全体にわたるナビゲーションの方向を示します。</param>
      <typeparam name="TTargetEntity">返された <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> の型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定したロールが <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> ではなく <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> を返しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>リレーションシップに含まれる指定されたターゲット ロールの適切な型の <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> または <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> を返します。</summary>
      <returns>取得された <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> または <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> を表す <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />。</returns>
      <param name="relationshipName">targetRoleName が定義されているリレーションシップの名前。リレーションシップ名は、名前空間で修飾された名前ではありません。</param>
      <param name="targetRoleName">relationshipName のもう一方の End を取得するために使用するターゲット ロール。</param>
      <exception cref="T:System.ArgumentNullException">relationshipName または targetRoleName が null です。</exception>
      <exception cref="T:System.InvalidOperationException">ソースの型と所有者の型が一致しません。</exception>
      <exception cref="T:System.ArgumentException">targetRoleName が無効です。または、リレーションシップの種類がメタデータ内に見つかりません。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>指定されたリレーションシップ名とターゲット ロール名の組み合わせを使用して、関連オブジェクトの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> を取得します。</summary>
      <returns>関連オブジェクトの <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</returns>
      <param name="relationshipName">ナビゲートするリレーションシップの名前。リレーションシップ名は、名前空間で修飾された名前ではありません。</param>
      <param name="targetRoleName">ナビゲーションのターゲット ロールの名前。リレーションシップ全体にわたるナビゲーションの方向を示します。</param>
      <typeparam name="TTargetEntity">返された <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> の型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定したロールが <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> ではなく <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> を返しました。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>既定のコンストラクターで作成された既存の EntityCollection を受け取り、指定されたリレーションシップ名とターゲット ロール名を使用して初期化します。このメソッドは、シリアル化解除中にのみ使用するように設計されており、指定された EntityCollection が既に初期化されている場合、またはリレーションシップ マネージャーが ObjectContext に既にアタッチされている場合は、例外をスローします。</summary>
      <param name="relationshipName">リレーションシップ名。</param>
      <param name="targetRoleName">ターゲット ロール名。</param>
      <param name="entityCollection">既存 EntityCollection。</param>
      <typeparam name="TTargetEntity">targetRoleName が表すエンティティの型</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>既定のコンストラクターで作成された既存の EntityReference を受け取り、指定されたリレーションシップ名とターゲット ロール名を使用して初期化します。このメソッドは、シリアル化解除中にのみ使用するように設計されており、指定された EntityReference が既に初期化されている場合、この名前とターゲット ロールを持つリレーションシップがリレーションシップ マネージャーに既に含まれている場合、またはリレーションシップ マネージャーが ObjectContext に既にアタッチされている場合は、例外をスローします。</summary>
      <param name="relationshipName">リレーションシップ名。</param>
      <param name="targetRoleName">関連 End のロール名。</param>
      <param name="entityReference">初期化する <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />。</param>
      <typeparam name="TTargetEntity">初期化される <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> の型。</typeparam>
      <exception cref="T:System.InvalidOperationException">指定した <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> が既に初期化されている場合、リレーションシップ マネージャーが <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> に既にアタッチされている場合、または、この名前とターゲット ロールを持つリレーションシップがリレーションシップ マネージャーに既に含まれている場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> インスタンスと共にエンティティ オブジェクトを逆シリアル化する目的で内部的に使用されます。</summary>
      <param name="context">シリアル化されたストリーム。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたリレーションシップによる <see cref="T:System.Data.Entity.Core.EntityKey" /> のバイナリ シリアル化を準備するために、Object Services によって呼び出されます。</summary>
      <param name="context">指定したシリアル化ストリームの転送元と転送先を記述し、呼び出し元によって定義された追加コンテキストを提供します。</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>このクラスには、日付オブジェクトに必要となる一般的なメソッドが含まれています。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>指定されたバイト配列に格納されている値が等しいかどうかを判断します。</summary>
      <returns>両方の配列が同じ長さで同じバイト値を格納している場合、または両方の配列が null の場合は true、それ以外の場合は false。</returns>
      <param name="first">比較する 1 番目のバイト配列値。</param>
      <param name="second">比較する 2 番目のバイト配列。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>データ ソースによってサポートされる最小の日付/時刻値を返します。</summary>
      <returns>データ ソースによってサポートされる最小の日付/時刻である <see cref="T:System.DateTime" /> 値。</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>変更の追跡に使用されるパブリック定数名。この定義を指定すると、文字列をハードコーディングする代わりにこの定数を使用できるようになります。これにより、プロパティ名が正しいことを確認でき、この特定の文字列を検索する場所で比較をより高速に実行できます。定数ではなく大文字と小文字が区別される文字列を直接使用することもできますが、比較が少し遅くなります。名前をダッシュ (-) 文字で囲むと、-EntityKey- は有効な識別子名ではないため、実際のデータ プロパティと競合しないようにすることができます。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>現在のバイト値のコピーを返します。</summary>
      <returns>現在の <see cref="T:System.Byte" /> 値のコピー。</returns>
      <param name="currentValue">現在のバイト配列の値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>指定されたプロパティの複合型を返します。</summary>
      <returns>プロパティの複合型オブジェクト。</returns>
      <param name="currentValue">複合オブジェクトから継承する複合オブジェクト。</param>
      <param name="property">複合オブジェクトである複合プロパティの名前。</param>
      <param name="isNullable">型が null 値をサポートしているかどうかを示します。</param>
      <param name="isInitialized">型が初期化されているかどうかを示します。</param>
      <typeparam name="T">要求される複合オブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>
        <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="property">変更されたプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>
        <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" /> イベントを発生させます。</summary>
      <param name="property">変更中のプロパティの名前。</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>プロパティが変更されたことを通知します。</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>プロパティがすぐに変更されることを通知します。</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>プロパティが変更されたことを報告するために使用されるイベントを発生させます。</summary>
      <param name="property">変更されたプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>プロパティの変更が保留状態にあることを報告するために使用されるイベントを発生させます。</summary>
      <param name="property">変更されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>プロパティに対して設定される <see cref="T:System.Boolean" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Boolean" /> 値。</returns>
      <param name="value">オブジェクトに格納されているブール値を返します。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Boolean" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Boolean" /> 値。</returns>
      <param name="value">オブジェクトに格納されているブール値を返します。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>プロパティに対して設定される <see cref="T:System.Byte" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Byte" /> 値。</returns>
      <param name="value">検証される値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Byte" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Byte" />。</returns>
      <param name="value">
        <see cref="T:System.Byte" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>プロパティに対して設定される <see cref="T:System.Byte[]" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Byte" /> 値。</returns>
      <param name="value">設定される値。</param>
      <param name="isNullable">プロパティが null を許容するかどうかを示します。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Byte[]" /> 値が有効であることを確認します。</summary>
      <returns>検証される <see cref="T:System.Byte" /> 値。</returns>
      <param name="value">プロパティ Set アクセス操作子に渡される値。</param>
      <param name="isNullable">このプロパティで null が許容されるかどうかを示すフラグ。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
      <exception cref="T:System.Data.ConstraintException">null 値が許容されない値が null である場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>プロパティが null ではないことを検証します。null の場合は例外をスローします。</summary>
      <returns>設定される <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="value">確認する <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</param>
      <param name="isNullable">このプロパティで null が許容されるかどうかを示すフラグ。</param>
      <exception cref="T:System.Data.ConstraintException">null 値が許容されないプロパティの値が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>プロパティが null ではないことを検証します。null の場合は例外をスローします。</summary>
      <returns>設定される <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="value">チェックする <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</param>
      <param name="isNullable">このプロパティで null が許容されるかどうかを示すフラグ。</param>
      <param name="propertyName">検証するプロパティの名前。</param>
      <exception cref="T:System.Data.ConstraintException">null 値が許容されないプロパティの値が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>プロパティが null ではないことを検証します。null の場合は例外をスローします。</summary>
      <returns>設定される <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="value">チェックする <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</param>
      <param name="isNullable">このプロパティで null が許容されるかどうかを示すフラグ。</param>
      <exception cref="T:System.Data.ConstraintException">null 値が許容されないプロパティの値が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>プロパティが null ではないことを検証します。null の場合は例外をスローします。</summary>
      <returns>設定される <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="value">確認する <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</param>
      <param name="isNullable">このプロパティで null が許容されるかどうかを示すフラグ。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
      <exception cref="T:System.Data.ConstraintException">null 値が許容されないプロパティの値が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>プロパティに対して設定される <see cref="T:System.DateTime" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.DateTime" /> 値。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.DateTime" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.DateTime" /> 値。</returns>
      <param name="value">
        <see cref="T:System.DateTime" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>プロパティに対して設定される <see cref="T:System.DateTimeOffset" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.DateTimeOffset" /> 値。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.DateTimeOffset" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.DateTimeOffset" /> 値。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>プロパティに対して設定される <see cref="T:System.Decimal" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Decimal" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Decimal" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Decimal" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Decimal" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>プロパティに対して設定される <see cref="T:System.Double" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Double" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Double" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Double" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Double" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>プロパティに対して設定される <see cref="T:System.Guid" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Guid" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Guid" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Guid" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Guid" /> 値。</param>
      <param name="propertyName">検証するプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>プロパティに対して設定される <see cref="T:System.Int16" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Int16" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Int16" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Int16" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Int16" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>プロパティに対して設定される <see cref="T:System.Int32" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Int32" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Int32" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Int32" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Int32" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>プロパティに対して設定される <see cref="T:System.Int64" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Int64" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Int64" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Int64" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Int64" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>プロパティに対して設定される <see cref="T:System.Boolean" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Boolean" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Boolean" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Boolean" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Boolean" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>プロパティに対して設定される <see cref="T:System.Byte" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Byte" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Byte" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Byte" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Byte" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Byte" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>プロパティに対して設定される <see cref="T:System.DateTime" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.DateTime" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.DateTime" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.DateTime" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.DateTime" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.DateTime" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>プロパティに対して設定される <see cref="T:System.DateTimeOffset" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.DateTimeOffset" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.DateTimeOffset" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.DateTimeOffset" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.DateTimeOffset" /> 値。</returns>
      <param name="value">
        <see cref="T:System.DateTimeOffset" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>プロパティに対して設定される <see cref="T:System.Decimal" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Decimal" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Decimal" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Decimal" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Decimal" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Decimal" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>プロパティに対して設定される <see cref="T:System.Double" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Double" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Double" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Double" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Double" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Double" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>プロパティに対して設定される <see cref="T:System.Guid" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Guid" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Guid" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Guid" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Guid" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Guid" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>プロパティに対して設定される <see cref="T:System.Int16" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Int16" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Int16" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Int16" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Int16" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Int16" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>プロパティに対して設定される <see cref="T:System.Int32" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Int32" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Int32" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Int32" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Int32" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Int32" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>プロパティに対して設定される <see cref="T:System.Int64" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Int64" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Int64" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Int64" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Int64" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Int64" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>プロパティに対して設定される <see cref="T:System.SByte" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.SByte" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.SByte" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.SByte" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.SByte" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.SByte" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>プロパティに対して設定される <see cref="T:System.Single" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Single" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Single" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.Single" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.Single" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.Single" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>プロパティに対して設定される <see cref="T:System.TimeSpan" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.TimeSpan" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.TimeSpan" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.TimeSpan" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の <see cref="T:System.TimeSpan" /> 値。</returns>
      <param name="value">null 値が許容される <see cref="T:System.TimeSpan" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>プロパティに対して設定される UInt16 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の UInt16 値。</returns>
      <param name="value">null 値が許容される UInt16 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>プロパティに対して設定される UInt16 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の UInt16 値。</returns>
      <param name="value">null 値が許容される UInt16 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>プロパティに対して設定される UInt32 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の UInt32 値。</returns>
      <param name="value">null 値が許容される UInt32 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>プロパティに対して設定される UInt32 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の UInt32 値。</returns>
      <param name="value">null 値が許容される UInt32 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>プロパティに対して設定される <see cref="T:System.UInt64" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の UInt64 値。</returns>
      <param name="value">null 値が許容される UInt64 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.UInt64" /> 値が有効であることを確認します。</summary>
      <returns>null 値が許容される設定対象の UInt64 値。</returns>
      <param name="value">null 値が許容される UInt64 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>プロパティに対して設定される <see cref="T:System.SByte" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.SByte" /> 値。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.SByte" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.SByte" /> 値。</returns>
      <param name="value">
        <see cref="T:System.SByte" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>プロパティに対して設定される Single 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Single" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>プロパティに対して設定される Single 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.Single" /> 値。</returns>
      <param name="value">
        <see cref="T:System.Single" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>プロパティが null ではないことを検証します。null の場合は例外をスローします。</summary>
      <returns>検証された <see cref="T:System.String" /> の値。</returns>
      <param name="value">チェックする文字列値。</param>
      <param name="isNullable">このプロパティで null が許容されるかどうかを示すフラグ。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>プロパティが null ではないことを検証します。null の場合は例外をスローします。</summary>
      <returns>検証されたプロパティ。</returns>
      <param name="value">チェックする文字列値。</param>
      <param name="isNullable">このプロパティで null が許容されるかどうかを示すフラグ。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
      <exception cref="T:System.Data.ConstraintException">null 値が許容されない文字列の文字列値が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>プロパティに対して設定される <see cref="T:System.TimeSpan" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.TimeSpan" /> 値。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.TimeSpan" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.TimeSpan" /> 値。</returns>
      <param name="value">
        <see cref="T:System.TimeSpan" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>プロパティに対して設定される <see cref="T:System.UInt16" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.UInt16" /> 値。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.UInt16" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.UInt16" /> 値。</returns>
      <param name="value">
        <see cref="T:System.UInt16" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>プロパティに対して設定される <see cref="T:System.UInt32" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.UInt32" /> 値。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.UInt32" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.UInt32" /> 値。</returns>
      <param name="value">
        <see cref="T:System.UInt32" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>プロパティに対して設定される <see cref="T:System.UInt64" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.UInt64" /> 値。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 値。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>プロパティに対して設定される <see cref="T:System.UInt64" /> 値が有効であることを確認します。</summary>
      <returns>設定される <see cref="T:System.UInt64" /> 値。</returns>
      <param name="value">
        <see cref="T:System.UInt64" /> 値。</param>
      <param name="propertyName">検証されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>指定されたプロパティの複合オブジェクトを設定します。</summary>
      <returns>複合オブジェクトから派生する複合型。</returns>
      <param name="oldValue">プロパティの元の複合オブジェクト (存在する場合)。</param>
      <param name="newValue">設定される複合オブジェクト。</param>
      <param name="property">複合オブジェクトに設定される複合プロパティ。</param>
      <typeparam name="T">置き換えられるオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>複合オブジェクトが null でないことを確認します。</summary>
      <returns>検証する複合オブジェクト。</returns>
      <param name="complexObject">検証する複合オブジェクト。</param>
      <param name="propertyName">complexObject に関連付けられている親オブジェクトの複合プロパティ。</param>
      <typeparam name="TComplex">検証される複合オブジェクトの型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>
        <see cref="T:System.Data.Common.DbTransaction" /> のコミット時にエラーが発生するとスローされる例外です。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>既定の値を使用して、<see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたデータを使用して、<see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">オブジェクトのシリアル化または逆シリアル化に必要なデータ。</param>
      <param name="context">指定したシリアル化ストリームの転送元と転送先の説明。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> の新しいインスタンスを、エラー メッセージを使用して初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>エラー メッセージと内部例外を指定して、<see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> の新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
      <summary>トランザクション トレース情報をデータベースに保存することで、トランザクション コミット中の接続エラーから正常に回復できるようにする、トランザクション ハンドラーを表します。<see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> を使用して登録する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
      <summary>既定の <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext" /> を使用して <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="transactionContextFactory">トランザクション コンテキスト ファクトリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>同じトランザクションで新しいトランザクションの追跡情報をデータベースに保存します。</summary>
      <param name="connection">トランザクションを開始した接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
      <summary>データベース初期化スクリプトを構築します。</summary>
      <returns>データベース初期化スクリプト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
      <summary>すべてのトランザクション履歴を削除します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
      <summary>すべてのトランザクション履歴を非同期に削除します。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>すべてのトランザクション履歴を非同期に削除します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>例外がスローされた場合、データベースにこのトランザクションがあるかどうかを確認し、見つからないときは例外をもう一度スローします。それ以外の場合は、コミットを成功としてマークし、削除するトランザクション情報をキューに入れます。</summary>
      <param name="transaction">コミットされたトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
      <summary>このトランザクション オブジェクトが使用しているリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースのみを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>破棄されたトランザクションの追跡を停止します。</summary>
      <param name="transaction">破棄されたトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>
        <paramref name="context" /> に関連付けられた <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> がある場合はそれを取得します。それ以外の場合は null を返します。</summary>
      <returns>関連付けられた <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />。</returns>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
      <summary>
        <paramref name="context" /> に関連付けられた <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> がある場合はそれを取得します。それ以外の場合は null を返します。</summary>
      <returns>関連付けられた <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />。</returns>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>インスタンスのプロパティを初期化します。</summary>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>インスタンスのプロパティを初期化します。</summary>
      <param name="context">コンテキスト。</param>
      <param name="connection">接続。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
      <summary>データベースから削除できるトランザクションのリストに指定したトランザクションを追加します。</summary>
      <param name="transaction">データベースから削除するトランザクション。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
      <summary>削除対象としてマークされたトランザクションを削除します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
      <summary>削除対象としてマークされたトランザクションの数が <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> を超えている場合は、それらのトランザクションを削除します。</summary>
      <param name="force">古いトランザクションの数が <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> を超えていない場合でもそれらをすべて削除する場合は true、それ以外の場合は false。</param>
      <param name="useExecutionStrategy">関連付けられている実行方法を使用して操作を実行する場合は true、それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
      <summary>削除対象としてマークされたトランザクションを非同期に削除します。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>削除対象としてマークされたトランザクションの数が <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> を超えている場合は、それらのトランザクションを削除します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="force">古いトランザクションの数が <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" /> を超えていない場合でもそれらをすべて削除する場合は true、それ以外の場合は false。</param>
      <param name="useExecutionStrategy">関連付けられている実行方法を使用して操作を実行する場合は true、それ以外の場合は false。</param>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>削除対象としてマークされたトランザクションを非同期に削除します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">キャンセル トークン。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
      <summary>トランザクション ログの消去前のコンテキストで実行されるトランザクションの数を取得します。既定値は 20 です。</summary>
      <returns>トランザクション ログの消去前のコンテキストで実行されるトランザクションの数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>ロールバックされたトランザクションの追跡を停止します。</summary>
      <param name="transaction">ロールバックされたトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
      <summary>トランザクションのコンテキストを取得します。</summary>
      <returns>トランザクションのコンテキスト。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>エンティティの変更追跡に関係するコンテキストでの諸機能にアクセスを提供する <see cref="T:System.Data.Entity.DbContext" /> の ChangeTracker メソッドによって返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>POCO エンティティのプロパティとリレーションシップに加えられた変更を検出します。エンティティの型によっては (<see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" /> から派生する変更追跡プロキシやエンティティなど)、変更が自動的に報告され、これらの型のエンティティに対する DetectChanges の呼び出しは通常必要ないことに注意してください。また、通常 DetectChanges は、<see cref="T:System.Data.Entity.DbContext" /> のメソッドとそれに関連するクラスによって自動的に呼び出されるので、このメソッドを明示的に呼び出す必要があるのはまれです。ただし、一般的にはパフォーマンス上の理由から、<see cref="P:System.Data.Entity.DbContext.Configuration" /> から AutoDetectChangesEnabled フラグを使って DetectChanges の自動呼び出しをオフにした方がよい場合があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>このコンテキストで追跡されるすべてのエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>エントリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>このコンテキストで追跡される特定の型のすべてのエンティティの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>エントリ。</returns>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> が指定したオブジェクトと等しいかどうかを指定します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> が指定したオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> に関連付けられているハッシュ コードを取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> に関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>
        <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> が呼び出されたときにデータベースに送信されるエンティティまたはリレーションシップの追加、削除、または変更を <see cref="T:System.Data.Entity.DbContext" /> が追跡しているかどうかをチェックします。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> に変更が存在する場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> の文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> クラスの非ジェネリック バージョンを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TElement">コレクション要素の型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> を取得します。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>データベースからこのコレクションのすべてのエンティティが読み込まれたかどうかを示す値を取得または設定します。</summary>
      <returns>すべての関連エンティティが読み込まれているか、IsLoaded が明示的に true に設定されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>データベースからエンティティのコレクションを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>データベースからエンティティのコレクションを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>データベースからエンティティのコレクションを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>データベースからこのコレクションを読み込むために使用されるクエリを返します。返されたクエリを LINQ を使用して変更することによって、実際にエンティティを読み込まずに、フィルター処理やデータベース内のコレクション内に存在するエンティティの数を数えるなど、データベース内での操作を実行できます。</summary>
      <returns>コレクションに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の Collection メソッドから返され、エンティティのコレクション ナビゲーション プロパティの読み込みなどの操作を可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TElement">エンティティ コレクション内の要素の型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>データベースからこのコレクションのすべてのエンティティが読み込まれたかどうかを示す値を取得または設定します。</summary>
      <returns>すべての関連エンティティが読み込まれているか、IsLoaded が明示的に true に設定されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>データベースからエンティティのコレクションを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>データベースからエンティティのコレクションを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>データベースからエンティティのコレクションを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>このオブジェクトが表すナビゲーション プロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>非ジェネリック バージョン。</returns>
      <param name="entry">ナビゲーション プロパティを表すオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>データベースからこのコレクションを読み込むために使用されるクエリを返します。返されたクエリを LINQ を使用して変更することによって、実際にエンティティを読み込まずに、フィルター処理やデータベース内のコレクション内に存在するエンティティの数を数えるなど、データベース内での操作を実行できます。</summary>
      <returns>コレクションに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> の作成に使用できる、または <see cref="T:System.Data.Entity.DbContext" /> のコンストラクターに渡すことのできる Entity Data Model (EDM) モデルの不変表記。パフォーマンスを向上させるには、この型のインスタンスをキャッシュしてコンテキストの作成に再使用する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>ObjectContext のインスタンスまたは ObjectContext から派生したクラスを作成します。代わりに適切な DbContext コンストラクターを使用することによって DbContext のインスタンスを作成できることに注意してください。派生 ObjectContext を使用する場合は、単独の EntityConnection パラメーターを持つパブリック コンストラクターが必要です。渡された接続は作成された ObjectContext によって使用されますが、そのコンテキストに所有されることはありません。コンテキストが破棄された後、その接続は呼び出し側で破棄する必要があります。</summary>
      <returns>コンテキスト。</returns>
      <param name="existingConnection">コンテキストが使用するデータベースへの既存の接続。</param>
      <typeparam name="TContext">作成するコンテキストの種類。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TComplexProperty">複合プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の ComplexProperty メソッドから返され、複合プロパティへのアクセスを可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TComplexProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="property">入れ子プロパティを表す式。</param>
      <typeparam name="TNestedComplexProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>このプロパティの入れ子の複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
      <typeparam name="TNestedComplexProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>このオブジェクトが表すプロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>非ジェネリック バージョン。</returns>
      <param name="entry">プロパティを表すオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="property">入れ子プロパティを表す式。</param>
      <typeparam name="TNestedProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
      <typeparam name="TNestedProperty">入れ子プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>このプロパティの入れ子プロパティを表すオブジェクトを取得します。このメソッドはスカラー プロパティにも複合プロパティにも使用できます。</summary>
      <returns>入れ子プロパティを表すオブジェクト。</returns>
      <param name="propertyName">入れ子プロパティの名前。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>データベース接続に関する情報を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>アプリケーション構成ファイルで指定された接続を表す、<see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionName">アプリケーション構成に含まれる接続文字列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>接続文字列に基づいて、<see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="connectionString">接続に使用する接続文字列。</param>
      <param name="providerInvariantName">接続に使用するプロバイダーの名前。SQL Server 用の "System.Data.SqlClient" を使用します。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>現在の <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 型が、指定したオブジェクト型と等しいかどうかを判断します。</summary>
      <returns>現在の <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> 型が指定したオブジェクト型と等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> オブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>現在の接続を表す値を生成します。</summary>
      <returns>現在の接続を表す値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> オブジェクトを文字列に変換します。</summary>
      <returns>現在のドライブ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> に関連付けられたデータベース接続文字列の作成元を示します。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>接続文字列は外部構成から読み取られました。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>接続文字列は規約に従って作成されました。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>接続文字列は、DbContextInfo に提供された接続情報によってオーバーライドされました。</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>接続文字列は実行時に明示的に指定されました。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>コンテキストの構成オプションへのアクセスを提供するために <see cref="T:System.Data.Entity.DbContext" /> の Configuration メソッドによって返されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>
        <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" /> メソッドを <see cref="T:System.Data.Entity.DbContext" /> と関連クラスのメソッドによって自動的に呼び出すかどうかを示す値を取得または設定します。既定値は true です。</summary>
      <returns>自動的に呼び出す場合は true、それ以外は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.EnsureTransactionsForFunctionsAndCommands">
      <summary>SQL の関数とコマンドが常にトランザクション内で実行されるかどうかを決定する値を取得または設定します。</summary>
      <returns>既定のトランザクションの動作。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>構成が指定したオブジェクトと等しいかどうかを指定します。</summary>
      <returns>構成が指定したオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>構成に関連付けられているハッシュ コードを取得します。</summary>
      <returns>構成に関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>ナビゲーション プロパティとして公開されているリレーションシップの遅延読み込みが有効になっているかどうかを示す値を取得または設定します。既定では、遅延読み込みは有効になっています。</summary>
      <returns>遅延読み込みが有効の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>エンティティ型のインスタンスが作成されるたびに、動的に生成されたプロキシ クラスのインスタンスがフレームワークによって作成されるかどうかを示す値を取得または設定します。このフラグによってプロキシの作成が有効になっていても、エンティティ型がプロキシ扱いの要件を満足しなければプロキシ インスタンスは作成されないことに注意してください。プロキシ作成は既定で有効になっています。</summary>
      <returns>プロキシ作成が有効な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" /> の文字列形式。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>null になる可能性のある 2 つのオペランドを比較する際、データベースの null セマンティクスを使用するかどうかを示す値を取得または設定します。既定値は false です。たとえば、(operand1 == operand2) は次のように変換されます。UseDatabaseNullSemantics が true の場合は (operand1 = operand2)。UseDatabaseNullSemantics が false の場合はそれぞれ (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL)))。</summary>
      <returns>データベースの null 比較動作が有効な場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>
        <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> が呼び出されたとき、追跡されているエンティティが自動的に検証されるかどうかを示す値を取得または設定します。既定値は true です。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>指定した <see cref="T:System.Data.Entity.DbContext" /> 型に関するランタイム情報を提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>指定されたコンテキスト型で <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> 具象型。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>指定されたコンテキスト型と構成ファイルで <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> 具象型。</param>
      <param name="config">config ファイルを表すオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>指定された接続情報と構成ファイルを使用して、<see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="config">config ファイルを表すオブジェクト。</param>
      <param name="connectionInfo">使用するデータベースの接続情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>指定されたコンテキスト型、構成ファイル、およびプロバイダー情報を使用して、<see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="config">config ファイルを表すオブジェクト。</param>
      <param name="modelProviderInfo">対象とする基になる ADO.NET プロバイダーを指定する <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>指定されたコンテキスト型と接続文字列の設定を使用して、<see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="connectionStringSettings">接続文字列のコレクション。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>指定されたコンテキスト型と接続情報を使用して、<see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="connectionInfo">使用するデータベースの接続情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>指定されたコンテキスト型とプロバイダー情報を使用して、<see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.DbContext" /> から派生した型。</param>
      <param name="modelProviderInfo">対象とする基になる ADO.NET プロバイダーを指定する <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続の ADO.NET プロバイダー名を取得します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続の ADO.NET プロバイダー名。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列を取得します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列名を取得します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列名。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列の作成元を取得します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型で使用される接続文字列の作成元。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 具象型を取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbContext" /> 具象型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> オブジェクトのインスタンスを作成します。</summary>
      <returns>作成されたインスタンス。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>基になる <see cref="T:System.Data.Entity.DbContext" /> 型を作成できるかどうかを取得します。</summary>
      <returns>基になる <see cref="T:System.Data.Entity.DbContext" /> 型を作成できる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>コンテキストで OnModelCreating を実行した後、DbModelBuilder 上で実行するアクションを取得または設定します。</summary>
      <returns>コンテキストで OnModelCreating を実行した後、DbModelBuilder 上で実行するアクション。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>このオブジェクトが表す追跡対象エンティティのジェネリック型に対応するジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> クラスの新しいインスタンスを返します。追跡対象のエンティティ型にジェネリック型との互換性がなければ、例外がスローされることに注意してください。</summary>
      <returns>ジェネリック バージョン</returns>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="propertyName">複合プロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの現在のプロパティ値を取得します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>エンティティを取得します。</summary>
      <returns>エンティティ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>指定した <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> がこのインスタンスに等しい場合は true、それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定された <see cref="T:System.Object" /> がこのインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースをクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されないことに注意してください。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>ストア値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースを非同期でクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されないことに注意してください。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期操作を表すタスク。タスク結果には、ストア値が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースを非同期でクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されないことに注意してください。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期操作を表すタスク。タスク結果には、ストア値が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。ハッシュ アルゴリズムでもハッシュ テーブルのようなデータ構造でも使用できるもの。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>この <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> インスタンスを検証して検証結果を返します。</summary>
      <returns>エンティティの検証結果。<see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> メソッドがオーバーライドされた場合は null の可能性があります。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>そのエンティティのメンバーを表すオブジェクトを取得します。返されるオブジェクトのランタイム型は取得されるメンバーの種類によって異なります。現在サポートされているメンバー型とその戻り値の型は次のとおりです。参照ナビゲーション プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.コレクション ナビゲーション プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.プリミティブ/スカラー プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.複合プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> です。</summary>
      <returns>メンバーを表すオブジェクト。</returns>
      <param name="propertyName">メンバーの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの元のプロパティ値を取得します。元の値は通常は最後にデータベースからクエリされたときのそのエンティティのプロパティ値です。</summary>
      <returns>元の値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>このエンティティから別のエンティティへの参照 (つまりコレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>データベースからエンティティを再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>データベースからエンティティを非同期で再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>データベースからエンティティを非同期で再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>エンティティの状態を取得または設定します。</summary>
      <returns>状態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> の文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>このクラスのインスタンスは、<see cref="T:System.Data.Entity.DbContext" /> によって追跡されているエンティティの情報および制御へのアクセスを提供します。この型のオブジェクトを取得するには、そのコンテキストの Entity または Entities メソッドを使用します。</summary>
      <typeparam name="TEntity">エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティを表す式。</param>
      <typeparam name="TElement">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
      <typeparam name="TElement">コレクション内の要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>このエンティティから関連するエンティティのコレクションへのコレクション ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="property">複合プロパティを表す式。</param>
      <typeparam name="TComplexProperty">複合プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="propertyName">複合プロパティの名前。</param>
      <typeparam name="TComplexProperty">複合プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>このエンティティの複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>複合プロパティを表すオブジェクト。</returns>
      <param name="propertyName">複合プロパティの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの現在のプロパティ値を取得します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>エンティティを取得します。</summary>
      <returns>エンティティ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>指定した <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> がこのインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">このインスタンスと比較する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>指定した <see cref="T:System.Object" /> がこのインスタンスと等しいかどうかを判定します。2 つの <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> インスタンスは、両方とも <see cref="T:System.Data.Entity.DbContext" /> 上の同じエンティティに対するエントリなら等しいと判定されます。</summary>
      <returns>指定された <see cref="T:System.Object" /> がこのインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">このインスタンスと比較する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースをクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されないことに注意してください。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>ストア値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースを非同期でクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されないことに注意してください。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期操作を表すタスク。タスク結果には、ストア値が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>現在データベース内に存在している追跡対象エンティティの値のコピーを検索するためにデータベースを非同期でクエリします。返されたディクショナリ内の値を変更してもデータベース内の値は更新されないことに注意してください。データベース内にそのエンティティが見つからない場合は null が返されます。</summary>
      <returns>非同期操作を表すタスク。タスク結果には、ストア値が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。ハッシュ アルゴリズムでもハッシュ テーブルのようなデータ構造でも使用できるもの。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>この <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> インスタンスを検証して検証結果を返します。</summary>
      <returns>エンティティの検証結果。<see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> メソッドがオーバーライドされた場合は null の可能性があります。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>そのエンティティのメンバーを表すオブジェクトを取得します。返されるオブジェクトのランタイム型は取得されるメンバーの種類によって異なります。現在サポートされているメンバー型とその戻り値の型は次のとおりです。参照ナビゲーション プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.コレクション ナビゲーション プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.プリミティブ/スカラー プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.複合プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" /> です。</summary>
      <returns>メンバーを表すオブジェクト。</returns>
      <param name="propertyName">メンバーの名前。</param>
      <typeparam name="TMember">メンバーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>そのエンティティのメンバーを表すオブジェクトを取得します。返されるオブジェクトのランタイム型は取得されるメンバーの種類によって異なります。現在サポートされているメンバー型とその戻り値の型は次のとおりです。参照ナビゲーション プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.コレクション ナビゲーション プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.プリミティブ/スカラー プロパティ:<see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.複合プロパティ: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> です。</summary>
      <returns>メンバーを表すオブジェクト。</returns>
      <param name="propertyName">メンバーの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>このオブジェクトが表す追跡対象エンティティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>非ジェネリック バージョン。</returns>
      <param name="entry">追跡対象エンティティを表すオブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>このオブジェクトによって表される追跡対象エンティティの元のプロパティ値を取得します。元の値は通常は最後にデータベースからクエリされたときのそのエンティティのプロパティ値です。</summary>
      <returns>元の値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="property">プロパティを表す式。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="propertyName">プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>このエンティティのスカラー プロパティまたは複合プロパティを表すオブジェクトを取得します。</summary>
      <returns>プロパティを表すオブジェクト。</returns>
      <param name="propertyName">プロパティの名前。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティから別のエンティティへの参照 (つまりコレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティを表す式。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>このエンティティから別のエンティティへの参照 (つまりコレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>このエンティティから別のエンティティへの参照 (つまりコレクションではない) ナビゲーション プロパティを表すオブジェクトを取得します。</summary>
      <returns>ナビゲーション プロパティを表すオブジェクト。</returns>
      <param name="navigationProperty">ナビゲーション プロパティの名前。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>データベースからエンティティを再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>データベースからエンティティを非同期で再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>データベースからエンティティを非同期で再読み込みして、プロパティ値をすべてデータベースからの値で上書きします。このメソッドを呼び出した後は、エンティティは変更なし状態になります。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>エンティティの状態を取得または設定します。</summary>
      <returns>状態。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>データベース エンティティ値の文字列表記を返します。</summary>
      <returns>データベース エンティティ値の文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>信頼できない操作や一時的な状態のための再試行メカニズムの基本実装を提供します。このメカニズムでは、再試行を繰り返すたびに待ち時間が指数関数的に長くなります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>指定された再試行制限回数と再試行の間隔を使用して、<see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> の新しいインスタンスを初期化します。</summary>
      <param name="maxRetryCount">再試行の最大回数。</param>
      <param name="maxDelay">再試行の最大間隔 (ミリ秒単位)。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>現在の再試行ポリシーを満たしている間、指定された操作を繰り返し実行します。</summary>
      <param name="operation">結果を返さない実行可能な操作を表すデリゲート。</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">再試行の間隔の方針によって、操作をこれ以上再試行できないと判断された場合。</exception>
      <exception cref="T:System.InvalidOperationException">既存のトランザクションが検出されたが、実行方針でそのトランザクションがサポートされていない場合。</exception>
      <exception cref="T:System.InvalidOperationException">操作を実行するためにこのインスタンスが既に使用されている場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>現在の再試行ポリシーを満たしている間、指定された操作を繰り返し実行します。</summary>
      <returns>操作の結果。</returns>
      <param name="operation">
        <paramref name="TResult" /> 型の結果を返す実行可能な操作を表すデリゲート。</param>
      <typeparam name="TResult">実行可能な操作で想定される結果の型。</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">再試行の間隔の方針によって、操作をこれ以上再試行できないと判断された場合。</exception>
      <exception cref="T:System.InvalidOperationException">既存のトランザクションが検出されたが、実行方針でそのトランザクションがサポートされていない場合。</exception>
      <exception cref="T:System.InvalidOperationException">操作を実行するためにこのインスタンスが既に使用されている場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>現在の再試行ポリシーを満たしている間、指定された非同期操作を繰り返し実行します。</summary>
      <returns>元のタスクが正常に完了した場合 (初回実行時または一時的なエラーにより再試行した後) に最後まで実行されるタスク。タスクが一時的でないエラーで失敗した場合、または再試行制限回数に達した場合は、返されるタスクは途中終了し、例外を確認する必要があります。</returns>
      <param name="operation">
        <paramref name="TResult" /> 型の開始されたタスクを返す関数。</param>
      <param name="cancellationToken">既に実行中の操作または既に完了した操作ではなく、再試行操作のキャンセルに使用するキャンセル トークン。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> によって返される <see cref="T:System.Threading.Tasks.Task`1" /> の結果型。</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">再試行の間隔の方針によって、操作をこれ以上再試行できないと判断された場合。</exception>
      <exception cref="T:System.InvalidOperationException">既存のトランザクションが検出されたが、実行方針でそのトランザクションがサポートされていない場合。</exception>
      <exception cref="T:System.InvalidOperationException">操作を実行するためにこのインスタンスが既に使用されている場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>現在の再試行ポリシーを満たしている間、指定された非同期操作を繰り返し実行します。</summary>
      <returns>元のタスクが正常に完了した場合 (初回実行時または一時的なエラーにより再試行した後) に最後まで実行されるタスク。タスクが一時的でないエラーで失敗した場合、または再試行制限回数に達した場合は、返されるタスクは途中終了し、例外を確認する必要があります。</returns>
      <param name="operation">開始されたタスクを返す関数。</param>
      <param name="cancellationToken">既に実行中の操作または既に完了した操作ではなく、再試行操作のキャンセルに使用するキャンセル トークン。</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">再試行の間隔の方針によって、操作をこれ以上再試行できないと判断された場合。</exception>
      <exception cref="T:System.InvalidOperationException">既存のトランザクションが検出されたが、実行方針でそのトランザクションがサポートされていない場合。</exception>
      <exception cref="T:System.InvalidOperationException">操作を実行するためにこのインスタンスが既に使用されている場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>操作を再試行するかどうか、および次の試行までの待ち時間を判断します。</summary>
      <returns>操作を再試行する場合は次に実行を試行するまでの待ち時間。それ以外の場合は null。</returns>
      <param name="lastException">最後に実行しようとしたときにスローされる例外。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>エラー発生後に <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> の再試行が可能かどうかを示す値を取得します。</summary>
      <returns>エラー発生後に <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> の再試行が可能な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>指定された例外が、再試行によって補正できる一時的なエラーを表すかどうかを判断します。</summary>
      <returns>指定された例外が一時的なものと見なされる場合は true。それ以外の場合は false。</returns>
      <param name="exception">検証する例外オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>
        <see cref="T:System.Data.Entity.Core.EntityException" />、<see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />、または <see cref="T:System.Data.Entity.Core.UpdateException" /> の場合に <paramref name="exception" /> から InnerException を再帰的に取得し、<paramref name="exceptionHandler" /> に渡します。</summary>
      <returns>
        <paramref name="exceptionHandler" /> の結果。</returns>
      <param name="exception">ラップを解除する例外。</param>
      <param name="exceptionHandler">ラップされていない例外で呼び出されるデリゲート。</param>
      <typeparam name="T">ラップを解除する例外の型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>これは抽象型基本クラスであり、エンティティのスカラー プロパティ、複合プロパティ、またはナビゲーション プロパティを表すために使用されます。スカラーおよび複合プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> を、参照ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> を、コレクション ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> を使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>このメンバーが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>このメンバーを所有するエンティティのエントリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>指定したエントリが現在のエントリと等しいかどうかを判断します。</summary>
      <returns>指定したエントリが現在のエントリと等しい場合は true。異なる場合は false。</returns>
      <param name="obj">現在のエントリと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>このエントリのハッシュ関数を返します。</summary>
      <returns>このエントリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>このプロパティを検証します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> オブジェクトのコレクション。null になることはありません。エンティティが有効な場合、コレクションは空になります。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>プロパティの名前を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>データベース プロパティ値の文字列表記を返します。</summary>
      <returns>データベース プロパティ値の文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>これは抽象型基本クラスであり、エンティティのスカラー プロパティ、複合プロパティ、またはナビゲーション プロパティを表すために使用されます。スカラーおよび複合プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> を、参照ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> を、コレクション ナビゲーション プロパティは派生クラスの <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" /> を使用します。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>このメンバーが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このメンバーを所有するエンティティのエントリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>オブジェクトが指定したオブジェクトと等しいかどうかを指定します。</summary>
      <returns>オブジェクトが指定したオブジェクトと等しい場合は true。異なる場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>オブジェクトに関連付けられているハッシュ コードを取得します。</summary>
      <returns>オブジェクトに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>このプロパティを検証します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> オブジェクトのコレクション。null になることはありません。エンティティが有効な場合、コレクションは空になります。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>プロパティの名前を取得します。</summary>
      <returns>プロパティの名前。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>このオブジェクトが表すプロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>非ジェネリック バージョン。</returns>
      <param name="entry">プロパティを表すオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" /> の文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> によって作成された Entity Data Model (EDM) を表します。Compile メソッドは、この EDM 表現から <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> への変換に使用できます。後者はモデルのスナップショットをコンパイルしたものであり、<see cref="T:System.Data.Entity.DbContext" /> または <see cref="T:System.Data.Objects.ObjectContext" /> インスタンスのキャッシュと作成に適しています。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>このモードの <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> を作成します。これは <see cref="T:System.Data.Entity.DbContext" /> インスタンスのキャッシュと作成に適したスナップショットをコンパイルしたものです。</summary>
      <returns>コンパイルされたモデル。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
      <summary>概念モデルを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
      <summary>マッピング モデルを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>プロバイダーの情報を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>プロバイダー マニフェストを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
      <summary>ストア モデルを取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>このプロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>このプロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>このプロパティの値が、データベースから読み込まれた後で変更されたかどうかを示す値を取得または設定します。</summary>
      <returns>インスタンスが変更されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>このプロパティの元の値を取得または設定します。</summary>
      <returns>元の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>これが入れ子のプロパティとなっている <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> のプロパティ。このメソッドは、複合オブジェクトのプロパティには null 以外のエントリのみを返します。そのエンティティ自体のプロパティには null を返します。</summary>
      <returns>親の複合プロパティに対するエントリ。エンティティ プロパティの場合は null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の Property メソッドから返され、スカラーまたは複合プロパティへのアクセスを可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>このプロパティの現在の値を取得または設定します。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>このプロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このプロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>このプロパティの値が、データベースから読み込まれた後で変更されたかどうかを示す値を取得または設定します。</summary>
      <returns>インスタンスが変更されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>このオブジェクトが表すプロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>非ジェネリック バージョン。</returns>
      <param name="entry">プロパティを表すオブジェクト。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>このプロパティの元の値を取得または設定します。</summary>
      <returns>元の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>これが入れ子のプロパティとなっている <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> のプロパティ。このメソッドは、複合オブジェクトのプロパティには null 以外のエントリのみを返します。そのエンティティ自体のプロパティには null を返します。</summary>
      <returns>親の複合プロパティに対するエントリ。エンティティ プロパティの場合は null。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>基になっているエンティティまたは複合オブジェクトの全プロパティのコレクション。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>このディクショナリ内の全プロパティのコピーを含む新しいディクショナリを作成します。新しいディクショナリでの変更はこのディクショナリには反映されません。その逆も同じです。</summary>
      <returns>このディクショナリの複製。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> が特定のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> が特定のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>プロパティ値に関連付けられているハッシュ コードを取得します。</summary>
      <returns>プロパティ値に関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>プロパティの値を取得します。インデックス付きプロパティの取得に似ていますが、ジェネリック パラメーターの型が適用されます。多数のキャストを使用する式を書かなくても済むので、入れ子ディクショナリで特に便利です。</summary>
      <returns>プロパティの値。</returns>
      <param name="propertyName">プロパティ名。</param>
      <typeparam name="TValue">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>指定したプロパティ名とそのプロパティの値を取得または設定します。値にはこのクラスの入れ子インスタンスも使用できます。</summary>
      <returns>プロパティの値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>このディクショナリ内の全プロパティの名前のセットを読み取り専用セットとして取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>別のディクショナリから値を読み取って、このディクショナリの値を設定します。別のディクショナリはこのディクショナリと同じ型またはこのディクショナリの型から派生した型に基づいている必要があります。</summary>
      <param name="propertyValues">このディクショナリから値を読み取ります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>指定されているオブジェクトから値を読み取って、このディクショナリの値を設定します。オブジェクトの型は任意です。オブジェクト上のプロパティはどれも、名前がディクショナリ内のプロパティ名に一致し、読み取れるものであれば、読み取られます。その他のプロパティは無視されます。これによって、たとえば、単純な Data Transfer Object (DTO) からプロパティをコピーできるようになります。</summary>
      <param name="obj">このオブジェクトから値を読み取ります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>このディクショナリの基になっている型を持つオブジェクトを作成して、このディクショナリからのプロパティ値を与えます。</summary>
      <returns>このディクショナリのプロパティが新しいオブジェクトにコピーされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> の文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>プロバイダーとサーバーのバージョンを識別する文字列のペアを単一のオブジェクトにグループ化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>プロバイダーの不変名とマニフェスト トークンから新しいオブジェクトを作成します。</summary>
      <param name="providerInvariantName">プロバイダーを識別する文字列。たとえば、SQL Server プロバイダーには、"System.Data.SqlCient" という文字列が使用されます。</param>
      <param name="providerManifestToken">使用中のデータベース サーバーのバージョンを識別する文字列。たとえば、SQL Server 2008 の SQL Server プロバイダーには "2008" という文字列が使用されます。これを null にすることはできませんが、空にすることはできます。マニフェスト トークンは、バージョン ヒントと呼ばれることもあります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のこのオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>現在のオブジェクトのハッシュ関数を取得します。</summary>
      <returns>現在のオブジェクトのハッシュ関数。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>プロバイダーを識別する文字列。たとえば、SQL Server プロバイダーには、"System.Data.SqlCient" という文字列が使用されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>使用中のデータベース サーバーのバージョンを識別する文字列。たとえば、SQL Server 2008 の SQL Server プロバイダーには "2008" という文字列が使用されます。これを null にすることはできませんが、空にすることはできます。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>DbContext に対する非ジェネリックの LINQ to Entities クエリを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>返されたエンティティが <see cref="T:System.Data.Entity.DbContext" /> にキャッシュされない新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。</summary>
      <returns>AsStreaming が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> オブジェクトを返します。</summary>
      <returns>ジェネリック セット オブジェクト。</returns>
      <typeparam name="TElement">クエリ作成の対象となった要素型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>IQueryable 要素型。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>クエリが指定したオブジェクトと等しいかどうかを指定します。</summary>
      <returns>クエリが指定したオブジェクトと等しい場合は true。異なる場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>クエリに関連付けられているハッシュ コードを取得します。</summary>
      <returns>クエリに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>クエリに関連付けられている型を取得します。</summary>
      <returns>クエリに関連付けられている型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを持つ新しい DbQuery&amp;lt;T&amp;gt;。</returns>
      <param name="path">クエリ結果で返す関連オブジェクトをドットで区切った一覧。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>列挙されたときにデータベースに対してクエリを実行する <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。代わりに、Load 拡張メソッドなどを使用して DbSet にデータを挿入してから、ローカル データにバインドします。WPF では、DbSet.Local にバインドします。Windows Forms では、DbSet.Local.ToBindingList() にバインドします。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対してクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 式。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>IQueryable プロバイダー。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>基になっているクエリの <see cref="T:System.String" /> 表記を返します。</summary>
      <returns>クエリ文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>DbContext に対する LINQ to Entities クエリを表します。</summary>
      <typeparam name="TResult">クエリの対象となるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>返されたエンティティが <see cref="T:System.Data.Entity.DbContext" /> にキャッシュされない新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。</summary>
      <returns>AsStreaming が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>現在のクエリが指定されたクエリに等しいかどうかを判断します。</summary>
      <returns>現在のクエリが指定されたクエリと等しい場合は true。異なる場合は false。</returns>
      <param name="obj">現在のクエリと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>このクエリのハッシュ関数を返します。</summary>
      <returns>このクエリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>現在のクエリの型を取得します。</summary>
      <returns>現在のクエリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>クエリ結果に含める関連オブジェクトを指定します。</summary>
      <returns>定義されたクエリ パスを使用する新しい <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />。</returns>
      <param name="path">クエリ結果で返す関連オブジェクトをドットで区切った一覧。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>このクエリに対して非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> クラスの新しいインスタンスを返します。</summary>
      <returns>非ジェネリック バージョン。</returns>
      <param name="entry">クエリです。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>このクエリの列挙体を取得します。その結果、クエリがストアに対して実行されます。</summary>
      <returns>クエリの <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>列挙されたときにデータベースに対してクエリを実行する <see cref="T:System.Collections.Generic.IEnumerator`1" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。代わりに、Load 拡張メソッドなどを使用して DbSet にデータを挿入してから、ローカル データにバインドします。WPF では、DbSet.Local にバインドします。Windows Forms では、DbSet.Local.ToBindingList() にバインドします。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対してクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対してクエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> を返します。</summary>
      <returns>クエリ結果。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>IQueryable 要素型。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>IQueryable LINQ 式。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>IQueryable プロバイダー。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>基になっているクエリの <see cref="T:System.String" /> 表記を返します。</summary>
      <returns>クエリ文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から作成されたエンティティ以外のものに対する SQL クエリを表します。クエリはそのコンテキストからの接続を使用して実行されます。このクラスのインスタンスは <see cref="P:System.Data.Entity.DbContext.Database" /> インスタンスから取得されます。クエリは、このオブジェクトが作成されたときに実行されるのではなく、列挙されるときに毎回実行されます。たとえば foreach を使用した場合などです。エンティティに対する SQL クエリは <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> を使用して作成されます。このクラスのジェネリック バージョンについては、<see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。</summary>
      <returns>AsStreaming が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>クエリが指定したオブジェクトと等しいかどうかを指定します。</summary>
      <returns>クエリが指定したオブジェクトと等しい場合は true。異なる場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="action">各要素に対して実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="action">各要素に対して実行するアクション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>列挙されたときにデータベースに対して SQL クエリを実行する <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>クエリに関連付けられているハッシュ コードを取得します。</summary>
      <returns>クエリに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>クエリに関連付けられている型を取得します。</summary>
      <returns>クエリに関連付けられている型。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対して SQL クエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>非同期に列挙してクエリから <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリからの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>非同期に列挙してクエリから <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリからの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>クエリが作成されたときに設定された SQL 文字列を含む <see cref="T:System.String" /> を返します。パラメーターは含まれません。</summary>
      <returns>このインスタンスを表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から作成されたエンティティ以外のものに対する SQL クエリを表します。クエリはそのコンテキストからの接続を使用して実行されます。このクラスのインスタンスは <see cref="P:System.Data.Entity.DbContext.Database" /> インスタンスから取得されます。クエリは、このオブジェクトが作成されたときに実行されるのではなく、列挙されるときに毎回実行されます。たとえば foreach を使用した場合などです。エンティティに対する SQL クエリは <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> を使用して作成されます。このクラスの非ジェネリック バージョンについては、<see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> を参照してください。</summary>
      <typeparam name="TElement">クエリにより返される要素の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>クエリのすべての要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でクエリ結果のすべての要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>クエリのすべての要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でクエリ結果のすべての要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>クエリに要素が含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果に要素が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>クエリのいずれかの要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でクエリ結果のいずれかの要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>クエリのいずれかの要素が条件を満たしているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された述語でクエリ結果のいずれかの要素がテストに合格する場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>クエリに要素が含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果に要素が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。</summary>
      <returns>AsStreaming が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>既定の等値比較子を使用して、指定した要素がクエリに含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果に指定した値が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="value">クエリ結果内で検索するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>既定の等値比較子を使用して、指定した要素がクエリに含まれているかどうかを非同期に判断します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果に指定した値が含まれている場合は true が、それ以外の場合は false が示されます。</returns>
      <param name="value">クエリ結果内で検索するオブジェクト。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>クエリの要素数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の要素数が示されます。</returns>
      <exception cref="T:System.OverflowException">クエリ結果の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>条件を満たすクエリの要素数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たす、クエリ結果の要素数が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <exception cref="T:System.OverflowException">述語関数の条件を満たすクエリ結果の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>条件を満たすクエリの要素数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たす、クエリ結果の要素数が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">述語関数の条件を満たすクエリ結果の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>クエリの要素数を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の要素数が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">クエリ結果の要素数が <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>現在のクエリが指定されたクエリに等しいかどうかを判断します。</summary>
      <returns>現在のクエリが指定されたクエリと等しい場合は true。異なる場合は false。</returns>
      <param name="obj">現在のクエリと比較するクエリ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>クエリの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の最初の要素が示されます。</returns>
      <exception cref="T:System.InvalidOperationException">クエリ結果が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>指定された条件を満たす、クエリの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された条件を満たす、クエリ結果の最初の要素が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">クエリ結果が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>指定された条件を満たす、クエリの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された条件を満たす、クエリ結果の最初の要素が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">クエリ結果が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>クエリの最初の要素を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の最初の要素が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">クエリ結果が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>クエリの最初の要素を非同期に返します。クエリ結果に要素が含まれていない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果が空の場合は default (<paramref name="TElement" />) が、それ以外の場合はクエリ結果の最初の要素が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>指定された条件を満たす、クエリの最初の要素を非同期に返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果が空の場合または <paramref name="predicate" /> で指定されたテストに合格する要素がない場合は default (<paramref name="TElement" />) が、それ以外の場合は、<paramref name="predicate" /> で指定されたテストに合格する、クエリ結果の最初の要素が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>指定された条件を満たす、クエリの最初の要素を非同期に返します。このような要素が見つからない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果が空の場合または <paramref name="predicate" /> で指定されたテストに合格する要素がない場合は default (<paramref name="TElement" />) が、それ以外の場合は、<paramref name="predicate" /> で指定されたテストに合格する、クエリ結果の最初の要素が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>クエリの最初の要素を非同期に返します。クエリ結果に要素が含まれていない場合は既定値を返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果が空の場合は default (<paramref name="TElement" />) が、それ以外の場合はクエリ結果の最初の要素が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="action">実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>クエリ結果を非同期に列挙し、各要素に対して指定されたアクションを実行します。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="action">実行するアクション。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>列挙されたときにデータベースに対して SQL クエリを実行する <see cref="T:System.Collections.Generic.IEnumerator`1" /> を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>このクエリのハッシュ関数を返します。</summary>
      <returns>このクエリのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>現在のクエリの型を取得します。</summary>
      <returns>現在のクエリの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>クエリの要素の総数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の要素数が示されます。</returns>
      <exception cref="T:System.OverflowException">クエリ結果の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>条件を満たすクエリの要素数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たす、クエリ結果の要素数が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <exception cref="T:System.OverflowException">述語関数の条件を満たすクエリ結果の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>条件を満たすクエリの要素数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、述語関数の条件を満たす、クエリ結果の要素数が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">述語関数の条件を満たすクエリ結果の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>クエリの要素の総数を表す <see cref="T:System.Int64" /> を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の要素数が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OverflowException">クエリ結果の要素数が <see cref="F:System.Int64.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>クエリの最大値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の最大値が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>クエリの最大値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の最大値が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>クエリの最小値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の最小値が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>クエリの最小値を非同期に返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の最小値が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>クエリの唯一の要素を非同期に返し、シーケンス内の要素が 1 つだけではない場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の 1 つの要素が示されます。</returns>
      <exception cref="T:System.InvalidOperationException">クエリ結果に複数の要素があります。</exception>
      <exception cref="T:System.InvalidOperationException">クエリ結果が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>指定された条件を満たすクエリの唯一の要素を非同期に返し、そのような要素が複数存在する場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす、クエリ結果の 1 つの要素が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>指定された条件を満たすクエリの唯一の要素を非同期に返し、そのような要素が複数存在する場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす、クエリ結果の 1 つの要素が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素がありません。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>クエリの唯一の要素を非同期に返し、シーケンス内の要素が 1 つだけではない場合は例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の 1 つの要素が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">クエリ結果に複数の要素があります。</exception>
      <exception cref="T:System.InvalidOperationException">クエリ結果が空です。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>シーケンスの唯一の要素を非同期に返します。シーケンスが空の場合、既定値を返します。シーケンス内に要素が複数ある場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の 1 つの要素が示されます。シーケンスに要素が含まれていない場合は default (<paramref name="TElement" />) が示されます。</returns>
      <exception cref="T:System.InvalidOperationException">クエリ結果に複数の要素があります。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>指定された条件を満たす、クエリの唯一の要素を非同期に返します。そのような要素が存在しない場合、既定値を返します。複数の要素が条件を満たす場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす、クエリ結果の 1 つの要素が示されます。このような要素が見つからない場合は default (<paramref name="TElement" />) が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>指定された条件を満たす、クエリの唯一の要素を非同期に返します。そのような要素が存在しない場合、既定値を返します。複数の要素が条件を満たす場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、<paramref name="predicate" /> の条件を満たす、クエリ結果の 1 つの要素が示されます。このような要素が見つからない場合は default (<paramref name="TElement" />) が示されます。</returns>
      <param name="predicate">各要素が条件を満たしているかどうかをテストする関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> が null です。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="predicate" /> の条件を満たす要素が複数あります。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>シーケンスの唯一の要素を非同期に返します。シーケンスが空の場合、既定値を返します。シーケンス内に要素が複数ある場合、このメソッドは例外をスローします。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリ結果の 1 つの要素が示されます。シーケンスに要素が含まれていない場合は default (<paramref name="TElement" />) が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.InvalidOperationException">クエリ結果に複数の要素があります。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>列挙されたときにデータベースに対して SQL クエリを実行する <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>false を返します。</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>例外をスローして、ストア クエリに直接バインドできないことを示します。</summary>
      <returns>返されることはありません。常にスローされます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対して SQL クエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>列挙されたときにデータベースに対して SQL クエリを実行する <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> を返します。</summary>
      <returns>要素の反復処理に使用できる <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>非同期に列挙してクエリから配列を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む配列が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>非同期に列挙してクエリから配列を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む配列が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>指定されたキー セレクター関数に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定されたキー セレクター関数および比較子に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数および比較子に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>指定されたキー セレクター関数および要素セレクター関数に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TResult" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TResult" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数、比較子、および要素セレクター関数に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TResult" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="comparer">キーを比較する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数および要素セレクター関数に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、クエリから選択された <see cref="T:System.Collections.Generic.Dictionary`2" /> 型の値を格納する <paramref name="TResult" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="elementSelector">各要素から結果の要素値を生成する変換関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
      <typeparam name="TResult">
        <paramref name="elementSelector" /> によって返される値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>指定されたキー セレクター関数に従って、非同期に列挙してクエリから <see cref="T:System.Collections.Generic.Dictionary`2" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、選択したキーと値を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> が示されます。</returns>
      <param name="keySelector">各要素からキーを抽出する関数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TKey">
        <paramref name="keySelector" /> によって返されるキーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>非同期に列挙してクエリから <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>非同期に列挙してクエリから <see cref="T:System.Collections.Generic.List`1" /> を作成します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、入力シーケンスの要素を含む <see cref="T:System.Collections.Generic.List`1" /> が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>クエリが作成されたときに設定された SQL 文字列を含む <see cref="T:System.String" /> を返します。パラメーターは含まれません。</summary>
      <returns>このインスタンスを表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> クラスの非ジェネリック バージョン。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>同等のジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" /> オブジェクトを返します。</summary>
      <returns>同等のジェネリック オブジェクト。</returns>
      <typeparam name="TEntity">そのメンバーの宣言に使用されているエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>データベースからエンティティが読み込まれたかどうかを示す値を取得または設定します。</summary>
      <returns>エンティティが読み込まれているか、IsLoaded が明示的に true に設定されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>データベースからエンティティを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>データベースからエンティティを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>データベースからエンティティを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>データベースからこのエンティティを読み込むために使用されるクエリを返します。返されたクエリは、フィルター処理やデータベース内での操作を実行するように LINQ を使って変更できます。</summary>
      <returns>エンティティに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>このクラスのインスタンスは <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> の Reference メソッドから返され、エンティティの参照ナビゲーション プロパティの読み込みなどの操作を可能にします。</summary>
      <typeparam name="TEntity">このプロパティが属するエンティティの型。</typeparam>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>ナビゲーション プロパティの現在の値を取得または設定します。現在の値はナビゲーション プロパティが参照するエンティティです。</summary>
      <returns>現在の値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>このナビゲーション プロパティが属する <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />。</summary>
      <returns>このナビゲーション プロパティを所有するエンティティのエントリ。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>データベースからエンティティが読み込まれたかどうかを示す値を取得または設定します。</summary>
      <returns>エンティティが読み込まれているか、IsLoaded が明示的に true に設定されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>データベースからエンティティを読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>データベースからエンティティを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>データベースからエンティティを非同期に読み込みます。コンテキスト内に既に存在するエンティティはデータベースからの値で上書きされないことに注意してください。</summary>
      <returns>非同期操作を表すタスク。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>プロパティ名を取得します。</summary>
      <returns>プロパティ名。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>このオブジェクトが表すナビゲーション プロパティの非ジェネリック <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> クラスの新しいインスタンスを返します。</summary>
      <returns>非ジェネリック バージョン。</returns>
      <param name="entry">ナビゲーション プロパティを表すオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>データベースからこのエンティティを読み込むために使用されるクエリを返します。返されたクエリは、フィルター処理やデータベース内での操作を実行するように LINQ を使って変更できます。</summary>
      <returns>エンティティに対するクエリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から作成されたエンティティに対する SQL クエリを表します。クエリはそのコンテキストからの接続を使用して実行されます。このクラスのインスタンスはそのエンティティ型の <see cref="T:System.Data.Entity.DbSet" /> インスタンスから取得されます。クエリは、このオブジェクトが作成されたときに実行されるのではなく、列挙されるときに毎回実行されます。たとえば foreach を使用した場合などです。エンティティ以外のものに対する SQL クエリは <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" /> を使用して作成されます。このクラスのジェネリック バージョンについては、<see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> を参照してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>
        <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> のテスト ダブルとして使用される派生型のコンストラクターから呼び出されたときに、<see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> のインスタンスを作成します。テスト ダブルによって使用されるメソッドとプロパティは、既定の実装が no-op である AsNoTracking と AsStreaming を除き、そのテスト ダブルで実装されている必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>関連付けられている <see cref="T:System.Data.Entity.DbContext" /> によってクエリ結果が追跡されない場合に新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。</summary>
      <returns>AsStreaming が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>クエリに関連付けられている型を取得します。</summary>
      <returns>クエリに関連付けられている型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>クエリが作成されたときに設定された SQL 文字列を含む <see cref="T:System.String" /> を返します。パラメーターは含まれません。</summary>
      <returns>このインスタンスを表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から作成されたエンティティに対する SQL クエリを表します。クエリはそのコンテキストからの接続を使用して実行されます。このクラスのインスタンスはそのエンティティ型の <see cref="T:System.Data.Entity.DbSet`1" /> インスタンスから取得されます。クエリは、このオブジェクトが作成されたときに実行されるのではなく、列挙されるときに毎回実行されます。たとえば foreach を使用した場合などです。エンティティ以外のものに対する SQL クエリは <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" /> を使用して作成されます。このクラスの非ジェネリック バージョンについては、<see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> を参照してください。</summary>
      <typeparam name="TEntity">クエリにより返されたエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>
        <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> のテスト ダブルとして使用される派生型のコンストラクターから呼び出されたときに、<see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> のインスタンスを作成します。テスト ダブルによって使用されるメソッドとプロパティは、既定の実装が no-op である AsNoTracking と AsStreaming を除き、そのテスト ダブルで実装されている必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>返されたエンティティが <see cref="T:System.Data.Entity.DbContext" /> にキャッシュされない新しいクエリを返します。</summary>
      <returns>NoTracking が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>バッファリングの代わりに結果をストリームする新しいクエリを返します。</summary>
      <returns>AsStreaming が適用された新しいクエリ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>指定されたオブジェクトとこのインスタンスが等しいかどうかを指定します。</summary>
      <returns>指定されたオブジェクトとこのインスタンスが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>このインスタンスに関連付けられているハッシュ コードを取得します。</summary>
      <returns>このインスタンスに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>このインスタンスに関連付けられている型を取得します。</summary>
      <returns>このインスタンスに関連付けられている型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>エンティティに対する SaveChanges の結果、データベースが更新されることになっているのに、実際にはデータベース内で影響を受けた行がない場合に、<see cref="T:System.Data.Entity.DbContext" /> によってスローされる例外。通常、これはデータベースの更新が同時進行しており、一致することになっていた同時実行トークンが実際には一致しなかったことを示します。この例外によって参照される状態エントリは、セキュリティ保護のためにシリアル化されていないことに注意してください。シリアル化の後に状態エントリにアクセスすると null が返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>変更をデータベースに保存できなかったとき、<see cref="T:System.Data.Entity.DbContext" /> によってスローされる例外です。この例外によって参照される状態エントリは、セキュリティ保護のためにシリアル化されていないことに注意してください。シリアル化の後に状態エントリにアクセスすると null が返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>データベースに保存できなかったエンティティを表す <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> オブジェクトを取得します。</summary>
      <returns>保存できなかったエンティティを表すエントリ。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>失敗した場合に操作を再試行しない既定の <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>指定した操作を一度実行します。</summary>
      <param name="operation">結果を返さない実行可能な操作を表すデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>指定した操作を一度実行し、結果を返します。</summary>
      <returns>操作の結果。</returns>
      <param name="operation">
        <paramref name="TResult" /> 型の結果を返す実行可能な操作を表すデリゲート。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> の戻り値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>失敗した場合に再試行せずに、指定した非同期操作を一度実行します。</summary>
      <returns>元のタスクが正常に完了した場合に、実行されて完了するタスク。</returns>
      <param name="operation">開始されたタスクを返す関数。</param>
      <param name="cancellationToken">既に実行中の操作または既に完了した操作ではなく、再試行操作のキャンセルに使用するキャンセル トークン。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> によって返される <see cref="T:System.Threading.Tasks.Task`1" /> の結果型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>失敗した場合に再試行せずに、指定した非同期操作を一度実行します。</summary>
      <returns>元のタスクが正常に完了した場合に、実行されて完了するタスク。</returns>
      <param name="operation">開始されたタスクを返す関数。</param>
      <param name="cancellationToken">既に実行中の操作または既に完了した操作ではなく、再試行操作のキャンセルに使用するキャンセル トークン。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>エラー発生後に、<see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> が再試行されるかどうかを取得します。</summary>
      <returns>エラー発生後に <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> が再試行される場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>基になるプロバイダーを使用してマニフェスト トークンを取得する <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" /> の既定の実装を表します。複数のクエリを避けるために、この実装では <see cref="T:System.Data.Common.DbConnection" /> インスタンスの実際の型、<see cref="P:System.Data.Common.DbConnection.DataSource" /> プロパティ、<see cref="P:System.Data.Common.DbConnection.Database" /> プロパティに基づいてキャッシュを使用してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>特定の接続に対して使用するマニフェスト トークンを返します。</summary>
      <returns>使用するマニフェスト トークン。</returns>
      <param name="connection">マニフェスト トークンを必要とする接続。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>データベース内に EDM に関するメタデータを格納するために使用されるエンティティを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>メタデータ エンティティの ID を取得または設定します。これは現在のところ常に 1 です。</summary>
      <returns>ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>モデル ハッシュを取得または設定します。これはデータベースが作成された後、その基になったモデルが変更されたかどうかを調べるときに使用されます。</summary>
      <returns>モデル ハッシュ。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>そのコンテキストで Code First によって計算されたモデル ハッシュを取得しようとします。そのコンテキストが Code First モードで使用されていない場合、このメソッドは null を返します。</summary>
      <returns>ハッシュ文字列。</returns>
      <param name="context">コンテキスト。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Code First によって EDMX フォームで作成された Entity Data Model にアクセスするために使用されるメソッドが入っています。Code First が内部で作成したモデルを調べる必要のあるとき、通常これらのメソッドはデバッグで使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>指定されているコンテキストで Code First を使用し、結果の Entity Data Model を EDMX フォーム内で指定されているライターに書き込みます。このメソッドは、Code First を使用して内部でモデルを作成するコンテキスト インスタンスでしか使用できません。Database First または Model First を使用して作成したコンテキストでは使用できないメソッドです。既存の <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> を使用して作成したコンテキストでも、既存の <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" /> を使用して作成したコンテキストでも使用できません。</summary>
      <param name="context">コンテキスト。</param>
      <param name="writer">ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>指定されている <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> が表す Entity Data Model を EDMX フォーム内の指定されているライターに書き込みます。</summary>
      <param name="model">EDM を表すオブジェクト。</param>
      <param name="writer">ライター。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>
        <see cref="T:System.Func`1" /> を解決するために使用するキー。これは、接続文字列で指定した、ADO.NET プロバイダーの不変名とデータベース サーバー名で構成されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /> の新しいインスタンスを初期化します。</summary>
      <param name="providerInvariantName">この実行方法を使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="serverName">接続文字列のサーバー名と照合される文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>指定したオブジェクトがこのキーと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトがこのキーと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>この実行方法を使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>接続文字列のサーバー名と照合される文字列。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>要素を非同期で取得できる <see cref="T:System.Collections.IEnumerable" /> インターフェイスの非同期バージョン。Entity Framework のクエリとの対話にこのインターフェイスが使用されますが、カスタム クラスによって実装する必要はありません。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>シーケンスを非同期で列挙するために使用できる列挙子を取得します。</summary>
      <returns>シーケンス上の非同期列挙体の列挙子。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>列挙可能なシーケンスの要素を非同期で取得できる <see cref="T:System.Collections.Generic.IEnumerable`1" /> インターフェイスの非同期バージョン。Entity Framework のクエリとの対話にこのインターフェイスが使用されますが、カスタム クラスによって実装する必要はありません。</summary>
      <typeparam name="T">列挙するオブジェクトの型。このパラメーターが共変の型パラメーターです。つまり、その指定した型を使用するか、それよりも強い任意の派生型を使用することができます。 共変性と反変性の詳細については、「」を参照してください。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>シーケンスを非同期で列挙するために使用できる列挙子を取得します。</summary>
      <returns>シーケンス上の非同期列挙体の列挙子。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>要素を非同期で取得できる <see cref="T:System.Collections.IEnumerator" /> インターフェイスの非同期バージョン。Entity Framework のクエリとの対話にこのインターフェイスが使用されますが、カスタム クラスによって実装する必要はありません。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>イテレーション内の現在の要素を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>列挙子をシーケンスの次の要素に進め、結果を非同期で返します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、列挙子が次の要素に正常に進んだ場合は true、列挙子がシーケンスの末尾を越えた場合は false が示されます。</returns>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>要素を非同期で取得できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> インターフェイスの非同期バージョン。Entity Framework のクエリとの対話にこのインターフェイスが使用されますが、カスタム クラスによって実装する必要はありません。</summary>
      <typeparam name="T">列挙するオブジェクトの型。このパラメーターが共変の型パラメーターです。つまり、その指定した型を使用するか、それよりも強い任意の派生型を使用することができます。 共変性と反変性の詳細については、「」を参照してください。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>イテレーション内の現在の要素を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>
        <see cref="T:System.Linq.IQueryable" /> オブジェクトによって記述されるクエリを作成および非同期に実行するメソッドを定義します。Entity Framework のクエリとの対話にこのインターフェイスが使用されますが、カスタム クラスによって実装する必要はありません。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>指定した式ツリーによって表される、厳密に型指定されたクエリを非同期に実行します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定したクエリを実行した結果の値が含まれます。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
      <typeparam name="TResult">クエリの実行結果の値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>指定した式ツリーによって表されるクエリを非同期に実行します。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定したクエリを実行した結果の値が含まれます。</returns>
      <param name="expression">LINQ クエリを表す式ツリー。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>このインターフェイスの実装は、指定されたデータベース名に基づいてある種類のデータベース サーバーに対する DbConnection オブジェクトを作成するために使用されます。インスタンスが <see cref="T:System.Data.Entity.Database" /> クラスに設定されているので、すべての DbContexts オブジェクトが接続情報なしで作成されることになります。または既定で特定の種類のデータベース サーバーが使用されるように、データベース名または接続文字列のみが使用されます。このインターフェイスには 2 つの実装が提供されています。<see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> は Microsoft SQL Server (EXPRESS Edition も含む) への接続を作成するために使用されます。<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> は Microsoft SQL Server Compact Edition への接続を作成するために使用されます。その他のデータベース サーバー用の実装は必要に応じて追加できます。インターフェイスの実装は、複数のスレッドから同時にアクセスされるので、スレッド セーフまたは不変になっている必要があることに注意してください。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>データベース名または接続文字列に基づいて接続を作成します。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 派生インスタンスを作成するためのファクトリです。既定のパブリック コンストラクターを持たないコンテキスト型のデザイン時サービスを有効にするには、このインターフェイスを実装します。デザイン時に、モデルのレンダリング、DDL の生成など、特定のデザイン時の操作を有効にするために、派生した <see cref="T:System.Data.Entity.DbContext" /> のインスタンスを作成できます。既定のパブリック コンストラクターを持たない <see cref="T:System.Data.Entity.DbContext" /> の派生型に対してデザイン時インスタンス化を有効にするには、このインターフェイスを実装します。デザイン時サービスでは、<see cref="T:System.Data.Entity.DbContext" /> 派生型と同じアセンブリに含まれているこのインターフェイスの実装が自動探索されます。</summary>
      <typeparam name="TContext">コンテキストの型。このパラメーターが共変の型パラメーターです。つまり、その指定した型を使用するか、それよりも強い任意の派生型を使用することができます。 共変性と反変性の詳細については、「」を参照してください。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> 派生型の新しいインスタンスを作成します。</summary>
      <returns>TContext のインスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>データベースに対してコマンドまたはクエリを実行するための方法。エラーが発生した場合に再試行するロジックを使用することもできます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>指定した操作を実行します。</summary>
      <param name="operation">結果を返さない実行可能な操作を表すデリゲート。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>指定した操作を実行し、結果を返します。</summary>
      <returns>操作の結果。</returns>
      <param name="operation">
        <paramref name="TResult" /> 型の結果を返す実行可能な操作を表すデリゲート。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> の戻り値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>指定した非同期操作を実行し、結果を返します。</summary>
      <returns>元のタスクが正常に完了した場合 (初回実行時または一時的なエラーにより再試行した後) に最後まで実行されるタスク。タスクが一時的でないエラーで失敗した場合、または再試行制限回数に達した場合は、返されるタスクは途中終了し、例外を確認する必要があります。</returns>
      <param name="operation">
        <paramref name="TResult" /> 型の開始されたタスクを返す関数。</param>
      <param name="cancellationToken">既に実行中の操作または既に完了した操作ではなく、再試行操作のキャンセルに使用するキャンセル トークン。</param>
      <typeparam name="TResult">
        <paramref name="operation" /> によって返される <see cref="T:System.Threading.Tasks.Task`1" /> の結果型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>指定した非同期操作を実行します。</summary>
      <returns>元のタスクが正常に完了した場合 (初回実行時または一時的なエラーにより再試行した後) に最後まで実行されるタスク。タスクが一時的でないエラーで失敗した場合、または再試行制限回数に達した場合は、返されるタスクは途中終了し、例外を確認する必要があります。</returns>
      <param name="operation">開始されたタスクを返す関数。</param>
      <param name="cancellationToken">既に実行中の操作または既に完了した操作ではなく、再試行操作のキャンセルに使用するキャンセル トークン。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>エラー発生後に、この <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> の再試行が可能かどうかを示します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>メモリに読み込まれた Entity Framework モデルを一意に識別するキー値を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>現在のキャッシュ モデル キーが指定したキャッシュ モデル キーと等しいかどうかを判断します。</summary>
      <returns>現在のキャッシュ モデル キーが指定したキャッシュ モデル キーと等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">現在のキャッシュ モデル キーと比較するキャッシュ モデル キー。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>このキャッシュ モデル キーのハッシュ関数を返します。</summary>
      <returns>このキャッシュ モデル キーのハッシュ関数。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>既にキャッシュ内に作成されているモデルをルックアップする際に使用するキーをカスタム ロジックを使用して計算するには、このインターフェイスをコンテキストに実装します。このインターフェイスを使用すると、同じ AppDomain 内の異なるモデルに使用できる単一のコンテキスト型、または同じモデルを使用する複数のコンテキスト型を持つことができます。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>プロバイダーに関連付けられたキャッシュされたキーを取得します。</summary>
      <returns>プロバイダーに関連付けられたキャッシュされたキー。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>指定された <see cref="T:System.Data.Common.DbConnection" /> から正しい <see cref="T:System.Data.Common.DbProviderFactory" /> を取得するサービス。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>指定された接続の <see cref="T:System.Data.Common.DbProviderFactory" /> を返します。</summary>
      <returns>接続のプロバイダー ファクトリ。</returns>
      <param name="connection">接続。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>接続されているプロバイダー マニフェスト トークンを取得するサービス。<see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> クラスは既定で使用され、基になるプロバイダーを利用して、接続を開く場合に関係していることが多いトークンを取得します。別の方法として、トークンを返すために接続の情報を使用することができる <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> を <see cref="T:System.Data.Entity.DbConfiguration" /> に追加することで、別の実装を使用することもできます。たとえば、接続が SQL Server 2008 データベースをポイントすることが判明している場合、接続を開かずに "2008" が返されることがあります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>特定の接続に対して使用するマニフェスト トークンを返します。</summary>
      <returns>使用するマニフェスト トークン。</returns>
      <param name="connection">マニフェスト トークンを必要とする接続。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> インスタンスによって表されるカスタム注釈を EDMX XML に対する入出力用にシリアル化するには、このインターフェイスを実装します。シリアライザー インスタンスは通常、<see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})" /> メソッドを使用して設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>指定した文字列を想定される注釈値に逆シリアル化します。</summary>
      <returns>逆シリアル化された注釈の値。</returns>
      <param name="name">逆シリアル化されている注釈の名前。</param>
      <param name="value">逆シリアル化する文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>指定した注釈値を EDMX XML への格納用の文字列にシリアル化します。</summary>
      <returns>シリアル化された値。</returns>
      <param name="name">シリアル化されている注釈の名前。</param>
      <param name="value">シリアル化する値。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>この <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約では、DbModelBuilder はモデルを構築するときにモデルに関するメタデータを含めます。<see cref="T:System.Data.Entity.DbContext" /> が規約に従ってモデルを作成するとき、DbModelBuilder によって使用される一覧にこの規約が追加されます。その結果、DbContext がデータベースの作成に使用されると、モデルのメタデータがデータベースに書き込まれます。その後、モデルがそのデータベースに対して最後に使用されてから変更されているかどうかを簡単に確認するために、この規約を使用できます。この規約は、派生した DbContext クラス上の OnModelCreating メソッドをオーバーライドすることで、<see cref="T:System.Data.Entity.DbModelBuilder" /> の規約から削除できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>
        <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" /> のインスタンスを提供できるオブジェクトによって実装されるインターフェイス。<see cref="T:System.Data.Entity.DbContext" /> クラスはこのインターフェイスを実行して基になっている ObjectContext へのアクセスを提供します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>オブジェクトのコンテキストを取得します。</summary>
      <returns>オブジェクト コンテキスト。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> からプロバイダーの不変名を解決する場合に、<see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> と <see cref="T:System.Data.Entity.DbConfiguration" /> で使用します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>プロバイダーの名前を取得します。</summary>
      <returns>プロバイダーの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>このクラスのインスタンスは、指定したデータベース名または接続文字列に基づいて、SQL Server LocalDb の DbConnection オブジェクトを作成する際に使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>指定したバージョンの LocalDb の接続ファクトリの新しいインスタンスを作成します。SQL Server 2012 の LocalDb の場合、"v11.0" を使用します。SQL Server 2014 以降の LocalDb の場合、"mssqllocaldb" を使用します。</summary>
      <param name="localDbVersion">使用する LocalDb のバージョン。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>指定したバージョンの LocalDb の接続ファクトリの新しいインスタンスを作成します。SQL Server 2012 の LocalDb の場合、"v11.0" を使用します。SQL Server 2014 以降の LocalDb の場合、"mssqllocaldb" を使用します。</summary>
      <param name="localDbVersion">使用する LocalDb のバージョン。</param>
      <param name="baseConnectionString">データベース オプションとして使用する "Initial Catalog"、"Data Source"、"AttachDbFilename" 以外の接続文字列。CreateConnection が呼び出されるときに、データベース名に基づいて "Initial Catalog" と "AttachDbFilename" がこの文字列の前に追加されます。"Data Source" は、LocalDbVersion 引数に基づいて設定されます。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>データベース オプションとして使用する "Initial Catalog"、"Data Source"、"AttachDbFilename" 以外の接続文字列。CreateConnection が呼び出されるときに、データベース名に基づいて "Initial Catalog" と "AttachDbFilename" がこの文字列の前に追加されます。"Data Source" は、LocalDbVersion 引数に基づいて設定されます。既定値は、"Integrated Security=True" です。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>指定したデータベース名または接続文字列に基づいて SQL Server LocalDb の接続を作成します。文字列に "=" 文字が含まれている場合、その文字列は完全な接続文字列として扱われます。そうでなければ、データベースの名前としてしか扱われません。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>この <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約では、派生  <see cref="T:System.Data.Entity.DbContext" /> クラスの名前が Code First によって構築された概念モデルのコンテナーとして使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したモデルに規約を適用します。</summary>
      <param name="item">規約を適用するコンテナー。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>この <see cref="T:System.Data.Entity.DbModelBuilder" /> 規約では、派生した <see cref="T:System.Data.Entity.DbContext" /> クラスの名前空間が Code First によって構築された概念モデルの名前空間として使用されます。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>参照の等価性を使用してオブジェクトを比較します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
      <summary>既定のインスタンスを取得します。</summary>
      <returns>既定のインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)">
      <summary>指定されたオブジェクト インスタンスが等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="x">比較対象の 1 つ目のオブジェクト。</param>
      <param name="y">比較対象の 2 つ目のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)">
      <summary>指定されたオブジェクトのハッシュ コードを取得します。</summary>
      <returns>指定されたオブジェクトのハッシュ コード。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>このクラスのインスタンスは、<see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> および <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> への参照を置き換える式ツリーに挿入される <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> の定数式の作成に内部で使用されます。</summary>
      <typeparam name="TElement">要素の型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>LINQ 式ツリーで必要なパブリック プロパティ。</summary>
      <returns>クエリです。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>アクションを構成した回数試行した後、再度失敗した場合にスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>エラー メッセージを使用せずに、<see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>このクラスのインスタンスは、指定されているデータベース名または接続文字列に基づいて、SQL Server Compact Edition の DbConnection オブジェクトの作成に使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>空 (既定) の DatabaseDirectory と BaseConnectionString プロパティで新しい接続ファクトリを作成します。</summary>
      <param name="providerInvariantName">使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>指定されている DatabaseDirectory と BaseConnectionString プロパティで新しい接続ファクトリを作成します。</summary>
      <param name="providerInvariantName">使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名。</param>
      <param name="databaseDirectory">データベース名の前に添えるパス名。これは SQL Server Compact Edition がデータベース ファイルを作成するときや読み取るときに使用するファイル名の一部となります。空の文字列は、SQL Server Compact Edition がその既定の場所をデータベース ファイルの場所として使用することを意味します。</param>
      <param name="baseConnectionString">データベース オプションとして使用する "Data Source" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて Data Source がこの文字列の前に追加されます。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>データベース オプションとして使用する "Data Source" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて Data Source がこの文字列の前に追加されます。既定値は空の文字列です。これは他のオプションが使用されないことを意味します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>指定されているデータベース名または接続文字列に基づいて SQL Server Compact Edition の接続を作成します。文字列に "=" 文字が含まれている場合、その文字列は完全な接続文字列として扱われます。そうでなければ、データベースの名前としてしか扱われません。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>データベース名の前に添えるパス名。これは SQL Server Compact Edition がデータベース ファイルを作成するときや読み取るときに使用するファイル名の一部となります。既定値は "|DataDirectory|" です。これはファイルが所定のデータ ディレクトリに保存されることを意味します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>使用する SQL Server Compact Edition のバージョンを指定するプロバイダー不変名。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>このクラスのインスタンスは、指定されているデータベース名または接続文字列に基づいて、SQL Server の DbConnection オブジェクトの作成に使用されます。既定では、".\SQLEXPRESS" に接続されます。これは、ファクトリ インスタンスを作成するときに、基本接続文字列を変更することによって変更できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>新しい接続ファクトリを既定の BaseConnectionString プロパティ (Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;) を使って作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>新しい接続ファクトリを、指定されている BaseConnectionString プロパティを使って作成します。</summary>
      <param name="baseConnectionString">データベース オプションとして使用する "Initial Catalog" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて "Initial Catalog" がこの文字列の前に追加されます。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>データベース オプションとして使用する "Initial Catalog" 以外の接続文字列。CreateConnection が呼び出されるとき、データベース名に基づいて "Initial Catalog" がこの文字列の前に追加されます。既定値は "Data Source=.\SQLEXPRESS; Integrated Security=True;" です。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>指定されているデータベース名または接続文字列に基づいて SQL Server の接続を作成します。文字列に "=" 文字が含まれている場合、その文字列は完全な接続文字列として扱われます。そうでなければ、データベースの名前としてしか扱われません。</summary>
      <returns>初期化された DbConnection。</returns>
      <param name="nameOrConnectionString">データベース名または接続文字列。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>この属性は派生 <see cref="T:System.Data.Entity.DbContext" /> クラス全体に、またはそのクラスの個々の <see cref="T:System.Data.Entity.DbSet`1" /> または <see cref="T:System.Data.Entity.IDbSet`1" /> プロパティに適用できます。適用時、検出された <see cref="T:System.Data.Entity.DbSet`1" /> または <see cref="T:System.Data.Entity.IDbSet`1" /> プロパティはまだモデルに入っていますが、自動的に初期化されません。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
      <summary>Entity Framework プロバイダーによって実装され、テーブルが特定のデータベースに存在するかどうかを確認するために使用されます。これは、テーブルが作成されるように、既存のデータベースを空白として扱うかどうかを決定する場合に、データベース初期化子によって使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
      <summary>派生クラスにオーバーライドする際、特定の接続について、データベースのどこに特定のテーブルが存在しているかを確認します。</summary>
      <returns>モデル テーブルのいずれかまたは EdmMetadata テーブルが存在する場合は True。</returns>
      <param name="context">適切な <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" /> を取得するために通常使用される、テーブルのチェックを実行しているコンテキスト。</param>
      <param name="connection">データベースへの接続。開いていることも、閉じていることもあります。開いている場合は再度閉じる必要があります。破棄しないでください。</param>
      <param name="modelTables">存在をチェックするテーブル。</param>
      <param name="edmMetadataContextTableName">存在をチェックする EdmMetadata テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>特定の S 空間 <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> のテーブル名を取得するヘルパー メソッド。</summary>
      <returns>テーブルの名前。</returns>
      <param name="modelTable">テーブルに設定された S 空間エンティティ。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
      <summary>このクラスは、データベースに対してトランザクションのトレース情報を読み書きするために <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> で使用されます。トランザクション テーブルの定義をカスタマイズするには、このクラスから派生させて <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" /> をオーバーライドします。派生クラスは <see cref="T:System.Data.Entity.DbConfiguration" /> を使用して登録できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="existingConnection">トランザクションが記録されるコンテキストで使用される接続。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>このメソッドは、派生コンテキストのモデルが初期化されたときに呼び出されます。</summary>
      <param name="modelBuilder">作成されるコンテキストのモデルを定義するビルダー。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> インスタンスの読み取りと書き込みに使用できる <see cref="T:System.Data.Entity.DbSet`1" /> を取得または設定します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> インスタンスの読み書きに使用できる <see cref="T:System.Data.Entity.DbSet`1" />。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
      <summary>トランザクション操作を処理するインターセプターの基本クラスを表します。派生クラスは <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> または <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" /> を使用して登録できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">トランザクションを開始した接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">トランザクションを開始する接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
      <summary>派生クラスに実装すると、このトランザクション ハンドラー用にデータベースを準備するスクリプトを返します。</summary>
      <returns>このトランザクション ハンドラー用にデータベース スキーマを変更するスクリプト。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">閉じられた接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">閉じられる接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">コミットされたトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">コミットされるトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
      <summary>トランザクション操作が処理される接続を取得します。</summary>
      <returns>トランザクション操作が処理される <see cref="T:System.Data.Common.DbConnection" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">トランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">トランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
      <summary>トランザクション操作が処理されるコンテキストを取得します。</summary>
      <returns>トランザクション操作が処理される <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" />。null を使用できます。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
      <summary>このトランザクション ハンドラーによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
      <summary>このトランザクション ハンドラーによって使用されているリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースのみを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">破棄された接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">破棄されたトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">破棄される接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">破棄されるトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>指定したコンテキストを使用して、このインスタンスを初期化します。</summary>
      <param name="context">トランザクション操作が処理されるコンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>指定したコンテキストを使用して、このインスタンスを初期化します。</summary>
      <param name="context">トランザクション操作が処理されるコンテキスト。</param>
      <param name="connection">初期化に使用する接続。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
      <summary>このトランザクション ハンドラーが破棄されているかどうかを示す値を取得または設定します。</summary>
      <returns>このトランザクション ハンドラーが破棄されている場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">トランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">トランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
      <summary>渡された傍受のコンテキストにターゲット コンテキストが含まれているかどうか、または渡された接続がターゲット コンテキストで使用されたものと同じであるかどうかを確認します。</summary>
      <returns>渡された傍受のコンテキストにターゲット コンテキストが含まれている場合、またはそのコンテキストに何もコンテキストが含まれておらず、渡された接続がターゲット コンテキストで使用されたものと同じである場合は true、それ以外の場合は false。</returns>
      <param name="connection">接続。</param>
      <param name="interceptionContext">傍受のコンテキスト。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
      <summary>トランザクション操作が処理されるコンテキストを取得します。</summary>
      <returns>トランザクション操作が処理される <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">開かれた接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">開かれる接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">ロールバックされたトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>派生クラスに実装できます。</summary>
      <param name="transaction">ロールバックされるトランザクション。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>派生クラスに実装できます。</summary>
      <param name="connection">接続。</param>
      <param name="interceptionContext">呼び出しに関連付けられるコンテキスト情報。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
      <summary>トランザクションを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
      <summary>トランザクションが開始された現地時刻を取得または設定します。</summary>
      <returns>トランザクションが開始された現地時刻。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のオブジェクトと等しいかどうかの値を示します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
      <summary>トランザクション オブジェクトに割り当てられた一意の ID を取得または設定します。</summary>
      <returns>トランザクション オブジェクトに割り当てられた一意の ID。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Database First または Model First モードで <see cref="T:System.Data.Entity.DbContext" /> テンプレートから生成されたコンテキストが Code First モードで使用されたときにスローされます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化されたオブジェクト データを保持するオブジェクト。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
      <summary>移行のスキャフォールディングの一部としてカスタム注釈のコード生成を許可するサービスの作成を表します。派生クラスは <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> に設定する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>指定された注釈値のコードを生成します。</summary>
      <param name="annotationName">生成されている値の注釈の名前。</param>
      <param name="annotation">注釈の値。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
      <summary>スキャフォールディングされた移行のために生成されたコードに含まれる必要がある追加の名前空間を返します。既定の実装は空の列挙を返します。</summary>
      <returns>含める追加の名前空間の一覧。</returns>
      <param name="annotationNames">生成されたコードに含まれる注釈の名前。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
      <summary>スキャフォールディングされたまたは手動でコード化された <see cref="T:System.Data.Entity.Migrations.DbMigration" /> の注釈の値のペアを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
      <summary>注釈の値の新しいペアを作成します。</summary>
      <param name="oldValue">注釈が作成されたばかりである場合、NULL である可能性がある、注釈の古い値。</param>
      <param name="newValue">注釈が削除された場合、NULL である可能性がある、注釈の新しい値。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
      <summary>指定したオブジェクトが、このインスタンス オブジェクトと等しいかどうかを判定します。</summary>
      <returns>指定したオブジェクトがこのインスタンス オブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
      <summary>ハッシュ コードを取得します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
      <summary>注釈が削除された場合、NULL である可能性がある、注釈の新しい値を取得します。</summary>
      <returns>注釈が削除された場合、NULL である可能性がある、注釈の新しい値。</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
      <summary>注釈が作成されたばかりである場合、NULL である可能性がある、注釈の古い値を取得します。</summary>
      <returns>注釈が作成されたばかりである場合、NULL である可能性がある、注釈の古い値。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>両方の注釈のペアが同じ値を含んでいる場合は true、それ以外の場合は false を返します。</summary>
      <returns>両方のペアに同じ値が含まれる場合は true。</returns>
      <param name="left">注釈の値のペア。</param>
      <param name="right">注釈の値のペア。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>2 つの注釈のペアが異なる値を含んでいる場合は true、それ以外の場合は false を返します。</summary>
      <returns>ペアに異なる値が含まれる場合は true。</returns>
      <param name="left">注釈の値のペア。</param>
      <param name="right">注釈の値のペア。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
      <summary>あるオブジェクトが 2 つのオブジェクトを 1 つに結合できる別のオブジェクトと競合しないかどうかを示すために <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> および関連メソッドによって返されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
      <summary>新しい <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" /> インスタンスを作成します。</summary>
      <param name="isCompatible">2 つのテスト済みオブジェクトに互換性があるかどうかを示します。</param>
      <param name="errorMessage">オブジェクトはどのように互換性がないのかを示すエラー メッセージ。isCompatible が true である場合、NULL にする必要があります。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
      <summary>
        <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible" /> が true の場合、2 つのテスト済みオブジェクトにはどのように互換性がないのかを示すエラー メッセージを返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
      <summary>2 つのテスト済みオブジェクトに互換性がある場合は true。それ以外の場合は false。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
      <summary>結果オブジェクトがチェックで直接使用されるようにするブール値への暗黙的な変換。</summary>
      <returns>結果に互換性がある場合は true。それ以外の場合は false。</returns>
      <param name="result">変換対象のオブジェクト。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
      <summary>カスタム注釈として使用される型はこのインターフェイスを実装して、複数の注釈を 1 つにマージすることによって、指定されたテーブルまたは列で同じ名前の複数の注釈を使用できる可能性があることを示すことができます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
      <summary>この注釈が、2 つの注釈を <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)" /> メソッドを使用して組み合わせることができる指定された注釈と競合しない場合は true を返します。</summary>
      <returns>この注釈が他の注釈と互換性があるかどうかを示す CompatibilityResult。</returns>
      <param name="other">比較する注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
      <summary>この注釈を指定された注釈をマージし、新しいマージされた注釈を返します。このメソッドは、<see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> が true を返す場合にのみ成功する必要があります。</summary>
      <returns>新しいマージされた注釈。</returns>
      <param name="other">この注釈とマージする注釈。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
      <summary>Entity Framework モデルでデータベースのインデックスを表すカスタム注釈を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
      <summary>指定されたインデックスのコレクションを使用して、<see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="indexAttributes">1 つ以上のインデックスを表すインデックス属性。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>指定されたインデックスのコレクションを使用して、<see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="indexAttribute">インデックスを表すインデックス属性。</param>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
      <summary>この注釈が Entity Framework メタデータに格納されるか、SSDL/EDMX ファイルにシリアル化される場合に使用される名前。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
      <summary>この注釈で表されるインデックスを取得します。</summary>
      <returns>この注釈で表されるインデックス。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
      <summary>この注釈が、2 つの注釈を <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" /> メソッドを使用して組み合わせることができる指定された注釈と競合しない場合は true を返します。</summary>
      <returns>この注釈が他の注釈と互換性があるかどうかを示す CompatibilityResult。</returns>
      <param name="other">比較する注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
      <summary>この注釈を指定された注釈とマージし、マージされたインデックスを含む新しい注釈を返します。</summary>
      <returns>マージされた両方の注釈からのインデックスの新しい注釈。</returns>
      <param name="other">この注釈とマージする注釈。</param>
      <exception cref="T:System.InvalidOperationException">他の注釈にはこの注釈のインデックスと互換性のないインデックスが含まれています。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> オブジェクトの文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> オブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
      <summary>このクラスは、Entity Framework モデルの EDMX フォームに格納できるように <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> オブジェクトをシリアル化および逆シリアル化するために使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>指定された文字列を <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> オブジェクトに逆シリアル化します。</summary>
      <returns>逆シリアル化された注釈の値。</returns>
      <param name="name">逆シリアル化されている注釈の名前。</param>
      <param name="value">逆シリアル化する文字列。</param>
      <exception cref="T:System.FormatException">シリアル化された値の読み込みエラーがある場合。</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>指定された <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> を EDMX XML のストレージの文字列にシリアル化します。</summary>
      <returns>シリアル化された値。</returns>
      <param name="name">シリアル化されている注釈の名前。</param>
      <param name="value">IndexAnnotation オブジェクトである必要があるシリアル化する値。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>
        <see cref="E:System.Data.Entity.DbConfiguration.Loaded" /> イベント ハンドラーに渡されるイベント引数を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Entity Framework で必要とされる依存関係を解決するために使用されるリゾルバーの Chain of Responsibility に <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> インスタンスを追加します。AddDependencyResolver メソッドとは異なり、このメソッドは Chain of Responsibility の一番下にリゾルバーを配置し、そのリゾルバーが他のリゾルバーで解決できなかった依存関係を解決するためだけに使用されるようにします。</summary>
      <param name="resolver">追加するリゾルバー。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>Entity Framework で必要とされる依存関係を解決するために使用されるリゾルバーの Chain of Responsibility に <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> インスタンスを追加します。</summary>
      <param name="resolver">追加するリゾルバー。</param>
      <param name="overrideConfigFile">true の場合、追加されたリゾルバーは構成ファイルの設定よりも優先されます。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>ロックされそうになっている <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> のスナップショットを取得します。このオブジェクトで GetService メソッドを使用して、登録されたサービスを取得します。</summary>
      <returns>ロックされそうになっている <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> のスナップショット。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
      <summary>このインスタンスが特定のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>このインスタンスが特定のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
      <summary>このインスタンスに関連付けられているハッシュ コードを取得します。</summary>
      <returns>このインスタンスに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
      <summary>このインスタンスの型を取得します。</summary>
      <returns>このインスタンスの型。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>ロックされそうになっている構成にラップ リゾルバーを追加します。ラップ リゾルバーとは、リゾルバー チェーンによって返されるサービスを受け入れ、同じ型の別のサービスでラップまたは置換するリゾルバーのことです。</summary>
      <param name="serviceInterceptor">ラップされていないサービスおよびキーを受け取り、ラップまたは置換されたサービスを返すデリゲート。</param>
      <typeparam name="TService">ラップまたは置換するサービスの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" /> の文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" /> の文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>ジェネリック型パラメーターを使用して (名前を指定せずに) <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> メソッドを呼び出す拡張メソッド。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>型引数としてメソッドのジェネリック型を渡し、"名前" 引数に NULL を渡す <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> を呼び出します。</summary>
      <returns>解決された依存関係、リゾルバーで解決できなかった場合は null。</returns>
      <param name="resolver">使用するリゾルバー。</param>
      <typeparam name="T">解決するコントラクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>引数としてメソッドのジェネリック型と指定された名前を渡す <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> を呼び出します。</summary>
      <returns>解決された依存関係、リゾルバーで解決できなかった場合は null。</returns>
      <param name="resolver">使用するリゾルバー。</param>
      <param name="key">解決する依存関係のキー。</param>
      <typeparam name="T">解決するコントラクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>指定された型引数を渡し、"名前" 引数に NULL を使用する <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> を呼び出します。</summary>
      <returns>解決された依存関係、リゾルバーで解決できなかった場合は null。</returns>
      <param name="resolver">使用するリゾルバー。</param>
      <param name="type">解決するコントラクトの型。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>型引数としてメソッドのジェネリック型を渡し、"名前" 引数に NULL を渡す <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> を呼び出します。</summary>
      <returns>すべての解決された依存関係。サービスが解決されない場合は <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">使用するリゾルバー。</param>
      <typeparam name="T">解決するコントラクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>引数としてメソッドのジェネリック型と指定された名前を渡す <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> を呼び出します。</summary>
      <returns>すべての解決された依存関係。サービスが解決されない場合は <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">使用するリゾルバー。</param>
      <param name="key">解決する依存関係のキー。</param>
      <typeparam name="T">解決するコントラクトの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>指定された型引数を渡し、"名前" 引数に NULL を使用する <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" /> を呼び出します。</summary>
      <returns>すべての解決された依存関係。サービスが解決されない場合は <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <param name="resolver">使用するリゾルバー。</param>
      <param name="type">解決するコントラクトの型。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> ファクトリを解決するために使用される <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 実装。</summary>
      <typeparam name="T">解決される実行方法の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" /> の新しいインスタンスを初期化します。</summary>
      <param name="providerInvariantName">この実行方法を使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。</param>
      <param name="serverName">接続文字列のサーバー名と照合される文字列。null はあらゆる文字列と一致します。</param>
      <param name="getExecutionStrategy">実行方法の新しいインスタンスを返す関数。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>指定された型が <see cref="T:System.Func`1" /> の場合、このリゾルバーは使用するサービスを返そうとし、それ以外の場合は NULL を返します。指定された型が Func{IExecutionStrategy} の場合、キーは <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /> である必要があります。</summary>
      <returns>
        <see cref="T:System.Func`1" />、または null。</returns>
      <param name="type">解決するサービスの型。</param>
      <param name="key">返すサービスを決定するために使用されるキー。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>指定された型が <see cref="T:System.Func`1" /> の場合、このリゾルバーは使用するサービスを返そうとし、それ以外の場合は空の列挙を返します。指定された型が Func{IExecutionStrategy} の場合、キーは <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /> である必要があります。</summary>
      <returns>
        <see cref="T:System.Func`1" /> の列挙、または空の列挙。</returns>
      <param name="type">解決するサービスの型。</param>
      <param name="key">返すサービスを決定するために使用されるキー。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>このインターフェイスは、直接または外部コンテナーを使用して、依存関係を解決できる任意のオブジェクトによって実装されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>指定されたコントラクト型と必要に応じて指定されたキーの依存関係を解決しようとします。依存関係を解決できなかった場合、リゾルバーは null を返す必要があり、スローすることはありません。これにより、最終的に依存関係が解決されるまで複数のリゾルバーに解決を求めるような Chain of Responsibility パターンでリゾルバーを使用することができます。</summary>
      <returns>解決された依存関係 (指定したコントラクト型のインスタンスである必要があります)。依存関係を解決できなかった場合は null。</returns>
      <param name="type">解決する依存関係を定義するインターフェイスまたは抽象基本クラス。返されるオブジェクトは、この型のインスタンスであると想定されます。</param>
      <param name="key">オプションで、解決される依存関係のキー。これは、キーで区別されない依存関係では null の場合もあります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>指定されたコントラクト型と必要に応じて指定されたキーの依存関係を解決しようとします。依存関係を解決できなかった場合、リゾルバーは空の列挙を返す必要があり、スローすることはありません。このメソッドは、指定された型とキーの組み合わせで登録されているすべてのサービスを返すという点で <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> と異なります。</summary>
      <returns>依存関係を解決するすべてのサービス (指定したコントラクト型のインスタンスである必要があります)。依存関係を解決できなかった場合は空の列挙。</returns>
      <param name="type">解決する依存関係を定義するインターフェイスまたは抽象基本クラス。すべての返されるオブジェクトは、この型のインスタンスである必要があります。</param>
      <param name="key">オプションで、解決される依存関係のキー。これは、キーで区別されない依存関係では null の場合もあります。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> を実装して常に同じインスタンスを返すように依存関係を解決します。</summary>
      <typeparam name="T">解決される依存関係のコントラクトを定義する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>Get メソッドに渡されたキーに関係なく、コントラクト型の指定されたインスタンスを返す新しいリゾルバーを構築します。</summary>
      <param name="singletonInstance">返すインスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>指定されたキーが指定された述語に基づいて Get メソッドに渡されたキーと一致する場合、コントラクト型の指定されたインスタンスを返す新しいリゾルバーを構築します。</summary>
      <param name="singletonInstance">返すインスタンス。</param>
      <param name="keyPredicate">キー オブジェクトを取得し、一致する場合のみに true を返す述語。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>指定されたキーが Get メソッドに渡されたキーと完全に一致する場合、コントラクト型の指定されたインスタンスを返す新しいリゾルバーを構築します。</summary>
      <param name="singletonInstance">返すインスタンス。</param>
      <param name="key">オプションで、解決される依存関係のキー。これは、キーで区別されない依存関係では null の場合もあります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
      <summary>指定されたコントラクト型と必要に応じて指定されたキーの依存関係を解決しようとします。依存関係を解決できなかった場合、リゾルバーは null を返す必要があり、スローすることはありません。これにより、最終的に依存関係が解決されるまで複数のリゾルバーに解決を求めるような Chain of Responsibility パターンでリゾルバーを使用することができます。</summary>
      <returns>解決された依存関係 (指定したコントラクト型のインスタンスである必要があります)。依存関係を解決できなかった場合は null。</returns>
      <param name="type">解決する依存関係を定義するインターフェイスまたは抽象基本クラス。返されるオブジェクトは、この型のインスタンスであると想定されます。</param>
      <param name="key">オプションで、解決される依存関係のキー。これは、キーで区別されない依存関係では null の場合もあります。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
      <summary>指定されたコントラクト型と必要に応じて指定されたキーの依存関係を解決しようとします。依存関係を解決できなかった場合、リゾルバーは空の列挙を返す必要があり、スローすることはありません。</summary>
      <returns>依存関係を解決するすべてのサービス (指定したコントラクト型のインスタンスである必要があります)。依存関係を解決できなかった場合は空の列挙。</returns>
      <param name="type">解決する依存関係を定義するインターフェイスまたは抽象基本クラス。すべての返されるオブジェクトは、この型のインスタンスである必要があります。</param>
      <param name="key">オプションで、解決される依存関係のキー。これは、キーで区別されない依存関係では null の場合もあります。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> ファクトリを解決するために使用される <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> 実装を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="transactionHandlerFactory">トランザクション ハンドラーの新しいインスタンスを返す関数。</param>
      <param name="providerInvariantName">トランザクション ハンドラーを使用する対象となる ADO.NET 接続の種類を示す ADO.NET プロバイダーの不変名。null はあらゆる文字列と一致します。</param>
      <param name="serverName">接続文字列のサーバー名と照合される文字列。null はあらゆる文字列と一致します。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
      <summary>オブジェクト インスタンスのハッシュ コードを取得します。</summary>
      <returns>オブジェクト インスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
      <summary>指定された型が <see cref="T:System.Func`1" /> の場合、このメソッドは使用するサービスを返そうとし、それ以外の場合は null を返します。指定された型が <see cref="T:System.Func`1" /> の場合、キーは <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /> である必要があります。</summary>
      <returns>
        <see cref="T:System.Func`1" />、または null。</returns>
      <param name="type">解決するサービスの型。</param>
      <param name="key">返すサービスを決定するために使用されるキー。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
      <summary>指定された型が <see cref="T:System.Func`1" /> の場合、このリゾルバーは使用するサービスを返そうとし、それ以外の場合は空の列挙を返します。指定された型が <see cref="T:System.Func`1" /> の場合、キーは <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /> である必要があります。</summary>
      <returns>
        <see cref="T:System.Func`1" /> の列挙、または空の列挙。</returns>
      <param name="type">解決するサービスの型。</param>
      <param name="key">返すサービスを決定するために使用されるキー。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Design.AppConfigReader">
      <summary>App.config ファイルまたは Web.config ファイルから読み取り用のユーティリティ メソッドを提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.#ctor(System.Configuration.Configuration)">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.Design.AppConfigReader" /> の新しいインスタンスを初期化します。</summary>
      <param name="configuration">読み取り元の構成。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.GetProviderServices(System.String)">
      <summary>構成から指定されたプロバイダー サービスを取得します。</summary>
      <returns>プロバイダー サービスの種類の名前。不明の場合は null。</returns>
      <param name="invariantName">プロバイダー サービスの不変名。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>マッピング ビューを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>指定したエンティティ SQL を持つ <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> インスタンスを作成します。</summary>
      <param name="entitySql">エンティティ SQL を指定する文字列。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>エンティティ SQL を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>マッピング ビュー キャッシュの実装の基本抽象クラスを表します。<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> で使用する場合、派生クラスにはパラメーターなしのコンストラクターが必要です。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>指定した範囲に対応するビューを取得します。</summary>
      <returns>マッピング ビューを指定する <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />。範囲がマッピング ビューと関連付けられていない場合は NULL。</returns>
      <param name="extent">範囲を指定する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>マッピング クロージャで計算されるハッシュ値を取得します。</summary>
      <returns>マッピング クロージャで計算されるハッシュ値。</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>具象型の <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> インスタンスを作成する手段を指定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>マップされたコンテナーの名前で指定されるコンテナー マッピングの生成されたビュー キャッシュ インスタンスを作成します。</summary>
      <returns>生成されたビュー キャッシュを指定する <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />。</returns>
      <param name="conceptualModelContainerName">概念モデルのコンテナーの名前。</param>
      <param name="storeModelContainerName">ストア モデルのコンテナーの名前。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>コンテキスト型 (<see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> または <see cref="T:System.Data.Entity.DbContext" /> のサブクラス) に関連付けられたマッピング ビュー キャッシュの種類 (<see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> のサブクラス) を指定するカスタム属性を定義します。キャッシュの種類は実行時にインスタンス化され、対応するコンテキストの事前に生成されたビューを取得するために使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>コンテキスト型をマッピング ビュー キャッシュの種類と関連付ける <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> インスタンスを作成します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> または <see cref="T:System.Data.Entity.DbContext" /> のサブクラス。</param>
      <param name="cacheTypeName">キャッシュの種類のアセンブリ完全修飾型名。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>コンテキスト型をマッピング ビュー キャッシュの種類と関連付ける <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" /> インスタンスを作成します。</summary>
      <param name="contextType">
        <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> または <see cref="T:System.Data.Entity.DbContext" /> のサブクラス。</param>
      <param name="cacheType">
        <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" /> のサブクラス。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>
        <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /> が使用するカスタム複数形化の用語を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>新しいインスタンスを作成します</summary>
      <param name="singular">単数を表す null 以外の文字列または空の文字列。</param>
      <param name="plural">複数を表す null 以外の文字列または空の文字列。</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>複数を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>単数を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>Entity Framework で使用される既定の複数形化サービスの実装。この複数形化サービスは、英語のロケールに基づいています。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>Entity Framework で使用される既定の複数形化サービスの新しいインスタンスを作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>Entity Framework で使用される既定の複数形化サービスの新しいインスタンスを作成します。</summary>
      <param name="userDictionaryEntries">このサービスが使用するユーザー辞書のエントリのコレクション。これらの入力によって、ユーザーのニーズに応じてサービスをカスタマイズできます。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>指定された単語の複数形を返します。</summary>
      <returns>入力パラメーターの複数形。</returns>
      <param name="word">複数形にする単語。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>指定された単語の単数形を返します。</summary>
      <returns>入力パラメーターの単数形。</returns>
      <param name="word">単数形にする単語。</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>EF ランタイムによって使用される複数形化サービスはこのインターフェイスを実装します。既定では、<see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /> が使用されますが、使用する複数形化サービス <see cref="T:System.Data.Entity.DbConfiguration" /> の派生クラスで設定できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>サービスを使用して単語を複数化します。</summary>
      <returns>複数化された単語。</returns>
      <param name="word">複数化する単語。</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>サービスを使用して単語を単数化します。</summary>
      <returns>単数化された単語。</returns>
      <param name="word">単数化する単語。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>コードベースの移行の基本クラスを表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>既存のテーブルに列を追加する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を追加するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">追加する列の名前。</param>
      <param name="columnAction">追加する列を指定するアクション。つまり、c =&gt; c.Int(nullable:false, defaultValue:3)</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>新しい外部キー制約を作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="dependentTable">外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumn">外部キー列。</param>
      <param name="principalTable">この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="principalColumn">この外部キーが参照する列。値を指定しない場合、プリンシパル テーブルの主キーが参照されます。</param>
      <param name="cascadeDelete">外部キー リレーションシップに連鎖削除を構成するかどうかを示す値。値を指定しない場合、連鎖削除は無効になります。</param>
      <param name="name">データベース内の外部キー制約の名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>新しい外部キー制約を作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="dependentTable">外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumns">外部キー列。</param>
      <param name="principalTable">この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="principalColumns">この外部キーが参照する列。値を指定しない場合、プリンシパル テーブルの主キーが参照されます。</param>
      <param name="cascadeDelete">外部キー リレーションシップに連鎖削除を構成するかどうかを示す値。値を指定しない場合、連鎖削除は無効になります。</param>
      <param name="name">データベース内の外部キー制約の名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>新しい主キーを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="column">主キー列。</param>
      <param name="name">データベース内の主キーの名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="clustered">これがクラスター化された主キーかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>複数の列に基づいて新しい主キーを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columns">主キー列。</param>
      <param name="name">データベース内の主キーの名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="clustered">これがクラスター化された主キーかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>既存の列の定義を変更する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列が存在するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">変更する列の名前。</param>
      <param name="columnAction">列の新しい定義を指定するアクション。つまり、c =&gt; c.String(nullable:false, defaultValue:"none")</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>ストアド プロシージャを変更する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">ストアド プロシージャの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="parametersAction">ストアド プロシージャのパラメーターを指定するアクション。</param>
      <param name="body">ストアド プロシージャの本体。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TParameters">このストアド プロシージャを変更する操作のパラメーター。この型を指定する必要はありません。指定する <paramref name="parametersAction" /> パラメーターから推論されます。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>ストアド プロシージャを変更する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">ストアド プロシージャの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="body">ストアド プロシージャの本体。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>テーブルに定義されている注釈の変更を処理する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">テーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columnsAction">テーブルに含める列を指定するアクション。つまり、t =&gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="annotations">テーブルに存在する変更されたカスタム注釈。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">この操作の対象となる列。この型を指定する必要はありません。指定する columnsAction パラメーターから推論されます。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>1 つの列にインデックスを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">インデックスを作成するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="column">インデックスを作成する列の名前。</param>
      <param name="unique">これが一意のインデックスかどうかを示す値。値を指定しない場合、一意でないインデックスが作成されます。</param>
      <param name="name">データベース内のインデックスに使用する名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="clustered">これがクラスター化されたインデックスかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>複数の列にインデックスを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">インデックスを作成するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columns">インデックスを作成する列の名前。</param>
      <param name="unique">これが一意のインデックスかどうかを示す値。値を指定しない場合、一意でないインデックスが作成されます。</param>
      <param name="name">データベース内のインデックスに使用する名前。値を指定しない場合、一意の名前が生成されます。</param>
      <param name="clustered">これがクラスター化されたインデックスかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>新しいストアド プロシージャを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">ストアド プロシージャの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="parametersAction">ストアド プロシージャのパラメーターを指定するアクション。</param>
      <param name="body">ストアド プロシージャの本体。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TParameters">このストアド プロシージャを作成する操作のパラメーター。この型を指定する必要はありません。指定する <paramref name="parametersAction" /> パラメーターから推論されます。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>新しいストアド プロシージャを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">ストアド プロシージャの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="body">ストアド プロシージャの本体。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>新しいテーブルを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>テーブル作成操作をさらに構成できるようにするオブジェクト。</returns>
      <param name="name">テーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columnsAction">テーブルに含める列を指定するアクション。つまり、t =&gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="annotations">作成されるテーブルに存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">このテーブル作成操作の対象となる列。この型を指定する必要はありません。指定する columnsAction パラメーターから推論されます。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>新しいテーブルを作成する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>テーブル作成操作をさらに構成できるようにするオブジェクト。</returns>
      <param name="name">テーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columnsAction">テーブルに含める列を指定するアクション。つまり、t =&gt; new { Id = t.Int(identity:true), Name = t.String() }</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
      <typeparam name="TColumns">このテーブル作成操作の対象となる列。この型を指定する必要はありません。指定する columnsAction パラメーターから推論されます。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>ダウングレード プロセス中に実行する操作。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>既存の列を削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">削除する列の名前。</param>
      <param name="removedAnnotations">削除される列に存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>既存の列を削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">削除する列の名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>外部キー制約をその名前に基づいて削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="dependentTable">外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">データベース内の外部キー制約の名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>外部キー制約を対象の列に基づいて削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="dependentTable">外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumn">外部キー列。</param>
      <param name="principalTable">この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>外部キー制約を対象の列に基づいて削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="dependentTable">外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumn">外部キー列。</param>
      <param name="principalTable">この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="principalColumn">この外部キーが参照する列。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>外部キー制約を対象の列に基づいて削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="dependentTable">外部キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="dependentColumns">外部キー列。</param>
      <param name="principalTable">この外部キーが参照する列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>インデックスをその名前に基づいて削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">インデックスを削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">削除するインデックスの名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>インデックスを対象の列に基づいて削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">インデックスを削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="columns">インデックスの対象となる列の名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>既定の名前で作成された既存の主キーを削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>既定の名前を持たない既存の主キーを削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">主キー列を含むテーブル。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">削除する主キーの名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>名前を指定して既存のストアド プロシージャを削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するプロシージャの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>テーブルを削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="removedColumnAnnotations">削除されるテーブルの列に存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>テーブルを削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="removedAnnotations">削除されるテーブルに存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="removedColumnAnnotations">削除されるテーブルの列に存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>テーブルを削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="removedAnnotations">削除されるテーブルに存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>テーブルを削除する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトと等しいかどうかを判定します。</summary>
      <returns>指定されたオブジェクトが現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のインスタンスと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>現在のオブジェクトのハッシュ関数を返します。</summary>
      <returns>現在のオブジェクトのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>現在のインスタンスのランタイム型を返します。</summary>
      <returns>現在のインスタンスのランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>現在のオブジェクトの簡易コピーを作成します。</summary>
      <returns>現在のオブジェクトの簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>ストアド プロシージャを新しいスキーマに移動する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">移動するストアド プロシージャの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="newSchema">ストアド プロシージャの移動先となるスキーマ。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>テーブルを新しいスキーマに移動する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">移動するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="newSchema">テーブルの移動先となるスキーマ。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>列の名前を変更する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">名前を変更する列を含むテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">名前を変更する列の名前。</param>
      <param name="newName">列の新しい名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
      <summary>インデックスの名前を変更する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">名前を変更するインデックスを含むテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="name">変更するインデックスの名前。</param>
      <param name="newName">インデックスの新しい名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>ストアド プロシージャの名前を変更する操作を追加します。ストアド プロシージャのスキーマを変更するには、MoveStoredProcedure を使用します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">名前を変更するストアド プロシージャの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="newName">ストアド プロシージャの新しい名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>テーブルの名前を変更する操作を追加します。テーブルのスキーマを変更するには MoveTable を使用します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">名前を変更するテーブルの名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="newName">テーブルの新しい名前。スキーマ名はオプションです。スキーマを指定しない場合は dbo と見なされます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>SQL コマンドを実行する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="sql">実行する SQL。</param>
      <param name="suppressTransaction">移行プロセスに使用されるトランザクション外で SQL を実行するかどうかを示す値。値を指定しない場合、SQL はトランザクション内で実行されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
      <summary>SQL ファイルを実行する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="sqlFile">実行する SQL ファイル。相対パスは、現在の AppDomain の BaseDirectory との相対位置と見なされます。</param>
      <param name="suppressTransaction">移行プロセスに使用されるトランザクション外で SQL を実行するかどうかを示す値。値を指定しない場合、SQL はトランザクション内で実行されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
      <summary>SQL リソース ファイルを実行する操作を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="sqlResource">実行する SQL リソース ファイルのマニフェスト リソース名。</param>
      <param name="resourceAssembly">リソース ファイルを含むアセンブリ。指定されない場合は呼び出し元のアセンブリと見なされます。</param>
      <param name="suppressTransaction">移行プロセスに使用されるトランザクション外で SQL を実行するかどうかを示す値。値を指定しない場合、SQL はトランザクション内で実行されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>移行操作を追加します。</summary>
      <param name="migrationOperation">追加する移行操作。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>アップグレード プロセス中に実行する操作。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>指定したモデルでの移行の使用に関連する構成。通常は、このクラスを使用するのではなく、<see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" /> から派生する構成クラスを作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>DbMigrationsConfiguration クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>自動移行中にデータ損失を許容するかどうかを示す値を取得または設定します。false に設定すると、自動移行の一環としてデータ損失が発生した場合に例外がスローされます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>データベースを移行する際に自動移行が使用できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>移行のスキャフォールド時に使用するコード ジェネレーターを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>移行内で個々のコマンドに使用されるタイムアウト値を取得または設定します。null 値は、基になるプロバイダーの既定値が使用されることを示します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>この構成に属する移行と、同じデータベースを使用する他の構成に属する移行とを区別するための文字列を取得または設定します。このプロパティを使用すると、複数の異なるモデルからの移行を単一のデータベースに適用することができます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>移行するモデルを表す派生 DbContext を取得または設定します。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>移行が格納される既定のディレクトリ。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>指定したデータベース プロバイダーで使用されるように設定されている履歴コンテキスト ファクトリを取得します。</summary>
      <returns>データベース プロバイダーに設定されている履歴コンテキスト ファクトリ。</returns>
      <param name="providerInvariantName">ファクトリを取得する対象のデータベース プロバイダーの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>指定したデータベース プロバイダーで使用されるように設定されている SQL ジェネレーターを取得します。</summary>
      <returns>データベース プロバイダーに設定されている SQL ジェネレーター。</returns>
      <param name="providerInvariantName">SQL ジェネレーターを取得するデータベース プロバイダーの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>コードベースの移行を含むアセンブリを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>コードベースの移行が格納されているサブディレクトリを取得または設定します。このプロパティは、Visual Studio プロジェクトのルートの下のサブディレクトリに対する相対パスを設定する必要があることに注意してください。絶対パスを設定することはできません。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>コードベースの移行に使用される名前空間を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>指定したデータベース プロバイダーで使用される <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> インスタンスを作成するための新しいファクトリを追加します。</summary>
      <param name="providerInvariantName">SQL ジェネレーターを設定するデータベース プロバイダーの名前。</param>
      <param name="factory">既定のスキーマを表す指定した <see cref="T:System.Data.Common.DbConnection" /> および <see cref="T:System.String" /> 用の <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> インスタンスを作成するためのファクトリ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>指定したデータベース プロバイダーで使用される新しい SQL ジェネレーターを追加します。</summary>
      <param name="providerInvariantName">SQL ジェネレーターを設定するデータベース プロバイダーの名前。</param>
      <param name="migrationSqlGenerator">使用される SQL ジェネレーター。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>移行するデータベースの接続をオーバーライドする値を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>指定したモデルでの移行の使用に関連する構成。</summary>
      <typeparam name="TContext">この構成が適用されるモデルを表すコンテキスト。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>DbMigrationsConfiguration クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>現在の構成が指定したオブジェクトと等しいかどうかを判断します。</summary>
      <returns>現在の構成が指定したオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在の構成と比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>このインスタンスのハッシュ関数を取得します。</summary>
      <returns>このインスタンスのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>現在のインスタンスのランタイム型を返します。</summary>
      <returns>現在のインスタンスのランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>現在のオブジェクトの簡易コピーを作成します。</summary>
      <returns>現在のオブジェクトの簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>最新の移行へのアップグレード後に動作し、シード データを更新できるようにします。</summary>
      <param name="context">シード データの更新に使用されるコンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>この構成の文字列表記を返します。</summary>
      <returns>この構成の文字列表記。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>DbMigrator は、既存の移行をデータベースに適用するために使用されます。DbMigrator を使用して、任意の移行にアップグレードおよびダウングレードできます。モデルの変更に基づいて移行をスキャフォールドするには、<see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" /> を使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>DbMigrator クラスの新しいインスタンスを初期化します。</summary>
      <param name="configuration">移行プロセスに使用される構成。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>移行プロセスに使用されている構成を取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>ターゲット データベースに適用されているすべての移行を取得します。</summary>
      <returns>移行のリスト。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>構成済みの移行アセンブリで定義されているすべての移行を取得します。</summary>
      <returns>移行のリスト。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>アセンブリで定義されているが、ターゲット データベースに適用されていないすべての移行を取得します。</summary>
      <returns>移行のリスト。</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>移行が適用される前のデータベースの状態を表す移行 ID。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>ターゲット データベースを、指定された移行に更新します。</summary>
      <param name="targetMigration">アップグレード/ダウングレード先の移行。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> の一連の拡張メソッド。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>SaveChanges が呼び出されたときに、カスタム ID 式に基づいてエンティティを追加または更新します。データベース用語の "upsert" 操作に相当します。このメソッドは、Migrations を使用してデータをシードする場合に役立つことがあります。</summary>
      <param name="set">エンティティが属するエンティティ セット。</param>
      <param name="identifierExpression">Add または Update のどちらの操作を実行するかを決定する際に使用されるプロパティを指定する式。</param>
      <param name="entities">追加または更新するエンティティ。</param>
      <typeparam name="TEntity">追加または更新するエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>SaveChanges が呼び出されたときに、キー単位でエンティティを追加または更新します。データベース用語の "upsert" 操作に相当します。このメソッドは、Migrations を使用してデータをシードする場合に役立つことがあります。</summary>
      <param name="set">エンティティが属するエンティティ セット。</param>
      <param name="entities">追加または更新するエンティティ。</param>
      <typeparam name="TEntity">追加または更新するエンティティの型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>列を構成する際に使用するヘルパー クラス。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>バイナリ データを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="maxLength">配列データの許容最大長。</param>
      <param name="fixedLength">すべてのデータを最大長まで埋め込むかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="timestamp">この列をタイムスタンプとして構成するかどうかを示す値。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>ブール型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Byte 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>DateTime 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>DateTimeOffset 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Decimal 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="scale">列の小数点以下桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Double 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のオブジェクトと等しいかどうかを示します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>geography 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>geometry 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>GUID 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>整数型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Long 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>現在の <see cref="T:System.Object" /> の簡易コピーを作成します。</summary>
      <returns>現在の <see cref="T:System.Object" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Short 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="identity">挿入時にデータベースでこの列の値を生成するかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Single 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>String 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="maxLength">文字列データの許容最大長。</param>
      <param name="fixedLength">すべてのデータを最大長まで埋め込むかどうかを示す値。</param>
      <param name="unicode">列で Unicode コンテンツをサポートするかどうかを示す値。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Time 型のデータを格納するための新しい列定義を作成します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>新しく作成された列定義。</returns>
      <param name="nullable">列で null 値が許容されるかどうかを示す値。</param>
      <param name="precision">列の有効桁数。</param>
      <param name="defaultValue">この列の既定値として使用する定数値。</param>
      <param name="defaultValueSql">この列の既定値として使用する SQL 式。</param>
      <param name="name">列の名前。</param>
      <param name="storeType">この列に使用するプロバイダー固有のデータ型。</param>
      <param name="annotations">通常、Code First モデルからのカスタム注釈。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>パラメーターを構成する際に使用するクラスを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Builders.ParameterBuilder" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>バイナリ データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="maxLength">配列データの許容最大長。</param>
      <param name="fixedLength">すべてのデータを最大長まで埋め込むかどうかを示す値。</param>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>Boolean データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>Byte データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>DateTime データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="precision">パラメーターの有効桁数。</param>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>DateTimeOffset データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="precision">パラメーターの有効桁数。</param>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Decimal データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="precision">パラメーターの数値の総桁数。</param>
      <param name="scale">パラメーターの数値の小数点以下桁数。</param>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>Double データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
      <summary>このインスタンスが特定のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>このインスタンスが特定のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>geography データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>geometry データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
      <summary>このインスタンスに関連付けられているハッシュ コードを取得します。</summary>
      <returns>このインスタンスに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>GUID データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>Integer データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>Long データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>現在の <see cref="T:System.Object" /> の簡易コピーを作成します。</summary>
      <returns>現在の <see cref="T:System.Object" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>Short データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>Single データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>String データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="maxLength">文字列データの許容最大長。</param>
      <param name="fixedLength">すべてのデータを最大長まで埋め込むかどうかを示す値。</param>
      <param name="unicode">パラメーターで Unicode コンテンツをサポートするかどうかを示す値。</param>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>Time データをパスするための新しいパラメーター定義を作成します。</summary>
      <returns>新しく構築されたパラメーター定義。</returns>
      <param name="precision">パラメーターの有効桁数。</param>
      <param name="defaultValue">このパラメーターの既定値として使用する定数値。</param>
      <param name="defaultValueSql">このパラメーターの既定値として使用する SQL 式。</param>
      <param name="name">パラメーターの名前。</param>
      <param name="storeType">このパラメーターに使用するプロバイダー固有のデータ型。</param>
      <param name="outParameter">パラメーターが出力パラメーターかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.DbMigration" /> での CreateTable 呼び出しによって作成されるテーブルをさらに構成するために使用するヘルパー クラス。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <typeparam name="TColumns">テーブルの列を表す型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>TableBuilder クラスの新しいインスタンスを初期化します。</summary>
      <param name="createTableOperation">さらに構成するテーブル作成操作。</param>
      <param name="migration">テーブルが作成される移行。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>テーブルに作成する外部キー制約を指定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>オブジェクト自身 (複数の呼び出しを連結するため)。</returns>
      <param name="principalTable">外部キー制約の対象となるテーブルの名前。</param>
      <param name="dependentKeyExpression">外部キーのプロパティを表すラムダ式。C#:t =&amp;gt; t.PropertyOne VB.Net:Function(t) t.PropertyOne 複数のプロパティが外部キーを構成している場合、それらのプロパティを含む匿名型を指定します。C#:t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net:Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">外部キー制約で連鎖削除を構成するかどうかを示す値。</param>
      <param name="name">この外部キー制約の名前。名前を指定しない場合は、既定の名前が計算されます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>現在のオブジェクトのハッシュ コードを取得します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
      <summary>テーブルに作成するインデックスを指定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>オブジェクト自身 (複数の呼び出しを連結するため)。</returns>
      <param name="indexExpression">インデックスを付けるプロパティを表すラムダ式。C#:t =&amp;gt; t.PropertyOne VB.Net:Function(t) t.PropertyOne 複数のプロパティにインデックスを付ける場合、それらのプロパティを含む匿名型を指定します。C#:t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net:Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="name">インデックスの名前。</param>
      <param name="unique">これが一意のインデックスかどうかを示す値。</param>
      <param name="clustered">これがクラスター化されたインデックスかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>現在の <see cref="T:System.Object" /> の簡易コピーを作成します。</summary>
      <returns>現在の <see cref="T:System.Object" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>テーブルの主キーを指定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>オブジェクト自身 (複数の呼び出しを連結するため)。</returns>
      <param name="keyExpression">主キーとして使用するプロパティを表すラムダ式。C#:t =&amp;gt; t.Id VB.Net:Function(t) t.Id 主キーが複数のプロパティで構成されている場合、それらのプロパティを含む匿名型を指定します。C#:t =&amp;gt; new { t.Id1, t.Id2 } VB.Net:Function(t) New With { t.Id1, t.Id2 }</param>
      <param name="name">主キーの名前。null を指定した場合、既定の名前が生成されます。</param>
      <param name="clustered">これがクラスター化された主キーかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>現在のオブジェクトの文字列形式を返します。</summary>
      <returns>現在のオブジェクトの文字列形式。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>コードベースの移行の C# コードを生成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:byte[]" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>ユーザーが表示および編集できるプライマリ コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="operations">移行で実行される操作。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>ラムダ式を使用して一連の列名を指定するコードを生成します。</summary>
      <param name="columns">コード生成の対象となる列。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="addColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="alterColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="alterProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> のコードを生成します。</summary>
      <param name="alterTableOperation">必要なコード生成のための操作。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> の定義を指定するコードを生成します。</summary>
      <param name="column">コード生成の対象となる列定義。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="emitName">定義に列名を含めるかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="createProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> を実行するコードを生成します。</summary>
      <param name="createTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="dropColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="dropIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="dropProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" /> を実行するコードを生成します。</summary>
      <param name="dropTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="moveProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> を実行するコードを生成します。</summary>
      <param name="moveTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" /> の定義を指定するコードを生成します。</summary>
      <param name="parameterModel">コード生成の対象となるパラメーター定義。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="emitName">定義に列名を含めるかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="renameColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="renameIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="renameProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> を実行するコードを生成します。</summary>
      <param name="renameTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" /> を実行するコードを生成します。</summary>
      <param name="sqlOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>不明なデータ型の列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> を含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="operations">コード生成の対象となる操作。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>移行のメタデータを含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>NULL である可能性がある、指定された注釈の値のコードを生成します。登録されている場合、既定の動作は <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> を使用し、それ以外の場合は注釈の値の ToString を呼び出します。</summary>
      <param name="name">コードが必要な注釈の名前。</param>
      <param name="annotation">生成する注釈。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>これらの注釈を <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼び出しのパラメーターとして渡すときに、使用する注釈の指定された辞書を再作成するためのコードを生成します。</summary>
      <param name="annotations">生成する注釈。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>これらの注釈を <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼び出しのパラメーターとして渡すときに、使用する注釈の指定された辞書を再作成するためのコードを生成します。</summary>
      <param name="annotations">生成する注釈。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>文字列に格納できるように適切なエスケープを使用して識別子を引用符で囲みます。</summary>
      <returns>引用符で囲まれた識別子。</returns>
      <param name="identifier">引用符で囲む識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>データベース成果物の名前から無効な文字を削除します。</summary>
      <returns>無効な文字が削除された名前。</returns>
      <param name="name">無効な文字を削除する名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>指定したデータ型の列に使用する型名を取得します。</summary>
      <returns>生成される移行で使用する型名。</returns>
      <param name="primitiveTypeKind">変換するデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>クラス属性を生成します。</summary>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>WriteClassStart で始まるクラスの終了コードを生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>ステートメントとクラス定義を使用して名前空間を生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="base">生成されるクラスの基本クラス。</param>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
      <param name="namespaces">追加する using ディレクティブで指定する名前空間。null の場合は、GetDefaultNamespaces から返される名前空間が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>分離コード ファイル内のソース モデルまたはターゲット モデルを返すプロパティを生成します。</summary>
      <param name="name">プロパティ名。</param>
      <param name="value">返される値。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>コードベースの移行のコードを生成するプロバイダーの基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
      <summary>使用されている <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> インスタンスを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>ユーザーのプロジェクトに追加するコードを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="operations">移行で実行される操作。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>生成されるコードに "using" または "Imports" ディレクティブとして出力する必要がある既定の名前空間を取得します。</summary>
      <returns>名前空間名の順序指定された一覧。</returns>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>指定した操作によって生成されたコードを処理するために、"using" または "Imports" ディレクティブとして出力する必要がある名前空間を取得します。</summary>
      <returns>名前空間名の順序指定された一覧。</returns>
      <param name="operations">コード生成の対象となる操作。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>モデルの保留中の変更をデータベースに適用するコードベースの移行をスキャフォールディングします。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>MigrationScaffolder クラスの新しいインスタンスを初期化します。</summary>
      <param name="migrationsConfiguration">スキャフォールディングに使用する構成。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>移行の生成されるコードで使用される名前空間を取得または設定します。既定では、この名前空間は、コンストラクターに渡される移行構成オブジェクトの MigrationsNamespace と同じです。VB.NET プロジェクトの場合、プロジェクトのルート名前空間を考慮して、これを更新する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>モデルの保留中の変更をデータベースに適用するコードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="migrationName">スキャフォールディングする移行に使用する名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>モデルの保留中の変更をデータベースに適用するコードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="migrationName">スキャフォールディングする移行に使用する名前。</param>
      <param name="ignoreChanges">モデルの変更を含めるかどうか。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>以前に実行されたデータベース初期化子に対応する初期コードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>スキャフォールディングされ、ファイルに書き込まれる準備ができているコードベースの移行を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>分離コード ファイルに格納するスキャフォールディングされた移行コードを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>この移行を保存するユーザーのプロジェクトのサブディレクトリを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>移行が再スキャフォールディングされたかどうかを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>この移行に使用するプログラミング言語を取得または設定します。通常、生成されるコードのファイル拡張子に使用されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>この移行の一意の識別子を取得または設定します。通常、生成されるコードのファイル名に使用されます。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>移行リソース ファイルに追加する、文字列リソースのディクショナリを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>ユーザーが編集できるスキャフォールディングされた移行コードを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Visual Studio で編集するアプリケーションと対話する必要がある移行関連のコマンドを実行するために、デザイン時ツールで使用されるヘルパー クラス。アプリケーションを編集するため、常に最新バージョンが読み込まれるようにアセンブリを個別の AppDomain に読み込む必要があります。また、構成が確実に適用されるように、スタートアップ プロジェクトの App/Web.config ファイルもコピーされます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>ToolingFacade クラスの新しいインスタンスを初期化します。</summary>
      <param name="migrationsAssemblyName">使用する移行構成が含まれるアセンブリの名前。</param>
      <param name="contextAssemblyName">使用する DbContext が含まれるアセンブリの名前。</param>
      <param name="configurationTypeName">使用する移行構成の名前空間修飾名。</param>
      <param name="workingDirectory">コンパイル済みアセンブリを格納する作業ディレクトリ。</param>
      <param name="configurationFilePath">スタートアップ プロジェクトの config ファイルのパス。</param>
      <param name="dataDirectory">スタートアップ プロジェクトのアプリケーション データ ディレクトリのパス。通常は、Web アプリケーションの App_Data ディレクトリまたは実行可能ファイルの作業ディレクトリです。</param>
      <param name="connectionStringInfo">移行するデータベースへの接続。null を指定した場合、コンテキストの既定の接続が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" /> クラスの現在のインスタンスによって使用されているリソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>ファサードで使用したすべてのリソースを解放します。</summary>
      <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は true。アンマネージ リソースだけを解放する場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>ファサードで使用したすべてのアンマネージ リソースを解放します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から派生する型の完全修飾名を取得します。</summary>
      <returns>検出されたコンテキスト型。</returns>
      <param name="contextTypeName">コンテキスト型の名前。null の場合、アセンブリで検出された単一のコンテキスト型が返されます。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>
        <see cref="T:System.Data.Entity.DbContext" /> から派生するすべての型の完全修飾名を取得します。</summary>
      <returns>見つかったすべてのコンテキスト型。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>データベースに適用されているすべての移行の一覧を取得します。</summary>
      <returns>適用されている移行の ID。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>データベースに適用されていないすべての移行の一覧を取得します。</summary>
      <returns>保留中の移行の ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>情報をログに記録するために実行するアクションを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>詳細情報をログに記録するために実行するアクションを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>警告をログに記録するために実行するアクションを取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>モデルの保留中の変更を適用するコードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="migrationName">生成される移行の名前。</param>
      <param name="language">生成される移行のプログラミング言語。</param>
      <param name="rootNamespace">移行の追加先となるプロジェクトのルート名前空間。</param>
      <param name="ignoreChanges">モデルの変更を含めるかどうか。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>以前に実行されたデータベース初期化子に対応する初期コードベースの移行をスキャフォールディングします。</summary>
      <returns>スキャフォールディングされた移行。</returns>
      <param name="language">生成される移行のプログラミング言語。</param>
      <param name="rootNamespace">移行の追加先となるプロジェクトのルート名前空間。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>2 つの移行間での移行を実行する SQL スクリプトを生成します。</summary>
      <returns>生成された SQL スクリプト。</returns>
      <param name="sourceMigration">更新元の移行。null を指定した場合、現在のデータベースを更新するスクリプトが生成されます。</param>
      <param name="targetMigration">更新先の移行。null を指定した場合、最新の移行に更新するスクリプトが生成されます。</param>
      <param name="force">自動移行中にデータの損失を許容するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>データベースを、指定した移行に更新します。</summary>
      <param name="targetMigration">移行先の移行の ID。null を指定した場合、データベースが最新の移行に更新されます。</param>
      <param name="force">自動移行中にデータの損失を許容するかどうかを示す値。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>コードベースの移行の VB.Net コードを生成します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>
        <see cref="T:byte[]" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>ユーザーが表示および編集できるプライマリ コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="operations">移行で実行される操作。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>ラムダ式を使用して一連の列名を指定するコードを生成します。</summary>
      <param name="columns">コード生成の対象となる列。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="addColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="alterColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="alterProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> のコードを生成します。</summary>
      <param name="alterTableOperation">必要なコード生成のための操作。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" /> の定義を指定するコードを生成します。</summary>
      <param name="column">コード生成の対象となる列定義。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="emitName">定義に列名を含めるかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="createProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> を実行するコードを生成します。</summary>
      <param name="createTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="dropColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="dropIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="dropPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="dropProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" /> を実行するコードを生成します。</summary>
      <param name="dropTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="moveProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" /> を実行するコードを生成します。</summary>
      <param name="moveTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" /> を実行するコードを生成します。</summary>
      <param name="parameterModel">コード生成の対象となるパラメーター モデル定義。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="emitName">定義に列名を含める場合は true。それ以外の場合は false。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" /> を実行するコードを生成します。</summary>
      <param name="renameColumnOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="renameIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" /> を実行するコードを生成します。</summary>
      <param name="renameProcedureOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" /> を実行するコードを生成します。</summary>
      <param name="renameTableOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" /> を実行するコードを生成します。</summary>
      <param name="sqlOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>
        <see cref="T:System.DateTime" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>
        <see cref="T:System.DateTimeOffset" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>
        <see cref="T:System.Decimal" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>
        <see cref="T:System.Guid" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>
        <see cref="T:System.Int64" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>不明なデータ型の列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>
        <see cref="T:System.Single" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>
        <see cref="T:System.String" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>移行のメタデータを含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="operations">移行で実行される操作。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>移行のメタデータを含む分離コード ファイルを生成します。</summary>
      <returns>生成されたコード。</returns>
      <param name="migrationId">移行の一意の識別子。</param>
      <param name="sourceModel">移行のメタデータに格納されるソース モデル。</param>
      <param name="targetModel">移行のメタデータに格納されるターゲット モデル。</param>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>
        <see cref="T:System.TimeSpan" /> 列の既定値を指定するコードを生成します。</summary>
      <returns>既定値を表すコード。</returns>
      <param name="defaultValue">既定値として使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>NULL である可能性がある、指定された注釈の値のコードを生成します。登録されている場合、既定の動作は <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" /> を使用し、それ以外の場合は注釈の値の ToString を呼び出します。</summary>
      <param name="name">コードが必要な注釈の名前。</param>
      <param name="annotation">生成する注釈。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>これらの注釈を <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼び出しのパラメーターとして渡すときに、使用する注釈の指定された辞書を再作成するためのコードを生成します。</summary>
      <param name="annotations">生成する注釈。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>これらの注釈を <see cref="T:System.Data.Entity.Migrations.DbMigration" /> 呼び出しのパラメーターとして渡すときに、使用する注釈の指定された辞書を再作成するためのコードを生成します。</summary>
      <param name="annotations">生成する注釈。</param>
      <param name="writer">生成されたコードを書き込むライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addForeignKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> を実行するコードを生成します。</summary>
      <param name="addPrimaryKeyOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> の一部として <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> を実行するコードを生成します。</summary>
      <param name="createIndexOperation">コード生成の対象となる操作。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>文字列に格納できるように適切なエスケープを使用して識別子を引用符で囲みます。</summary>
      <returns>引用符で囲まれた識別子。</returns>
      <param name="identifier">引用符で囲む識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>データベース成果物の名前から無効な文字を削除します。</summary>
      <returns>無効な文字が削除された名前。</returns>
      <param name="name">無効な文字を削除する名前。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>指定したデータ型の列に使用する型名を取得します。</summary>
      <returns>生成される移行で使用する型名。</returns>
      <param name="primitiveTypeKind">変換するデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>クラス属性を生成します。</summary>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>WriteClassStart で始まるクラスの終了コードを生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>ステートメントとクラス定義を使用して名前空間を生成します。</summary>
      <param name="namespace">コードが生成される名前空間。</param>
      <param name="className">生成されるクラスの名前。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
      <param name="base">生成されるクラスの基本クラス。</param>
      <param name="designer">分離コード ファイルに対してこのクラスを生成するかどうかを示す値。</param>
      <param name="namespaces">追加する Imports ディレクティブで指定する名前空間。null の場合は、GetDefaultNamespaces から返される名前空間が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>分離コード ファイル内のソース モデルまたはターゲット モデルを返すプロパティを生成します。</summary>
      <param name="name">プロパティ名。</param>
      <param name="value">返される値。</param>
      <param name="writer">生成されたコードの追加先となるテキスト ライター。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>このクラスは、データベースから移行履歴の読み取りと書き込みを行うために Code First Migrations で使用されます。移行履歴テーブルの定義をカスタマイズするには、このクラスから派生させて OnModelCreating をオーバーライドします。派生インスタンスは、<see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> を使用して移行構成ベースで、または  <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> を使用してグローバルに登録できます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>HistoryContext クラスの新しいインスタンスを初期化します。派生履歴コンテキストを作成する場合、一般的には、これらの同じパラメーターを受け入れるコンストラクターを公開し、それらのパラメーターをこのベース コンストラクターに渡します。</summary>
      <param name="existingConnection">新しいコンテキストに使用する既存の接続。</param>
      <param name="defaultSchema">移行対象のモデルの既定のスキーマ。OnModelCreating で別のスキーマが構成されていない限り、移行履歴テーブルに対してこのスキーマが使用されます。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>以前このコンテキストに対して構築されたモデルの特定に使用されたキーを取得します。これは、新しいコンテキスト インスタンスが作成されるたびに、OnModelCreating の処理とモデルの計算を回避するために使用されます。既定では、このプロパティは既定のスキーマを返します。ほとんどの場合、このプロパティをオーバーライドする必要はありません。ただし OnModelCreating の実装に、同じデータベース プロバイダーと既定のスキーマに対してビルドされる別のモデルが発生する条件ロジックが含まれている場合、このプロパティをオーバーライドして、適切なキーを計算する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>移行対象のモデルの既定のスキーマを取得します。OnModelCreating で別のスキーマが構成されていない限り、移行履歴テーブルに対してこのスキーマが使用されます。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>移行履歴テーブルに使用される既定の名前。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> インスタンスの読み書きに使用できる <see cref="T:System.Data.Entity.DbSet`1" /> を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>移行履歴テーブルに既定の構成を適用します。このメソッドをオーバーライドする場合、カスタム構成を適用する前に、この基本実装を呼び出すことをお勧めします。</summary>
      <param name="modelBuilder">作成されるコンテキストのモデルを定義するビルダー。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>このクラスは、データベースから移行履歴の読み取りと書き込みを行うために Code First Migrations で使用されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>行を適用するコンテキストを表すキーを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>この行が表す移行の ID を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>この移行が適用された後のモデルの状態を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>このエントリが作成された Entity Framework のバージョンを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>自動移行によってデータが失われた場合に発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>AutomaticDataLossException クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>AutomaticDataLossException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>MigrationsException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外です。または内部例外が指定されていない場合は NULL 参照 (Visual Basic では Nothing) です。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>前回の移行の適用後、モデルの保留中の変更があるときに、自動移行が無効になっている場合に発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>AutomaticMigrationsDisabledException クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>AutomaticMigrationsDisabledException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>MigrationsException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外です。または内部例外が指定されていない場合は NULL 参照 (Visual Basic では Nothing) です。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>スキャフォールディングされた移行の IntelliSense に特定のメンバーが表示されないようにするために、<see cref="T:System.Data.Entity.Migrations.DbMigration" /> によって明示的に実装されます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>移行にカスタム <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" /> を追加します。カスタム操作実装で新しい操作を追加するには、Fluent スタイルの API を提供する <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" /> 上に拡張メソッドを作成することをお勧めします。</summary>
      <param name="migrationOperation">追加する操作。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>コードベースの移行に関する追加のメタデータを提供します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>移行の一意の識別子を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>この移行を実行する前のモデルの状態を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>この移行を実行した後のモデルの状態を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Code First Migrations のパイプラインで発生するエラーを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>MigrationsException クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化されたデータを使用して、MigrationsException クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">スローされる例外に関するシリアル化されたオブジェクト データを保持する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">転送元または転送先に関するコンテキスト情報を含んでいる <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>MigrationsException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>MigrationsException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外です。または内部例外が指定されていない場合は NULL 参照 (Visual Basic では Nothing) です。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>移行プロセスで使用できるロガーの基本クラスです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>情報メッセージをログに記録します。</summary>
      <param name="message">ログに記録されるメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>詳細出力を要求したユーザーにのみ表示される追加情報をログに記録します。</summary>
      <param name="message">ログに記録されるメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>ユーザーに通知する必要がある警告をログに記録します。</summary>
      <param name="message">ログに記録されるメッセージ。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>データベースに適用されていない既存の移行が存在するために操作が実行できなかった場合にスローされます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>MigrationsPendingException クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>MigrationsPendingException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>MigrationsPendingException クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">エラーを説明するメッセージ。</param>
      <param name="innerException">現在の例外の原因となった例外です。または内部例外が指定されていない場合は NULL 参照 (Visual Basic では Nothing) です。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>コア <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> をラップするデコレータの基本クラスを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerMigrator">このデコレータがラップしている Migrator。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>移行プロセスに使用されている構成を取得します。</summary>
      <returns>移行プロセスに使用されているプロセス。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>データベースに適用されている移行の一覧を取得します。</summary>
      <returns>移行 ID の一覧。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>アセンブリで定義されている移行の一覧を取得します。</summary>
      <returns>移行 ID の一覧。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>データベースに適用されていない保留中の移行の一覧を取得します。</summary>
      <returns>移行 ID の一覧。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>ターゲット データベースを最新の移行に更新します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>ターゲット データベースを、指定された移行に更新します。</summary>
      <param name="targetMigration">アップグレード/ダウングレード先の移行。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>移行操作中のログを提供するデコレータです。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>MigratorLoggingDecorator クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerMigrator">このデコレータがラップしている Migrator。</param>
      <param name="logger">メッセージの書き込み先のロガー。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>データベースに変更を適用するのではなく、SQL スクリプトを生成するデコレータ。このデコレータを使用して <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> をラップすると、<see cref="T:System.Data.Entity.Migrations.DbMigrator" /> によってターゲット データベースに変更が適用されるのを防ぐことができます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>MigratorScriptingDecorator クラスの新しいインスタンスを初期化します。</summary>
      <param name="innerMigrator">このデコレータがラップしている Migrator。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>データベースを更新するスクリプトを生成します。</summary>
      <returns>生成された SQL スクリプト。</returns>
      <param name="sourceMigration">更新元の移行。null を指定した場合、現在のデータベースを更新するスクリプトが生成されます。</param>
      <param name="targetMigration">更新先の移行。null を指定した場合、最新の移行に更新するスクリプトが生成されます。</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>テーブルに追加する列を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>AddColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を追加するテーブルの名前。</param>
      <param name="column">追加する列の詳細。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>追加する列の詳細を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>追加した列の削除を表す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
      <returns>変更が破壊的な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>列を追加するテーブルの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>テーブルに追加する外部キー制約を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>AddForeignKeyOperation クラスの新しいインスタンスを初期化します。PrincipalTable、PrincipalColumns、DependentTable、DependentColumns の各プロパティも設定する必要があります。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>外部キー制約で連鎖削除を構成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>外部キー列にインデックスを作成する操作を取得します。</summary>
      <returns>インデックスを追加する操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>外部キー制約を削除する操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>この変更によってデータが失われるかどうかを示す値を取得または設定します。</summary>
      <returns>この変更によってデータが失われる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>外部キー制約の対象となる列の名前。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>テーブルへの主キーの追加を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>AddPrimaryKeyOperation クラスの新しいインスタンスを初期化します。テーブルと列のプロパティも設定する必要があります。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>主キーを削除する操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>クラスター化主キーであるかどうかを取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>既存の列の変更を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>AlterColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="column">列の変更内容の詳細。</param>
      <param name="isDestructiveChange">この変更によってデータが失われるかどうかを示す値。</param>
      <param name="inverse">列のこの変更を元に戻す操作。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>AlterColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="column">列の変更内容の詳細。</param>
      <param name="isDestructiveChange">この変更によってデータが失われるかどうかを示す値。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>列の新しい定義を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>変更を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>この変更によってデータが失われるかどうかを示す値を取得します。</summary>
      <returns>この変更によってデータが失われる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>列が属するテーブルの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>既存のストアド プロシージャの変更を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">ストアド プロシージャの名前。</param>
      <param name="bodySql">SQL で表現されたストアド プロシージャの本体。</param>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>この操作を元に戻す操作を取得します。常に <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" /> を返します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
      <summary>テーブルに存在するカスタム注釈に加えられた変更を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">注釈が変更されたテーブルの名前。</param>
      <param name="annotations">テーブルに存在する変更されたカスタム注釈。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
      <summary>テーブルに存在する変更されたカスタム注釈を取得します。</summary>
      <returns>テーブルに存在する変更されたカスタム注釈。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
      <summary>注釈が変更されたテーブルに含まれる列を取得します。</summary>
      <returns>注釈が変更されたテーブルに含まれる列。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
      <summary>この操作の逆の操作を取得して、注釈がこの操作の適用前の状態に戻るようにします。</summary>
      <returns>この操作の逆の操作。注釈は、逆の操作によって操作の適用前の状態に戻ります。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
      <summary>注釈が変更されたテーブルの名前を取得します。</summary>
      <returns>注釈が変更されたテーブルの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>列に関する情報を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>ColumnModel クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="type">この列のデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>ColumnModel クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="type">この列のデータ型。</param>
      <param name="typeUsage">データ型に関する追加の詳細情報。これには、最大長や null 値の許容などの詳細情報が含まれます。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
      <summary>列に存在する変更されたカスタム注釈を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>この列のデータベースの型に対応する CLR 型の既定値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>この列のデータベースの型に対応する CLR 型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>ID パターンを使用して、データベースでこの列の値を生成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>この列が別の列よりも範囲の狭いデータ型かどうかを判断します。指定した列定義をこの定義に変更することによってデータが失われるかどうかを判断するために使用されます。</summary>
      <returns>この列が範囲の狭いデータ型の場合は true。</returns>
      <param name="column">比較対象の列。</param>
      <param name="providerManifest">使用するデータベース プロバイダーの詳細情報。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>この列に null 値を格納できるかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>このプロパティ モデルをタイムスタンプとして構成するかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>データベースのインデックスの作成を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>CreateIndexOperation クラスの新しいインスタンスを初期化します。テーブルと列のプロパティも設定する必要があります。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>このインデックスを削除する操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>クラスター化インデックスであるかどうかを取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>この変更によってデータが失われるかどうかを示す値を取得または設定します。</summary>
      <returns>この変更によってデータが失われる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>これが一意のインデックスかどうかを示す値を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>新しいストアド プロシージャをデータベースに追加する移行操作。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">ストアド プロシージャの名前。</param>
      <param name="bodySql">SQL で表現されたストアド プロシージャの本体。</param>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>ストアド プロシージャを削除する操作を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>テーブルの作成を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">作成するテーブルの名前。</param>
      <param name="annotations">作成されるテーブルに存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">作成するテーブルの名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
      <summary>作成されるテーブルに存在するカスタム注釈を取得します。</summary>
      <returns>作成されるテーブルに存在するカスタム注釈。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>新しいテーブルに含まれる列を取得します。</summary>
      <returns>新しいテーブルに含まれる列。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>テーブルを削除する操作を取得します。</summary>
      <returns>テーブルを削除する操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>作成するテーブルの名前を取得します。</summary>
      <returns>作成するテーブルの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>新しいテーブルの主キーを取得または設定します。</summary>
      <returns>新しいテーブルの主キー。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>テーブルから削除する列を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>DropColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を削除するテーブルの名前。</param>
      <param name="name">削除する列の名前。</param>
      <param name="removedAnnotations">削除される列に存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="inverse">削除操作を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>DropColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を削除するテーブルの名前。</param>
      <param name="name">削除する列の名前。</param>
      <param name="removedAnnotations">削除される列に存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>DropColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を削除するテーブルの名前。</param>
      <param name="name">削除する列の名前。</param>
      <param name="inverse">削除操作を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>DropColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列を削除するテーブルの名前。</param>
      <param name="name">削除する列の名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>列の削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>削除する列の名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
      <summary>削除される列に存在するカスタム注釈を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>列を削除するテーブルの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>テーブルから削除する外部キー制約を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="inverse">外部キー制約の削除を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" /> クラスの新しいインスタンスを初期化します。PrincipalTable、DependentTable、DependentColumns の各プロパティも設定する必要があります。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>外部キー列の関連付けられたインデックスを削除する操作を取得します。</summary>
      <returns>インデックスを削除する操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>外部キー制約の削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
      <returns>外部キー制約の削除を元に戻すことを表す操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
      <returns>変更が破壊的な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>既存のインデックスの削除を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>DropIndexOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="inverse">インデックスの削除を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>DropIndexOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>インデックスの削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>テーブルからの主キーの削除を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>DropPrimaryKeyOperation クラスの新しいインスタンスを初期化します。テーブルと列のプロパティも設定する必要があります。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>単に主キーを削除してから追加するのではなく再構築できるように移行履歴テーブルを変更するときに使用されます。</summary>
      <returns>移行履歴テーブルに使用されるテーブル作成操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>主キーを追加する操作を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>データベースからストアド プロシージャを削除します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するストアド プロシージャの名前。</param>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>この操作を元に戻す操作を取得します。常に <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" /> を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。常に false を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>削除するストアド プロシージャの名前を取得します。</summary>
      <returns>削除するストアド プロシージャの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>既存のテーブルの削除を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>DropTableOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。</param>
      <param name="removedAnnotations">削除されるテーブルに存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="removedColumnAnnotations">削除されるテーブルの列に存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="inverse">テーブルの削除を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>DropTableOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。</param>
      <param name="removedAnnotations">削除されるテーブルに存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="removedColumnAnnotations">削除されるテーブルの列に存在するカスタム注釈。null または空にすることもできます。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>DropTableOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。</param>
      <param name="inverse">テーブルの削除を元に戻すことを表す操作。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>DropTableOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">削除するテーブルの名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>テーブルの削除を元に戻すことを表す操作を取得します。逆の処理を自動的に計算することはできません。逆の処理がコンストラクターに渡されなかった場合、このプロパティは null を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>削除するテーブルの名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
      <summary>削除されるテーブルに存在するカスタム注釈を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
      <summary>削除されるテーブルの列に存在するカスタム注釈を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>外部キー制約に影響する変更の基本クラスです。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>ForeignKeyOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>外部キー列の名前。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>外部キー列が存在するテーブルの名前を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>この外部キー制約に特定の名前が指定されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>この外部キー制約の名前を取得または設定します。名前を指定しない場合は、既定の名前が計算されます。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>外部キー制約の対象となるテーブルの名前を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>移行履歴テーブルに対する DML 変更を表す操作。移行履歴テーブルは、データベースに適用された移行のログを格納するために使用されます。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>HistoryOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="commandTrees">履歴テーブルに適用する操作を表すコマンド ツリーのシーケンス。</param>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>履歴テーブルに適用する操作を表すコマンドのシーケンス。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>インデックスに影響する操作の共通基本クラスです。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>IndexOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
      <summary>渡された列名に基づいて既定のインデックス名を作成します。</summary>
      <returns>既定のインデックス名。</returns>
      <param name="columns">既定のインデックス名の作成に使用される列名。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>インデックスが付けられている列を取得します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>このインデックスに特定の名前が指定されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>このインデックスの名前を取得または設定します。名前を指定しない場合は、既定の名前が計算されます。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>インデックスが属するテーブルを取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>データベース スキーマを変更する操作を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>MigrationOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>プロバイダーが処理できる追加の引数を取得します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>この操作を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>ストアド プロシージャをデータベース内の新しいスキーマに移動する操作を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">移動するストアド プロシージャの名前。</param>
      <param name="newSchema">ストアド プロシージャの新しいスキーマ。</param>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>この操作を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。常に false を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>移動するストアド プロシージャの名前を取得します。</summary>
      <returns>移動するストアド プロシージャの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>ストアド プロシージャの新しいスキーマを所得します。</summary>
      <returns>ストアド プロシージャの新しいスキーマ。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>スキーマ間でのテーブルの移動を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>MoveTableOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">移動するテーブルの名前。</param>
      <param name="newSchema">テーブルの移動先のスキーマの名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>データを新しいテーブルに移動できるように移行履歴テーブルを変更するときに使用されます。</summary>
      <returns>モデルのコンテキスト キー。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>単に主キーを削除してから追加するのではなく再構築できるように移行履歴テーブルを変更するときに使用されます。</summary>
      <returns>移行履歴テーブルに使用されるテーブル作成操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>テーブルを元のスキーマに戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>この変更によってデータが失われるかどうかを示す値を取得します。</summary>
      <returns>この変更によってデータが失われる場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>システム テーブルであるかどうかを示す値を取得します。</summary>
      <returns>システム テーブルである場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>移動するテーブルの名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>テーブルの移動先のスキーマの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>対象のデータベース プロバイダーでサポートされていない可能性があるため実行できない移行操作を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。常に false を返します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>パラメーターに関する情報を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>指定された型で ParameterModel クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">このパラメーターのデータ型。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>型とその使用法を指定して、ParameterModel クラスの新しいインスタンスを初期化します。</summary>
      <param name="type">このパラメーターのデータ型。</param>
      <param name="typeUsage">データ型に関する追加の詳細情報。これには、最大長や null 値の許容などの詳細情報が含まれます。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>このインスタンスが出力パラメーターであるかどうかを示す値を取得または設定します。</summary>
      <returns>このインスタンスが出力パラメーターである場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>主キーに影響する操作を表す共通基本クラスです。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>PrimaryKeyOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
      <summary>主キーの既定の名前を返します。</summary>
      <returns>既定の主キーの名前。</returns>
      <param name="table">対象のテーブルの名前。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>主キーを構成する列を取得します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>この主キーに特定の名前が指定されているかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>この主キーの名前を取得または設定します。名前を指定しない場合は、既定の名前が計算されます。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>主キーを含むテーブルの名前を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>ストアド プロシージャに影響を与える移行操作。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">ストアド プロシージャの名前。</param>
      <param name="bodySql">SQL で表現されたストアド プロシージャの本体。</param>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>SQL で表現されたストアド プロシージャの本体を取得します。</summary>
      <returns>SQL で表現されたストアド プロシージャの本体。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。常に false を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>ストアド プロシージャの名前を取得します。</summary>
      <returns>ストアド プロシージャの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>ストアド プロシージャのパラメーターを取得します。</summary>
      <returns>ストアド プロシージャのパラメーター。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>エンティティのプロパティに関する情報を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>PropertyModel クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="type">このプロパティ モデルのデータ型。</param>
      <param name="typeUsage">データ型に関する追加の詳細情報。これには、最大長や null 値の許容などの詳細情報が含まれます。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>このプロパティ モデルの既定値として使用する定数値を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>このプロパティ モデルの既定値として使用する SQL 式を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>このプロパティ モデルが固定長かどうかを示す値を取得または設定します。配列データ型にのみ有効です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>このプロパティ モデルで Unicode 文字をサポートするかどうかを示す値を取得または設定します。テキスト データ型にのみ有効です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>このプロパティ モデルの最大長を取得または設定します。配列データ型にのみ有効です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>プロパティ モデルの名前を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>このプロパティ モデルの有効桁数を取得または設定します。decimal データ型にのみ有効です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>このプロパティ モデルの小数点以下桁数を取得または設定します。decimal データ型にのみ有効です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>このプロパティ モデルに使用するプロバイダー固有のデータ型を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>このプロパティ モデルのデータ型を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>このプロパティ モデルのデータ型に関する追加の詳細情報を取得します。これには、最大長や null 値の許容などの詳細情報が含まれます。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>既存の列の名前変更を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>RenameColumnOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="name">名前を変更する列の名前。</param>
      <param name="newName">列の新しい名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>名前の変更を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>名前を変更する列の名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>列の新しい名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>列が属するテーブルの名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
      <summary>既存のインデックスの名前変更の操作を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>RenameIndexOperation クラスの新しいインスタンスを初期化します。</summary>
      <param name="table">インデックスが属するテーブルの名前。</param>
      <param name="name">変更するインデックスの名前。</param>
      <param name="newName">インデックスの新しい名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
      <summary>インデックスの名前を元に戻す操作を取得します。</summary>
      <returns>インデックスの名前を元に戻す操作。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
      <summary>インデックスの名前変更によって操作に支障をきたす可能性があるかどうかを取得します。</summary>
      <returns>インデックスの名前変更によって操作に支障をきたす可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
      <summary>変更するインデックスの名前を取得します。</summary>
      <returns>変更するインデックスの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
      <summary>インデックスの新しい名前を取得します。</summary>
      <returns>インデックスの新しい名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
      <summary>インデックスが属するテーブルの名前を取得します。</summary>
      <returns>インデックスが属するテーブルの名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>データベース内のストアド プロシージャの名前変更を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">変更するストアド プロシージャの名前。</param>
      <param name="newName">ストアド プロシージャの新しい名前。</param>
      <param name="anonymousArguments">匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>この操作を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。常に false を返します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>変更するストアド プロシージャの名前を取得します。</summary>
      <returns>変更するストアド プロシージャの名前。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>ストアド プロシージャの新しい名前を取得します。</summary>
      <returns>ストアド プロシージャの新しい名前。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>既存のテーブルの名前変更を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>RenameTableOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="name">名前を変更するテーブルの名前。</param>
      <param name="newName">テーブルの新しい名前。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>名前の変更を元に戻す操作を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>変更が破壊的かどうかを示す値を取得します。</summary>
      <returns>変更が破壊的な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>名前を変更するテーブルの名前を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>テーブルの新しい名前を取得します。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>ターゲット データベースに対して直接実行されるプロバイダー固有の SQL ステートメントを表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>SqlOperation クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="sql">実行する SQL。</param>
      <param name="anonymousArguments">プロバイダーが処理できる追加の引数。匿名型の構文を使用して引数を指定します。例: 'new { SampleArgument = "MyValue" }'。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>この操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
      <returns>この操作によってデータが失われる可能性がある場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>実行する SQL を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>移行プロセスをトランザクション化するために使用されるトランザクション スコープ外でこのステートメントを実行するかどうかを示す値を取得または設定します。true に設定すると、移行プロセスが失敗しても、この操作はロールバックされません。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>データベースに対して実行された操作を保存するデータベース更新操作をスクリプト化するときに使用します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" /> クラスの新しいインスタンスを初期化します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="historyQueryTrees">この移行をデータベースに適用する必要があるかどうかを決定するために使用するクエリ。このクエリを使用して、どのバージョンのデータベースに対しても実行できるべき等な SQL スクリプトを生成します。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>このデータベース更新操作に移行を追加します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <param name="migrationId">移行の ID。</param>
      <param name="operations">移行によって適用される個々の操作。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>この移行をデータベースに適用する必要があるかどうかを決定するために使用するクエリ。このクエリを使用して、どのバージョンのデータベースに対しても実行できるべき等な SQL スクリプトを生成します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>いずれかの操作によってデータが失われる可能性があるかどうかを示す値を取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>データベース更新操作の実行時に適用される移行を取得します。</summary>
      <returns>データベース更新操作の実行時に適用される移行。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>データベースに適用される移行を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>移行の ID を取得します。</summary>
      <returns>移行の ID。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>この移行によって適用される個々の操作を取得します。</summary>
      <returns>この移行によって適用される個々の操作。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>プロバイダーに依存しない移行操作をデータベース プロバイダー固有の SQL コマンドに変換するプロバイダーの共通の基本クラス。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
      <summary>指定した <paramref name="propertyModel" /> からのファセットを使用して、指定した <paramref name="storeTypeName" /> 用のストア型を生成します。</summary>
      <returns>ストア固有の TypeUsage</returns>
      <param name="storeTypeName">ストア型の名前。</param>
      <param name="propertyModel">対象のプロパティ。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>一連の移行操作をデータベース プロバイダー固有の SQL に変換します。</summary>
      <returns>移行操作を実行するために実行される SQL ステートメントのリスト。</returns>
      <param name="migrationOperations">変換される操作。</param>
      <param name="providerManifestToken">対象のデータベースのバージョンを表すトークン。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>ストアド プロシージャの SQL 本体を生成します。</summary>
      <returns>ストアド プロシージャの SQL 本体。</returns>
      <param name="commandTrees">挿入、更新、削除の操作のコマンドを表すコマンド ツリー。</param>
      <param name="rowsAffectedParameter">影響を受ける行のパラメーター名。</param>
      <param name="providerManifestToken">プロバイダー マニフェスト トークン。</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
      <summary>プロバイダー マニフェストを取得または設定します。</summary>
      <returns>プロバイダー マニフェスト。</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>SQL ステートメントに変換された移行操作を表します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>データベース プロバイダーのバッチ ターミネータを取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
      <returns>データベース プロバイダーのバッチ ターミネータ。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>この移行操作を実行するために実行される SQL を取得または設定します。Entity Framework Migrations API は、信頼されていないソース (アプリケーションのエンド ユーザーなど) によって提供された入力を受け付けるように設計されていません。このようなソースから入力を受け取った場合は、SQL インジェクション攻撃などの防御のために、API に渡す前に入力を検証する必要があります。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>移行プロセスをトランザクション化するために使用されるトランザクション スコープ外でこのステートメントを実行するかどうかを示す値を取得または設定します。true に設定すると、移行プロセスが失敗しても、この操作はロールバックされません。</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>
        <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" />と同じですが、部分信頼で動作し、生成されたインデント文字列の明示的キャッシュを追加します。また、次行を適切にインデントするために、\r\n または \n だけを書き込み行として含んだ文字列の書き込みを認識します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>指定したテキスト ライターと既定のタブ文字列を使用して、IndentedTextWriter クラスの新しいインスタンスを初期化します。このコンストラクターに渡されるライターでは <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> プロパティで指定された <see cref="T:System.Globalization.CultureInfo" /> を使用する必要があることに注意してください。</summary>
      <param name="writer">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>指定したテキスト ライターとタブ文字列を使用して、IndentedTextWriter クラスの新しいインスタンスを初期化します。このコンストラクターに渡されるライターでは <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" /> プロパティで指定された <see cref="T:System.Globalization.CultureInfo" /> を使用する必要があることに注意してください。</summary>
      <param name="writer">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
      <param name="tabString">インデント幅として使用するタブ文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>書き込まれているドキュメントを閉じます。</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>基になる TextWriter によって使用されるカルチャを指定します。この静的プロパティは読み取り専用です。<see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> のコンストラクターの 1 つに渡されるライターでは、この同じカルチャを使用する必要があることに注意してください。カルチャは <see cref="P:System.Globalization.CultureInfo.InvariantCulture" /> です。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>改行の現在のインデント レベルを表す文字列を構築します。</summary>
      <returns>空の文字列。または、指定されたタブ文字列に相当するインデント レベルを含んだ文字列。</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>既定のタブ文字列を指定します。このフィールドは定数です。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>使用するテキスト ライターのエンコーディングを取得します。</summary>
      <returns>使用するテキスト ライターのエンコーディングを示す <see cref="T:System.Text.Encoding" />。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>ストリームをフラッシュします。</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>インデント幅として適用する空白文字の数を取得または設定します。</summary>
      <returns>インデント幅として使用する空白文字の数。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>使用する <see cref="T:System.IO.TextWriter" /> を取得します。</summary>
      <returns>使用する <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>使用する改行文字を取得または設定します。</summary>
      <returns>使用する改行文字。</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>
        <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> プロパティに従って、各インデント レベルに対してタブ文字列を 1 回出力します。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>Boolean 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む Boolean 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>文字をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む文字。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>文字配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">書き込む文字配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列をテキスト ストリームに書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">バッファー内の開始インデックス。</param>
      <param name="count">書き込む文字数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>Double 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む Double 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>整数のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>8 バイトの整数のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む 8 バイトの整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>オブジェクトのテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>Single 値のテキスト形式をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む Single 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>指定した文字列をテキスト ストリームに書き込みます。</summary>
      <param name="value">書き込む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込む最初のオブジェクト。</param>
      <param name="arg1">書式設定された文字列に書き込む 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg">出力する引数配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>行終端記号を書き込みます。</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Boolean 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む Boolean 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>文字をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む文字。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>文字配列をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="buffer">書き込む文字配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>文字の部分配列をテキスト ストリームに書き込み、続けて行終端記号書き込みます。</summary>
      <param name="buffer">データの書き込み元の文字配列。</param>
      <param name="index">バッファー内の開始インデックス。</param>
      <param name="count">書き込む文字数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Double 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む Double 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>整数のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>8 バイト整数のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む 8 バイトの整数。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>オブジェクトのテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Single 値のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む Single 値。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>指定した文字列をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">書き込む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込むオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg0">書式設定された文字列に書き込む最初のオブジェクト。</param>
      <param name="arg1">書式設定された文字列に書き込む 2 番目のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>指定されているのと同じセマンティクスを使用して、書式設定された文字列を書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="format">使用する書式設定文字列。</param>
      <param name="arg">出力する引数配列。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>UInt32 のテキスト形式をテキスト ストリームに書き込み、続けて行終端記号を書き込みます。</summary>
      <param name="value">出力する UInt32。</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>タブが適用されていない行に、指定した文字列を書き込みます。</summary>
      <param name="value">書き込む文字列。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>モデル内の複合型に対して構成を実行できます。ComplexTypeConfiguration は <see cref="T:System.Data.Entity.DbModelBuilder" /> の ComplexType メソッドを使用して取得できます。また、ComplexTypeConfiguration から派生したカスタム型は <see cref="T:System.Data.Entity.DbModelBuilder" /> の Configurations プロパティを使用して登録できます。</summary>
      <typeparam name="TComplexType">構成する複合型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>ComplexTypeConfiguration の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">指定したオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>特定の型のハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>モデルからプロパティを除外して、データベースにマップされないようにします。</summary>
      <returns>複数呼び出しを連結できるようにする同じ ComplexTypeConfiguration インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">無視するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>モデル内のエンティティ型に対して構成を実行できます。EntityTypeConfiguration は <see cref="T:System.Data.Entity.DbModelBuilder" /> の Entity メソッドを使用して取得できます。また、EntityTypeConfiguration から派生したカスタム型は <see cref="T:System.Data.Entity.DbModelBuilder" /> の Configurations プロパティを使用して登録できます。</summary>
      <typeparam name="TEntityType">構成対象のエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>EntityTypeConfiguration の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>指定した構成モデルが現在の構成モデルと同じかどうかを返します。</summary>
      <returns>指定した構成モデルが現在の構成モデルと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するモデル。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>指定した構成モデルのハッシュ関数を返します。</summary>
      <returns>指定したモデル ビルダーのハッシュ関数。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>現在のモデル構成の型を取得します。</summary>
      <returns>現在のモデル構成の型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>このエンティティ型に使用するエンティティ セット名を構成します。エンティティ セット名は、各セットの基本型に対してのみ構成できます。</summary>
      <returns>複数の呼び出しを連結するための同じ EntityTypeConfiguration インスタンス。</returns>
      <param name="entitySetName">エンティティ セットの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティ型の主キー プロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ EntityTypeConfiguration インスタンス。</returns>
      <param name="keyExpression">主キーとして使用するプロパティを表すラムダ式。C#:t =&amp;gt; t.Id VB.Net:Function(t) t.Id 主キーが複数のプロパティで構成されている場合、それらのプロパティを含む匿名型を指定します。C#:t =&amp;gt; new { t.Id1, t.Id2 } VB.Net:Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">キーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>このエンティティ型から多リレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">リレーションシップのもう一方の端のエンティティの型です。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティ型から省略可能リレーションシップを構成します。エンティティ型のインスタンスは、このリレーションシップを指定しなくてもデータベースに保存できます。データベースの外部キーは Null 許容になります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">リレーションシップのもう一方の端のエンティティの型です。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティ型から必須リレーションシップを構成します。エンティティ型のインスタンスは、このリレーションシップを指定しないとデータベースに保存できません。データベースの外部キーは Null 非許容になります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">リレーションシップのもう一方の端のエンティティの型です。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>このエンティティがマップされるテーブルのモデル内に注釈を設定します。注釈値は後で移行の作成時などテーブルの処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>モデルからプロパティを除外して、データベースにマップされないようにします。</summary>
      <returns>複数の呼び出しを連結するための同じ EntityTypeConfiguration インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">無視するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>派生エンティティ型をデータベース スキーマにマップする方法に関する詳細構成を可能にします。マップへの呼び出しは追加的なもので、後続の呼び出しがマップを介して既に実行された構成をオーバーライドすることはありません。</summary>
      <returns>複数の呼び出しを連結するための同じ EntityTypeConfiguration インスタンス。</returns>
      <param name="derivedTypeMapConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> に対して構成を実行するアクション。</param>
      <typeparam name="TDerived">構成する派生エンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>このエンティティ型をデータベース スキーマにマップする方法に関する詳細構成を可能にします。既定では、このエンティティ型から派生したすべての型にすべての構成が適用されます。派生型は、派生型を構成するマップのオーバーロードを使用するか、派生型の EntityTypeConfiguration を使用して構成できます。エンティティのプロパティを複数のテーブル間で分割するには、複数のマップ呼び出しを使用します。マップへの呼び出しは追加的なもので、後続の呼び出しがマップを介して既に実行された構成をオーバーライドすることはありません。</summary>
      <returns>複数の呼び出しを連結するための同じ EntityTypeConfiguration インスタンス。</returns>
      <param name="entityMappingConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>この型を構成して、挿入、更新、削除にストアド プロシージャを使用します。プロシージャおよびパラメーター名の既定の規約が使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>この型を構成して、挿入、更新、削除にストアド プロシージャを使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">プロシージャおよびパラメーター名の既定の規約をオーバーライドする構成。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>モデル構成の文字列表記を返します。</summary>
      <returns>モデル ビルダーの文字列形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ EntityTypeConfiguration インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ EntityTypeConfiguration インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのデータベース スキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>モデルの作成時、無効なモデルが生成されたときに <see cref="T:System.Data.Entity.DbModelBuilder" /> によってスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>ModelValidationException の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>シリアル化情報とストリーム コンテキストを使用して <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化情報。</param>
      <param name="context">ストリーム コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>ModelValidationException の新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>ModelValidationException の新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>リレーションシップの構成を実行するための基本クラス。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>リレーションシップの変更に使用されるストアド プロシージャに対して構成を実行できるようにします。</summary>
      <typeparam name="TEntityType">リレーションシップの構成元のエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">プロパティの型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>エンティティ型または複合型の <see cref="T:System.byte[]" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>プロパティの保存に使用されるデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">データベースでプロパティの値を生成するために使用するパターン。"null" を設定すると、既定のオプションが使用されます。プロパティの型に応じて "None"、"Identity"、または "Computed" になります。このモデルのセマンティクスであり (主キーが別々に処理されるなど)、その一連の規約が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="value">プロパティの最大長。null に設定すると、最大長の制限がプロパティから削除されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
      <param name="concurrencyToken">プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>プロパティを固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>データベース プロバイダーでサポートされる最大長を許容するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。既定では、<see cref="T:System.byte[]" /> プロパティは省略可能です。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>プロパティをデータベースの行バージョンとして構成します。実際のデータ型は使用されているデータベース プロバイダーによって異なります。プロパティを行バージョンとして設定すると、そのプロパティは自動的にオプティミスティック同時実行トークンとして構成されます。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>プロパティを可変長として構成します。既定では、<see cref="T:System.byte[]" /> プロパティは可変長です。</summary>
      <returns>複数の呼び出しを連結するための同じ BinaryPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>連鎖削除機能をサポートするリレーションシップを構成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>リレーションシップで連鎖削除が有効になるように構成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>リレーションシップで連鎖削除が有効かどうかを構成します。</summary>
      <param name="value">連鎖削除が有効かどうかを示す値。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>エンティティおよび複合型の派生構成クラスを <see cref="T:System.Data.Entity.DbModelBuilder" /> に登録するために使用します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> を <see cref="T:System.Data.Entity.DbModelBuilder" /> に追加します。<see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> はモデルの型ごとに 1 つだけ追加できます。</summary>
      <returns>複数の呼び出しを連結するための同じ ConfigurationRegistrar インスタンス。</returns>
      <param name="complexTypeConfiguration">追加する複合型の構成。</param>
      <typeparam name="TComplexType">構成対象の複合型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> を <see cref="T:System.Data.Entity.DbModelBuilder" /> に追加します。<see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> はモデルの型ごとに 1 つだけ追加できます。</summary>
      <returns>複数の呼び出しを連結するための同じ ConfigurationRegistrar インスタンス。</returns>
      <param name="entityTypeConfiguration">追加するエンティティ型の構成。</param>
      <typeparam name="TEntityType">構成対象のエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>指定したアセンブリの <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> または <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> から継承する検出するすべての型を検出し、検出した各型のインスタンスをこのレジストラーに追加します。</summary>
      <returns>複数の呼び出しを連結するための同じ ConfigurationRegistrar インスタンス。</returns>
      <param name="assembly">追加するモデル構成を含むアセンブリ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>データベース内のエンティティの削除に使用されるストアド プロシージャを構成する規約を作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>このインスタンスが特定のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>このインスタンスが特定のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode">
      <summary>このインスタンスに関連付けられているハッシュ コードを取得します。</summary>
      <returns>このインスタンスに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType">
      <summary>このインスタンスの基になる型を取得します。</summary>
      <returns>このインスタンスの基になる型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
      <param name="schemaName">スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyInfo">パラメーターを構成するプロパティ。</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyName">パラメーターを構成するプロパティの名前。</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>このストアド プロシージャの影響を受ける行を返す出力パラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>データベース内のエンティティの挿入に使用されるストアド プロシージャを構成する規約を作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを取得します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType">
      <summary>構成に関連付けられている型を取得します。</summary>
      <returns>構成に関連付けられている型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
      <param name="schemaName">スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyInfo">パラメーターを構成するプロパティ。</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyName">パラメーターを構成するプロパティの名前。</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyInfo">結果を構成するプロパティ。</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyName">結果を構成するプロパティの名前。</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString">
      <summary>このインスタンスの文字列表現を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>データベース内のエンティティの変更に使用されるストアド プロシージャを構成する規約を表します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>データベース内のエンティティの変更に使用されるストアド プロシージャを構成する規約を作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>エンティティの削除に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)">
      <summary>この構成が特定のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>この構成が特定のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode">
      <summary>この構成に関連付けられているハッシュ コードを取得します。</summary>
      <returns>この構成に関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>エンティティの挿入に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" /> クラスの文字列形式を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" /> クラスの文字列形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>エンティティの更新に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>エンティティ型または複合型のプリミティブ プロパティを表します。</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>このプロパティの <see cref="T:System.Reflection.PropertyInfo" /> を取得します。</summary>
      <returns>このプロパティの <see cref="T:System.Reflection.PropertyInfo" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>このインスタンスがもう一方のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>このインスタンスがもう一方のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>プロパティの保存に使用されるデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="databaseGeneratedOption">データベースでプロパティの値を生成するために使用するパターン。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="maxLength">プロパティの最大長。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>ストアド プロシージャでこのプロパティに対して使用されるパラメーターの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>
        <see cref="T:System.DateTime" /> プロパティの有効桁数を構成します。データベース プロバイダーが列のデータ型の有効桁数をサポートしていない場合、この値は無視されます。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="value">プロパティの有効桁数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>
        <see cref="T:System.Decimal" /> プロパティの有効桁数と小数点以下桁数を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="precision">プロパティの有効桁数。</param>
      <param name="scale">プロパティの小数点以下桁数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="concurrencyToken">プロパティが同時実行トークンかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>プロパティを固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>このプロパティを、エンティティ型の主キーの一部として構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>データベース プロバイダーでサポートされる最大長を許容するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>プロパティをデータベースの行バージョンとして構成します。実際のデータ型は使用されているデータベース プロバイダーによって異なります。プロパティを行バージョンとして設定すると、そのプロパティは自動的にオプティミスティック同時実行トークンとして構成されます。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>Unicode 文字列コンテンツをサポートするようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>Unicode 文字列コンテンツをプロパティでサポートするかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
      <param name="unicode">Unicode 文字列コンテンツをプロパティでサポートするかどうかを示す値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>プロパティを可変長として構成します。既定では、プロパティは可変長です。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> インスタンスで使用される規約をカスタマイズできます。既定の規約は System.Data.Entity.ModelConfiguration.Conventions の名前空間で検索できます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の規約を有効にします。</summary>
      <typeparam name="TConvention">有効にする規約の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> に対して 1 つ以上の規約を有効にします。</summary>
      <param name="conventions">有効にする規約。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の規約を有効にします。この規約は、指定した規約の後に実行されます。</summary>
      <param name="newConvention">有効にする規約。</param>
      <typeparam name="TExistingConvention">有効にした規約が、この後に実行される規約の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の構成規約を有効にします。この規約は、指定した規約の前に実行されます。</summary>
      <param name="newConvention">有効にする規約。</param>
      <typeparam name="TExistingConvention">有効にした規約が、この前に実行される規約の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddFromAssembly(System.Reflection.Assembly)">
      <summary>指定されたアセンブリのすべての規約を発見し、それらを <see cref="T:System.Data.Entity.DbModelBuilder" /> に追加します。</summary>
      <param name="assembly">追加する規約を含むアセンブリ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> の規約を無効にします。削除可能な既定の規約は、System.Data.Entity.ModelConfiguration.Conventions の名前空間で検索できます。</summary>
      <typeparam name="TConvention">無効にする規約の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> に対して 1 つ以上の規約を無効にします。</summary>
      <param name="conventions">無効にする規約。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>モデル内のエンティティ型に対して構成を実行できます。この構成機能は簡易規約を使用して利用できます。</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>このエンティティ型の <see cref="T:System.Type" /> を取得します。</summary>
      <returns>このエンティティ型の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>このエンティティ型に使用するエンティティ セット名を構成します。エンティティ セット名は、各セットの基本型に対してのみ構成できます。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="entitySetName">エンティティ セットの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>このエンティティ型の主キー プロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="keyProperties">主キーとして使用されるプロパティ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>このエンティティ型の主キー プロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="propertyNames">主キーとして使用されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>このエンティティ型の主キー プロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="propertyInfo">主キーとして使用されるプロパティ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>このエンティティ型の主キー プロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="propertyName">主キーとして使用されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>このエンティティがマップされるテーブルのモデル内に注釈を設定します。注釈値は後で移行の作成時などテーブルの処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>モデルからこのエンティティ型を除外して、その型がデータベースにマップされないようにします。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>モデルからプロパティを除外して、データベースにマップされないようにします。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="propertyInfo">構成するプロパティ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>モデルからプロパティを除外して、データベースにマップされないようにします。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="propertyName">構成するプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>このエンティティ型を複合型に変更します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>この型を構成して、挿入、更新、削除にストアド プロシージャを使用します。プロシージャおよびパラメーター名の既定の規約が使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>この型を構成して、挿入、更新、削除にストアド プロシージャを使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProceduresConfigurationAction">プロシージャおよびパラメーター名の既定の規約をオーバーライドする構成。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>この型に対して定義されるプロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyInfo">構成されるプロパティ。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>この型に対して定義されるプロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyName">構成されるプロパティの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
      <summary>このインスタンスの文字列表現を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのデータベース スキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>モデル内のエンティティ型に対して構成を実行できます。この構成機能は簡易規約を使用して利用できます。</summary>
      <typeparam name="T">エンティティ型によって継承される型。</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>このエンティティ型の <see cref="T:System.Type" /> を取得します。</summary>
      <returns>このエンティティ型の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のインスタンスと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のインスタンスと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを取得します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>このエンティティ型に使用するエンティティ セット名を構成します。エンティティ セット名は、各セットの基本型に対してのみ構成できます。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> インスタンス。</returns>
      <param name="entitySetName">エンティティ セットの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このエンティティ型の主キー プロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> インスタンス。</returns>
      <param name="keyExpression">主キーとして使用するプロパティを表すラムダ式。C#:t =&amp;gt; t.Id VB.Net:Function(t) t.Id 主キーが複数のプロパティで構成されている場合、それらのプロパティを含む匿名型を指定します。C#:t =&amp;gt; new { t.Id1, t.Id2 } VB.Net:Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">キーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>このエンティティがマップされるテーブルのモデル内に注釈を設定します。注釈値は後で移行の作成時などテーブルの処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>モデルからこのエンティティ型を除外して、その型がデータベースにマップされないようにします。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>モデルからプロパティを除外して、データベースにマップされないようにします。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">無視するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>このエンティティ型を複合型に変更します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>この型を構成して、挿入、更新、削除にストアド プロシージャを使用します。プロシージャおよびパラメーター名の既定の規約が使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>この型を構成して、挿入、更新、削除にストアド プロシージャを使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProceduresConfigurationAction">プロシージャおよびパラメーター名の既定の規約をオーバーライドする構成。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>この型に対して定義されるプロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">構成されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
      <summary>現在のインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>このエンティティ型のマップ先となるテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのデータベース スキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>データベース内のエンティティの更新に使用されるストアド プロシージャを構成する規約を作成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトと等しいかどうかを判定します。</summary>
      <returns>このインスタンスが、指定したオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType">
      <summary>現在のインスタンスに関連付けられている型を返します。</summary>
      <returns>現在のインスタンスに関連付けられている型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
      <param name="schemaName">スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyInfo">パラメーターを構成するプロパティ。</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyInfo">パラメーターを構成するプロパティ。</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyName">パラメーターを構成するプロパティの名前。</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyName">パラメーターを構成するプロパティの名前。</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyInfo">結果を構成するプロパティ。</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyName">結果を構成するプロパティの名前。</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>このストアド プロシージャの影響を受ける行を返す出力パラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString">
      <summary>このインスタンスの文字列表現を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>エンティティ型または複合型の <see cref="T:System.DateTime" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>プロパティの保存に使用されるデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">データベースでプロパティの値を生成するために使用するパターン。"null" を設定すると、既定のオプションが使用されます。プロパティの型に応じて "None"、"Identity"、または "Computed" になります。このモデルのセマンティクスであり (主キーが別々に処理されるなど)、その一連の規約が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>プロパティの有効桁数を構成します。データベース プロバイダーが列のデータ型の有効桁数をサポートしていない場合、この値は無視されます。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="value">プロパティの有効桁数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
      <param name="concurrencyToken">プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。既定では、<see cref="T:System.DateTime" /> プロパティは必須です。</summary>
      <returns>複数の呼び出しを連結するための同じ DateTimePropertyConfiguration インスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>エンティティ型または複合型の <see cref="T:System.decimal" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>プロパティの保存に使用されるデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">データベースでプロパティの値を生成するために使用するパターン。"null" を設定すると、既定のオプションが使用されます。プロパティの型に応じて "None"、"Identity"、または "Computed" になります。このモデルのセマンティクスであり (主キーが別々に処理されるなど)、その一連の規約が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>プロパティの有効桁数と小数点以下桁数を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="precision">プロパティの有効桁数。</param>
      <param name="scale">プロパティの小数点以下桁数。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
      <param name="concurrencyToken">プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。既定では、<see cref="T:System.decimal" /> プロパティは必須です。</summary>
      <returns>複数の呼び出しを連結するための同じ DecimalPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>エンティティの削除に使用されるストアド プロシージャに対して構成を実行できるようにします。</summary>
      <typeparam name="TEntityType">ストアド プロシージャを使用して削除できるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを取得します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
      <param name="schemaName">スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>外部キー プロパティがクラスに含まれていないリレーションシップのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">構成を実行するラムダ式。</param>
      <typeparam name="TPrincipalEntityType">リレーションシップのプリンシパル エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>外部キー プロパティがクラスに含まれていないリレーションシップのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">構成を実行するラムダ式。</param>
      <typeparam name="TPrincipalEntityType">リレーションシップのプリンシパル エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>このストアド プロシージャの影響を受ける行を返す出力パラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString">
      <summary>現在のインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>オブジェクト モデルで公開される外部キー プロパティをサポートするリレーションシップを構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
      <typeparam name="TDependentEntityType">依存エンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>オブジェクト モデルで公開される外部キー プロパティを使用するリレーションシップを構成します。外部キー プロパティがオブジェクト モデルで公開されない場合は、Map メソッドを使用します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="foreignKeyExpression">外部キーとして使用するプロパティを表すラムダ式。外部キーが複数のプロパティで構成される場合は、それらのプロパティを含む匿名型を指定します。複数の外部キー プロパティを使用する場合、プロパティは、プリンシパル エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
      <typeparam name="TKey">キーの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>エンティティ型またはエンティティ型のプロパティ サブセットに対応するテーブルと列のマッピングを構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
      <typeparam name="TEntityType">マップするエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コードを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>このエンティティがマップされるテーブルのモデル内に注釈を設定します。注釈値は後で移行の作成時などテーブルの処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>基本データ型から継承されたすべてのプロパティを再マップします。別のテーブルにマップされるように派生型を構成すると、非継承プロパティだけでなく、すべてのプロパティがそのテーブルに含められます。これは TPC (table-per-concrete type) マッピングと呼ばれます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このマッピング フラグメントに含まれるプロパティを構成します。このメソッドを呼び出さない場合、マッピング フラグメントにまだ含まれていないすべてのプロパティが構成されます。</summary>
      <param name="propertiesExpression">マップされるプロパティを含む匿名型に対するラムダ式。C#:t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net:Function(t) New With { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">マップされるプロパティを含む匿名型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.byte[]" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:DbGeography" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:DbGeometry" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.DateTime" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.DateTimeOffset" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.decimal" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.DateTime?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.DateTimeOffset?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.decimal?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.TimeSpan?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.struct?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">構成されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.string" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.TimeSpan" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>このマッピング フラグメントに含まれる <see cref="T:System.struct" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">構成されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>継承階層内の型を区別するための識別子条件を構成します。</summary>
      <returns>識別子条件をさらに構成するための構成オブジェクト。</returns>
      <param name="property">型の区別に使用されるプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="TProperty">型の区別に使用されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>継承階層内で型を区別するための識別子列を構成します。</summary>
      <returns>識別子列と値をさらに構成するための構成オブジェクト。</returns>
      <param name="discriminator">識別子列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>マップ先のテーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>マップ先のテーブルの名前とスキーマを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのスキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>オブジェクト モデルで外部キー プロパティを公開しないリレーションシップのテーブルと列のマッピングを構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">比較相手の <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />。これと現在のオブジェクトを比較することになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
      <summary>
        <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])" /> を使用して構成されたデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ ForeignKeyAssociationMappingConfiguration インスタンス。</returns>
      <param name="keyColumnName">HasKey メソッドを使用して構成された列の名前。</param>
      <param name="annotationName">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>外部キーの列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ ForeignKeyAssociationMappingConfiguration インスタンス。</returns>
      <param name="keyColumnNames">外部キー列の名前。複数の外部キー プロパティを使用する場合、プロパティは、ターゲット エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>外部キー列を配置するテーブル名を構成します。指定するテーブルはエンティティ型に対して既にマップされている必要があります。外部キーを独立したテーブルに配置するには、<see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> の Map メソッドを使用し、エンティティ分割を実行して主キー プロパティだけを含むテーブルを作成します。その後、このメソッドを使用して外部キーをテーブルに追加できます。</summary>
      <returns>複数の呼び出しを連結するための同じ ForeignKeyAssociationMappingConfiguration インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>外部キー列を配置するテーブルの名前とスキーマを構成します。指定するテーブルはエンティティ型に対して既にマップされている必要があります。外部キーを独立したテーブルに配置するには、<see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> の Map メソッドを使用し、エンティティ分割を実行して主キー プロパティだけを含むテーブルを作成します。その後、このメソッドを使用して外部キーをテーブルに追加できます。</summary>
      <returns>複数の呼び出しを連結するための同じ ForeignKeyAssociationMappingConfiguration インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのスキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>オブジェクト モデルで公開されない外部キー プロパティのみをサポートするリレーションシップを構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>オブジェクト モデルで公開されない外部キー プロパティを使用するリレーションシップを構成します。列とテーブルは、構成アクションを指定してカスタマイズできます。空の構成アクションを指定すると、規約によって列名が生成されます。外部キー プロパティがオブジェクト モデルで公開される場合は、HasForeignKey メソッドを使用します。一部のリレーションシップは、オブジェクト モデルでの外部キー プロパティの公開をサポートしていません。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="configurationAction">外部キーの列とテーブルを構成するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>エンティティの挿入に使用されるストアド プロシージャに対して実行できる構成を表します。</summary>
      <typeparam name="TEntityType">ストアド プロシージャを使用して挿入できるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>このインスタンスが特定のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>このインスタンスが特定のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType">
      <summary>このインスタンスの型を取得します。</summary>
      <returns>このインスタンスの型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
      <param name="schemaName">スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>外部キー プロパティがクラスに含まれていないリレーションシップのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">構成を実行するラムダ式。</param>
      <typeparam name="TPrincipalEntityType">リレーションシップのプリンシパル エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>外部キー プロパティがクラスに含まれていないリレーションシップのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">構成を実行するラムダ式。</param>
      <typeparam name="TPrincipalEntityType">リレーションシップのプリンシパル エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>エンティティ型または複合型の、length ファセットを持つ列を構成するために使用します。この構成機能は Code First Fluent API で公開されます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>指定した最大長を使用するように列を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> インスタンス。</returns>
      <param name="value">列の最大長。値を null に設定すると、列から最大長の制限が削除され、データベース列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>列を固定長として構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>データベース プロバイダーでサポートされる最大長を許容するように列を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>列を可変長として構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>エンティティ型または複合型の、length ファセットを持つプロパティを構成するために使用します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ LengthPropertyConfiguration インスタンス。</returns>
      <param name="value">プロパティの最大長。null に設定すると、プロパティから最大長の制限が削除され、データベース列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>プロパティを固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結するための同じ LengthPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>データベース プロバイダーでサポートされる最大長を許容するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ LengthPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>プロパティを可変長として構成します。既定では、プロパティは可変長です。</summary>
      <returns>複数の呼び出しを連結するための同じ LengthPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>エンティティ型から "多" リレーションシップを構成します。</summary>
      <typeparam name="TEntityType">リレーションシップの起点であるエンティティ型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのターゲットであるエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに多対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して多対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに "多対省略可能" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して "多対省略可能" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに "多対必須" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して "多対必須" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>多対多のリレーションシップのテーブルと列のマッピングを構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="other">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>結合テーブルのモデル内に注釈を設定します。注釈値は後で移行の作成時などテーブルの処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>左外部キーの列の名前を構成します。左外部キーは、HasMany の呼び出しで指定されるナビゲーション プロパティの親エンティティを指します。</summary>
      <returns>複数の呼び出しを連結するための同じ ManyToManyAssociationMappingConfiguration インスタンス。</returns>
      <param name="keyColumnNames">外部キー列の名前。複数の外部キー プロパティを使用する場合、プロパティは、ターゲット エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>右外部キーの列の名前を構成します。右外部キーは、WithMany の呼び出しで指定されるナビゲーション プロパティの親エンティティを指します。</summary>
      <returns>複数の呼び出しを連結するための同じ ManyToManyAssociationMappingConfiguration インスタンス。</returns>
      <param name="keyColumnNames">外部キー列の名前。複数の外部キー プロパティを使用する場合、プロパティは、ターゲット エンティティ型に対して主キー プロパティが構成された順序と同じ順序で指定する必要があります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>リレーションシップの結合テーブル名を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ ManyToManyAssociationMappingConfiguration インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>リレーションシップの結合テーブルの名前とスキーマを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ ManyToManyAssociationMappingConfiguration インスタンス。</returns>
      <param name="tableName">テーブルの名前。</param>
      <param name="schemaName">テーブルのスキーマ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>多対多のリレーションシップの変更に使用されるストアド プロシージャに対して構成を実行できるようにします。</summary>
      <typeparam name="TEntityType">リレーションシップの構成元のエンティティの型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのもう一方の端がターゲットとするエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを取得します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>ストアド プロシージャの名前を設定します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">プロシージャの名前を指定します。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>ストアド プロシージャの名前を設定します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">プロシージャの名前を指定します。</param>
      <param name="schemaName">スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>左キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>左キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>左キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>左キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>右キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>右キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>右キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>右キー値のパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString">
      <summary>現在のインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>多対多のリレーションシップの変更に使用されるストアド プロシージャに対して構成を実行できるようにします。</summary>
      <typeparam name="TEntityType">リレーションシップの構成元のエンティティの型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのもう一方の端がターゲットとするエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>リレーションシップの削除に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを取得します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>リレーションシップの挿入に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString">
      <summary>現在のインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>多対多のリレーションシップを構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
      <typeparam name="TEntityType">HasMany 呼び出しに指定されているナビゲーション プロパティの親エンティティの型。</typeparam>
      <typeparam name="TTargetEntityType">WithMany 呼び出しに指定されているナビゲーション プロパティの親エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>リレーションシップの格納に使用する外部キーの列とテーブルを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> インスタンス。</returns>
      <param name="configurationAction">外部キーの列とテーブルを構成するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>このリレーションシップの変更に使用されるストアド プロシージャを構成します。プロシージャおよびパラメーター名の既定の規約が使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>このリレーションシップの変更に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" /> インスタンス。</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">プロシージャおよびパラメーター名の既定の規約をオーバーライドする構成。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>データベース内のエンティティの変更に使用されるストアド プロシージャの構成を実行します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>エンティティの変更に使用されるストアド プロシージャに対して構成を実行できるようにします。</summary>
      <typeparam name="TEntityType">ストアド プロシージャを使用して変更できるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>エンティティの削除に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)">
      <summary>指定されたオブジェクトとこのインスタンスが等しいかどうかを指定します。</summary>
      <returns>指定されたオブジェクトとこのインスタンスが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>エンティティの挿入に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>エンティティの更新に使用されるストアド プロシージャを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="modificationStoredProcedureConfigurationAction">ストアド プロシージャに対する構成を実行するラムダ式。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>プロパティに割り当てられた値に基づいて継承階層内の型を判別するための条件を構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>プロパティの値を要求するように条件を構成します。このプロパティを格納する列に値が割り当てられていない行は、このエンティティ型の基本型と見なされます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>エンティティ型から省略可能リレーションシップを構成します。</summary>
      <typeparam name="TEntityType">リレーションシップの起点であるエンティティ型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのターゲットであるエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに省略可能対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して省略可能対多となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲット エンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲット エンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して省略可能対省略可能となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに省略可能対必須となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して省略可能対必須となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>エンティティ型のプリミティブ列を構成します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>プロパティの格納に使用するプリミティブ列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>プロパティの格納に使用するプリミティブ列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>プリミティブ列を省略可能として構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>プリミティブ列を必須として構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" /> インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>エンティティ型または複合型のプリミティブ プロパティを構成するためのメソッドを提供します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>このインスタンスが、指定したオブジェクトと等しいかどうかを判定します。</summary>
      <returns>このインスタンスが、指定したオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを返します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>プロパティの保存に使用されるデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">データベースでプロパティの値を生成するために使用するパターン。"null" を設定すると、既定のオプションが使用されます。プロパティの型に応じて "None"、"Identity"、または "Computed" になります。このモデルのセマンティクスであり (主キーが別々に処理されるなど)、その一連の規約が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>ストアド プロシージャでこのプロパティに対して使用されるパラメーターの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
      <param name="concurrencyToken">プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ PrimitivePropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>このインスタンスの文字列表現を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>モデル内のプロパティに基づいて、簡易規約に対して構成を実行できます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>この規約が適用されるプロパティの構成を実行できます。</summary>
      <param name="propertyConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>このインスタンスのハッシュ コードを返します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>構成時に後で使用する値をキャプチャすると同時に、述語に基づいて、この規約の適用先のプロパティをフィルター処理します。</summary>
      <returns>複数の呼び出しを連結するための <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" /> インスタンス。</returns>
      <param name="capturingPredicate">各プロパティの値をキャプチャする関数。値が null の場合、プロパティは除外されます。</param>
      <typeparam name="T">キャプチャした値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>述語に基づいて、この規約を適用するプロパティをフィルター処理します。</summary>
      <returns>複数の呼び出しを連結するための <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" /> インスタンス。</returns>
      <param name="predicate">各プロパティが条件を満たしているかどうかをテストする関数。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>モデル内のエンティティ型のプロパティとキャプチャした値に基づいて、簡易規約に対して構成を実行できます。</summary>
      <typeparam name="T">キャプチャした値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>この規約が適用されるプロパティの構成を実行できます。</summary>
      <param name="propertyConfigurationAction">キャプチャした値を使って、<see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>マッピング フラグメント内のプロパティを構成するために使用します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>プロパティの保存に使用されるデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ PropertyMappingConfiguration インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>マッピング フラグメント内のプロパティの保存に使用されるデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ PropertyMappingConfiguration インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>エンティティ型からの必須リレーションシップを構成します。</summary>
      <typeparam name="TEntityType">リレーションシップの起点であるエンティティ型。</typeparam>
      <typeparam name="TTargetEntityType">リレーションシップのターゲットであるエンティティ型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>指定したオブジェクトが現在のオブジェクトと等しいかどうかを指定します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>現在のオブジェクトに関連付けられているハッシュ コードを取得します。</summary>
      <returns>現在のオブジェクトに関連付けられているハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>現在のオブジェクトの文字列形式を返します。</summary>
      <returns>現在のオブジェクトの文字列形式。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに "必須対多" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して "必須対多" となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに必須対省略可能となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して必須対省略可能となるようにリレーションシップを構成します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲット エンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。リレーションシップのターゲット エンティティ型は、リレーションシップのプリンシパルになります。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用せずに必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>リレーションシップのもう一方の側のナビゲーション プロパティを使用して必須対必須となるようにリレーションシップを構成します。構成されているエンティティ型は、リレーションシップのプリンシパルになります。リレーションシップのターゲット エンティティ型は依存エンティティ型になり、プリンシパルに対する外部キーを格納します。</summary>
      <returns>リレーションシップをさらに構成するために使用できる構成オブジェクト。</returns>
      <param name="navigationPropertyExpression">リレーションシップのもう一方の End のナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>文字列値の格納に使用するデータベース列を構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>現在のインスタンスの型を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>データベース列の順序を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>データベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
      <param name="value">プロパティの最大長。"null" を設定すると、列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>列を固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>データベース プロバイダーでサポートされる最大長を許容するように列を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>列を省略可能として構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>列を必須として構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>Unicode 文字列コンテンツをサポートするように列を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Unicode 文字列コンテンツを列でサポートするかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
      <param name="unicode">Unicode 文字列コンテンツを列でサポートするかどうかを示す値。null を指定すると、Unicode ファセットが列から削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>列を可変長として構成します。既定では、列は可変長です。</summary>
      <returns>複数の呼び出しを連結するための同じ StringColumnConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>エンティティ型または複合型の <see cref="T:System.string" /> プロパティを構成するために使用します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>プロパティの保存に使用されるデータベース列のモデル内に注釈を設定します。注釈値は後で移行の作成時など列の処理時に使用できます。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="name">注釈名。有効な C#/EDM 識別子であることが必要です。</param>
      <param name="value">注釈値。文字列でも、<see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /> でシリアル化できるその他の型でもかまいません。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>プロパティの格納に使用するデータベース列の名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="columnName">列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>プロパティの格納に使用するデータベース列の順序を構成します。このメソッドは、エンティティ型が複合キーを持つ場合のキーの順序を指定する際にも使用します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="columnOrder">この列がデータベース テーブルに出現する順序。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>プロパティの格納に使用するデータベース列のデータ型を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="columnType">データベース プロバイダー固有のデータ型の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>プロパティの値をデータベースで生成する方法を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="databaseGeneratedOption">データベースでプロパティの値を生成するために使用するパターン。"null" を設定すると、既定のオプションが使用されます。プロパティの型に応じて "None"、"Identity"、または "Computed" になります。このモデルのセマンティクスであり (主キーが別々に処理されるなど)、その一連の規約が使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>指定した最大長を使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="value">プロパティの最大長。null に設定すると、プロパティから最大長の制限が削除され、データベース列には既定の長さが使用されます。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>オプティミスティック同時実行トークンとして使用するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>プロパティをオプティミスティック同時実行トークンとして使用するかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="concurrencyToken">プロパティが同時実行トークンかどうかを示す値。null を指定すると、同時実行トークン ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>プロパティを固定長として構成します。HasMaxLength を使用してプロパティの固定の長さを設定します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>データベース プロバイダーでサポートされる最大長を許容するようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>プロパティを省略可能として構成します。このプロパティの格納に使用されるデータベース列は Null 許容になります。既定では、<see cref="T:System.string" /> プロパティは省略可能です。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>プロパティを必須として構成します。このプロパティの格納に使用されるデータベース列は Null 非許容になります。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Unicode 文字列コンテンツをサポートするようにプロパティを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Unicode 文字列コンテンツをプロパティでサポートするかどうかを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
      <param name="unicode">Unicode 文字列コンテンツをプロパティでサポートするかどうかを示す値。null を指定すると、Unicode ファセットがプロパティから削除されます。null を指定した場合、ランタイムの動作は false を指定した場合と同じになります。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>プロパティを可変長として構成します。既定では、<see cref="T:System.string" /> プロパティは可変長です。</summary>
      <returns>複数の呼び出しを連結するための同じ StringPropertyConfiguration インスタンス。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>モデル内の特定の型に対して構成を実行するために使用します。</summary>
      <typeparam name="TStructuralType">構成する型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在のオブジェクトのハッシュ コードを返します。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>この型に対して定義される <see cref="T:System.byte[]" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>この型に対して定義される <see cref="T:DbGeography" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>この型に対して定義される <see cref="T:DbGeometry" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>この型に対して定義される <see cref="T:System.DateTime" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>この型に対して定義される <see cref="T:System.DateTimeOffset" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>この型に対して定義される <see cref="T:System.decimal" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>この型に対して定義される <see cref="T:System.DateTime?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>この型に対して定義される <see cref="T:System.DateTimeOffset?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>この型に対して定義される <see cref="T:System.decimal?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>この型に対して定義される <see cref="T:System.TimeSpan?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>この型に対して定義される <see cref="T:System.struct?" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">構成されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>この型に対して定義される <see cref="T:System.string" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>この型に対して定義される <see cref="T:System.TimeSpan" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>この型に対して定義される <see cref="T:System.struct" /> プロパティを構成します。</summary>
      <returns>プロパティを構成するために使用できる構成オブジェクト。</returns>
      <param name="propertyExpression">構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <typeparam name="T">構成されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>モデル内のエンティティ型に基づいて、簡易規約に対して構成を実行できます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>この規約が適用されるエンティティ型の構成を実行できます。</summary>
      <param name="entityConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
      <summary>指定されたオブジェクトとこのインスタンスが等しいかどうかを指定します。</summary>
      <returns>指定されたオブジェクトとこのインスタンスが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>構成時に後で使用する値をキャプチャすると同時に、述語に基づいて、この規約の適用先のエンティティ型をフィルター処理します。</summary>
      <returns>複数の呼び出しを連結するための <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" /> インスタンス。</returns>
      <param name="capturingPredicate">各エンティティ型の値をキャプチャする関数。値が null の場合、エンティティ型は除外されます。</param>
      <typeparam name="T">キャプチャした値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>述語に基づいて、この規約を適用するエンティティ型をフィルター処理します。</summary>
      <returns>複数の呼び出しを連結するための <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" /> インスタンス。</returns>
      <param name="predicate">各エンティティ型が条件を満たしているかどうかをテストする関数。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>指定した共通型から継承する、モデル内のエンティティ型に基づいて、簡易規約に対して構成を実行できます。</summary>
      <typeparam name="T">この規約が適用されるエンティティ型の共通型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>この規約が適用されるエンティティ型の構成を実行できます。</summary>
      <param name="entityConfigurationAction">
        <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
      <summary>指定されたオブジェクトとこのインスタンスが等しいかどうかを指定します。</summary>
      <returns>指定されたオブジェクトとこのインスタンスが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>構成時に後で使用する値をキャプチャすると同時に、述語に基づいて、この規約の適用先のエンティティ型をフィルター処理します。</summary>
      <returns>複数の呼び出しを連結するための <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" /> インスタンス。</returns>
      <param name="capturingPredicate">各エンティティ型の値をキャプチャする関数。値が null の場合、エンティティ型は除外されます。</param>
      <typeparam name="TValue">キャプチャした値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>述語に基づいて、この規約を適用するエンティティ型をフィルター処理します。</summary>
      <returns>複数の呼び出しを連結するための <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" /> インスタンス。</returns>
      <param name="predicate">各エンティティ型が条件を満たしているかどうかをテストする関数。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>モデル内のエンティティ型とキャプチャした値に基づいて、簡易規約に対して構成を実行できます。</summary>
      <typeparam name="T">キャプチャした値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>この規約が適用されるエンティティ型の構成を実行できます。</summary>
      <param name="entityConfigurationAction">キャプチャした値を使って、<see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>指定したオブジェクトが現在のオブジェクトと等しい場合は true、それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
      <summary>現在のインスタンスのハッシュ コードを取得します。</summary>
      <returns>現在のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
      <summary>現在のインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>現在のインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>指定した共通型から継承する、モデル内のエンティティ型とキャプチャした値に基づいて、簡易規約に対して構成を実行できます。</summary>
      <typeparam name="T">この規約が適用されるエンティティ型の共通型。</typeparam>
      <typeparam name="TValue">キャプチャした値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>この規約が適用されるエンティティ型の構成を実行できます。</summary>
      <param name="entityConfigurationAction">キャプチャした値を使って、<see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> に対して構成を実行するアクション。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
      <summary>指定されたオブジェクトとこのインスタンスが等しいかどうかを指定します。</summary>
      <returns>指定されたオブジェクトとこのインスタンスが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
      <summary>このインスタンスのハッシュ コードを取得します。</summary>
      <returns>このインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
      <summary>このインスタンスの文字列形式を返します。</summary>
      <returns>このインスタンスの文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>エンティティの更新に使用されるストアド プロシージャに対して構成を実行できるようにします。</summary>
      <typeparam name="TEntityType">ストアド プロシージャを使用して更新できるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>指定したオブジェクトが、このインスタンス オブジェクトと等しいかどうかを判定します。</summary>
      <returns>指定したオブジェクトがこのインスタンス オブジェクトと等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">比較対象のオブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>ハッシュ コードを取得します。</summary>
      <returns>ハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType">
      <summary>この構成の型を取得します。</summary>
      <returns>この構成の型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>ストアド プロシージャの名前を構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="procedureName">ストアド プロシージャ名。</param>
      <param name="schemaName">スキーマの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>外部キー プロパティがクラスに含まれていないリレーションシップのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">構成を実行するラムダ式。</param>
      <typeparam name="TPrincipalEntityType">リレーションシップのプリンシパル エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>外部キー プロパティがクラスに含まれていないリレーションシップのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="navigationPropertyExpression">リレーションシップのナビゲーション プロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">構成を実行するラムダ式。</param>
      <typeparam name="TPrincipalEntityType">リレーションシップのプリンシパル エンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="parameterName">パラメーターの名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>このストアド プロシージャのパラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">パラメーターを構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">パラメーター名の現在値。</param>
      <param name="originalValueParameterName">パラメーター名の元の値。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>このストアド プロシージャの結果の列を構成してプロパティにマップします。データベースによって生成される列に使用されます。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="propertyExpression">結果を構成するプロパティを表すラムダ式。C#:t =&amp;gt; t.MyProperty VB.Net:Function(t) t.MyProperty</param>
      <param name="columnName">結果の列の名前。</param>
      <typeparam name="TProperty">構成するプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>このストアド プロシージャの影響を受ける行を返す出力パラメーターを構成します。</summary>
      <returns>複数の呼び出しを連結するための同じ構成インスタンス。</returns>
      <param name="parameterName">パラメーターの名前。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString">
      <summary>このインスタンスの値をそれと同等の文字列表現に変換します。</summary>
      <returns>このインスタンスの値の文字列表現。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>継承階層内の型を区別するための識別子列を構成します。この構成機能は Code First Fluent API を使用して利用できます (<see cref="T:System.Data.Entity.DbModelBuilder" /> を参照してください)。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>指定したオブジェクトが、現在のオブジェクトと等しいかどうかを判断します。</summary>
      <returns>オブジェクトが等しい場合は true。それ以外の場合は false。</returns>
      <param name="obj">オブジェクト。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>特定の型のハッシュ関数として機能します。</summary>
      <returns>現在の型のハッシュ コード。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>現在のインスタンスの <see cref="T:System.Type" /> を取得します。</summary>
      <returns>現在のインスタンスの正確なランタイム型。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>継承階層内の他の型から構成対象のエンティティ型を識別するための識別子の値を構成します。</summary>
      <returns>識別子の値の格納に使用する列を構成するための構成オブジェクト。</returns>
      <param name="value">エンティティ型の識別に使用する値。</param>
      <typeparam name="T">識別子の値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>継承階層内の他の型から構成対象のエンティティ型を識別するための識別子の値を構成します。</summary>
      <returns>識別子の値の格納に使用する列を構成するための構成オブジェクト。</returns>
      <param name="value">エンティティ型の識別に使用する値。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>継承階層内の他の型から構成対象のエンティティ型を識別するための識別子の値を構成します。</summary>
      <returns>識別子の値の格納に使用する列を構成するための構成オブジェクト。</returns>
      <param name="value">エンティティ型の識別に使用する値。</param>
      <typeparam name="T">識別子の値の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>現在のオブジェクトを表す文字列を返します。</summary>
      <returns>現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>関連する型の間にナビゲーション プロパティが 1 組しか存在しない場合に相互に逆になるナビゲーション プロパティを検出する規約を提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
      <summary>.NET プロパティの属性を読み取り、それらの属性に基づいて列の注釈を生成する Code First 規約のための汎用クラス。</summary>
      <typeparam name="TAttribute">検出する属性の型。</typeparam>
      <typeparam name="TAnnotation">作成される注釈の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
      <summary>指定した名前とファクトリ デリゲートを使用して列の注釈を作成する規約を生成します。</summary>
      <param name="annotationName">作成する注釈の名前を入力します。</param>
      <param name="annotationFactory">各列の注釈を作成するためのファクトリ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
      <summary>.NET 型の属性を読み取り、それらの属性に基づいてテーブルの注釈を生成する Code First 規約のための汎用クラス。</summary>
      <typeparam name="TAttribute">検出する属性の型。</typeparam>
      <typeparam name="TAnnotation">作成される注釈の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
      <summary>指定した名前とファクトリ デリゲートを使用してテーブルの注釈を作成する規約を生成します。</summary>
      <param name="annotationName">作成する注釈の名前を入力します。</param>
      <param name="annotationFactory">各テーブルの注釈を作成するためのファクトリ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)">
      <summary>指定した構成に規約を適用します。</summary>
      <param name="configuration">構成。</param>
      <param name="attribute">列の属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> API または <see cref="T:System.Data.Entity.DbModelBuilder" /> API を使用して指定された列の順序を適用する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>マッピング モデル内の指定された項目に構成を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">マッピング モデル。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>列に対して指定されている順序の構成を検証します。この基本実装では何も行いません。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="tableName">テーブルの定義。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> API または <see cref="T:System.Data.Entity.DbModelBuilder" /> API を使用して指定された列の順序を適用する規約。構成されている列の順序が重複していることが検出された場合、この規約がスローされます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>列に対して指定されている順序の構成を検証して、2 つの列に対して同じ序数が指定されていないことを確認します。</summary>
      <param name="table">列が属するテーブルの名前。</param>
      <param name="tableName">テーブルの定義。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>モデル内の型で検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)">
      <summary>指定した構成および属性を使用して規約を適用します。</summary>
      <param name="configuration">構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>主キー、マップされた基本型、およびナビゲーション プロパティがない場合に型を複合型として構成する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>マッピング モデル内の指定された項目に構成を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">マッピング モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)">
      <summary>この規約をプロパティに適用します。</summary>
      <param name="configuration">属性のあるプロパティの構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>構成をオーバーライドしない規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>派生クラスでは、既定のコンストラクターを使用して、モデル構成を変更する一連の規則を適用できます。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>モデル内のすべてのプロパティに適用される簡易規約の構成を開始します。</summary>
      <returns>規約の構成オブジェクト。</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>モデル内の指定した型のすべてのプリミティブ プロパティに適用される簡易規約の構成を開始します。</summary>
      <returns>規約の構成オブジェクト。</returns>
      <typeparam name="T">規約が適用されるプロパティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>モデル内のマップされた型のうち、指定した型から派生した型または指定した型を実装する型すべてに適用される、簡易規約の構成を開始します。</summary>
      <returns>規約の構成オブジェクト。</returns>
      <typeparam name="T">この規約が適用されるエンティティの型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>モデル内のすべてのマップされたプロパティに適用される簡易規約の構成を開始します。</summary>
      <returns>規約の構成オブジェクト。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)">
      <summary>指定した構成を持つ属性に規約を適用します。</summary>
      <param name="configuration">構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>10 進数型のプロパティの有効桁数を 18 に、小数点以下桁数を 2 に設定する規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>既定の値を使用して、<see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>有効桁数と小数点以下桁数を指定して、<see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> の新しいインスタンスを初期化します。</summary>
      <param name="precision">Precision</param>
      <param name="scale">Scale</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>この規約をプロパティに適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>最初に出現するように主キー プロパティを移動する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>外部キー プロパティの CLR の Null 値許容に基づいて省略可能リレーションシップと必須リレーションシップを区別する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>マッピング モデル内の指定された項目に構成を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">マッピング モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>外部キー プロパティを検出する規約の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>この規約をプロパティに適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>オーバーライドした場合、<paramref name="dependentProperty" /> が外部キーの一部になるときは、true を返します。</summary>
      <returns>dependentProperty が外部キーの一部になる場合は true、それ以外の場合は false。</returns>
      <param name="associationType">構成対象のアソシエーション型。</param>
      <param name="dependentAssociationEnd">依存 End。</param>
      <param name="dependentProperty">依存 End の候補プロパティ。</param>
      <param name="principalEntityType">プリンシパル End エンティティ型。</param>
      <param name="principalKeyProperty">外部キーの候補のターゲットであるプリンシパル End のキー プロパティ。</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>間に複数のアソシエーションが定義されているエンティティ型のペアが規約でサポートされているかどうかを取得します。</summary>
      <returns>間に複数のアソシエーションが定義されているエンティティ型のペアが規約でサポートされる場合は true、それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
      <summary>外部キーのインデックスを導入するための規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>この規約をプロパティに適用します。</summary>
      <param name="item">項目。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>モデル内のナビゲーション プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">データベース モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>モデル内の外部キー プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)">
      <summary>指定した属性に構成を適用します。</summary>
      <param name="memberInfo">プロパティ情報。</param>
      <param name="configuration">モデル内のエンティティ型に対して実行する構成。</param>
      <param name="attribute">データベース マッピングから除外するプロパティまたはクラス。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>モデルの作成後にモデルの概念セクションに適用される規約。</summary>
      <typeparam name="T">この規約が適用されるメタデータ項目の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>
        <see cref="T:System.Data.Entity.DbModelBuilder" /> インスタンスに対して、追加または削除できる規約を識別します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>主キー プロパティを検出する規約。認識される名前付けパターンは次のとおりです (優先順位の高いもの順)。1.Id' 2。[型名]ID 主キーの検出では、大文字と小文字が区別されません。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> クラスと一致する規約。</summary>
      <returns>一致する <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> クラス。</returns>
      <param name="entityType">エンティティ型。</param>
      <param name="primitiveProperties">プリミティブ プロパティのコレクション。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
      <summary>プロパティの <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> 属性を検出し、モデル内に <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> 列の注釈を生成するための規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
      <summary>規約の新しいインスタンスを作成します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
      <summary>指定した構成を持つ属性に規約を適用します。</summary>
      <param name="memberInfo">メンバー情報。</param>
      <param name="configuration">構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>モデルの作成後にモデルのデータベース セクションに適用される規約。</summary>
      <typeparam name="T">この規約が適用されるメタデータ項目の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>主キー プロパティを検出する規約の基本クラスを表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>オーバーライドした場合、主キーの一部となるプロパティのサブセットを返します。</summary>
      <returns>主キーの一部となるプロパティ。</returns>
      <param name="entityType">エンティティ型。</param>
      <param name="primitiveProperties">エンティティのプリミティブ型。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>多対多のリレーションシップに含まれる両方のテーブルから結合テーブルに連鎖削除を追加する規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>継承プロパティをマップする場合、無効なまたはサポートされないマッピングが作成されないようにする規約</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
      <summary>指定した構成を持つ属性に規約を適用します。</summary>
      <param name="configuration">構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>名前が依存ナビゲーション プロパティ名とプリンシパル型主キー プロパティ名の組み合わせである外部キー プロパティを検出する規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>依存エンティティ モデルのキーを照合します。</summary>
      <returns>
        <see cref="T:System.Boolean" /> を返します。</returns>
      <param name="associationType">アソシエーション型のメタデータ オブジェクト。</param>
      <param name="dependentAssociationEnd">依存アソシエーションの End。</param>
      <param name="dependentProperty">依存プロパティ。</param>
      <param name="principalEntityType">プリンシパル エンティティ型。</param>
      <param name="principalKeyProperty">プリンシパル キー プロパティ。</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>規約が複数のアソシエーションをサポートするかどうかを示す値を取得または設定します。</summary>
      <returns>規約が複数のアソシエーションをサポートする場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>指定した属性に構成を適用します。</summary>
      <param name="memberInfo">プロパティ情報。</param>
      <param name="configuration">モデル内のエンティティ型に対して実行する構成。</param>
      <param name="attribute">データベース マッピングから除外するプロパティまたはクラス。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>モデル内の型で検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>指定した属性に構成を適用します。</summary>
      <param name="configuration">モデル内のエンティティ型に対して実行する構成。</param>
      <param name="attribute">データベース マッピングから除外するプロパティまたはクラス。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>必須リレーションシップに対して連鎖削除を有効にする規約を提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">データベース モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>依存エンティティ型の主キーを一対一のリレーションシップの外部キーとして構成する規約を提供します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">データベース モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>エンティティ セット名をエンティティ型名の複数化バージョンに設定する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
      <summary>この規約をプロパティに適用します。</summary>
      <param name="item">エンティティ セット。</param>
      <param name="model">データベース モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>テーブル名をエンティティ型名の複数化バージョンに設定する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>モデル内の項目にこの規約を適用します。</summary>
      <param name="item">規約を適用する項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>名前がプリンシパル型主キー プロパティ名と一致する外部キー プロパティを検出する規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>規約と関連付けられている依存キー プロパティと一致します。</summary>
      <returns>一致する依存キー プロパティ。</returns>
      <param name="associationType">アソシエーション型。</param>
      <param name="dependentAssociationEnd">依存アソシエーション End。</param>
      <param name="dependentProperty">依存プロパティ。</param>
      <param name="principalEntityType">プリンシパル エンティティ型。</param>
      <param name="principalKeyProperty">プリンシパル キー プロパティ。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>モデル内のプリミティブ プロパティで検出された CLR 属性を処理する規約の基本クラス。</summary>
      <typeparam name="TAttribute">検索対象の属性の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>TAttribute 型の属性を備えるプロパティにこの規約を適用します。</summary>
      <param name="configuration">属性のあるプロパティの構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>モデル内の型のプロパティで検出された CLR 属性を処理する規約の基本クラス。</summary>
      <typeparam name="TAttribute">検索対象の属性の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>TAttribute 型の属性を備えるプロパティにこの規約を適用します。</summary>
      <param name="memberInfo">その属性を備えるプロパティのメンバー情報。</param>
      <param name="configuration">そのプロパティを含むクラスの構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>length ファセットをサポートする型を持つプロパティに対して最大長を設定する規約を表します。既定値は 128 です。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>既定の長さを使用して、<see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>指定した長さを使用して、<see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> の新しいインスタンスを初期化します。</summary>
      <param name="length">プロパティの最大長。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したモデル構成に規約を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">マッピング モデル。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したモデル構成に規約を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">マッピング モデル。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したモデル構成に規約を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">マッピング モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>モデル内のナビゲーション プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> のインスタンスを処理する規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>モデル内のプリミティブ プロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>指定した構成を持つ属性に規約を適用します。</summary>
      <param name="configuration">構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>SqlCe がプロバイダーの場合、型が length ファセットをサポートするプロパティの既定の最大長 4000 を設定する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>既定の長さを使用して、<see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>指定した長さを使用して、<see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> の新しいインスタンスを初期化します。</summary>
      <param name="length">プロパティの既定の最大長。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したプロバイダーに規約を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>指定したプロバイダーに規約を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>整数の主キーを ID として構成する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>マッピング モデル内の指定された項目に構成を適用します。</summary>
      <param name="item">項目。</param>
      <param name="model">マッピング モデル。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>指定した構成および属性を使用して規約を適用します。</summary>
      <param name="configuration">構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>モデル内の型で検出された <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
      <summary>この規約をプロパティに適用します。</summary>
      <param name="configuration">属性のあるプロパティの構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>モデル内のプロパティで検出された <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" /> のインスタンスを処理する規約を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)">
      <summary>この規約をプロパティに適用します。</summary>
      <param name="configuration">属性のあるプロパティの構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>モデル内で検出された CLR 属性を処理する規約の基本クラス。</summary>
      <typeparam name="TAttribute">検索対象の属性の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>TAttribute 型の属性を備えるクラスにこの規約を適用します。</summary>
      <param name="configuration">そのプロパティを含むクラスの構成。</param>
      <param name="attribute">属性。</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>名前がプリンシパル型名とプリンシパル型主キー プロパティ名の組み合わせである外部キー プロパティを検出する規約。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>依存キーのプロパティが現在のキーと一致するかどうかを判断します。</summary>
      <returns>依存キーのプロパティが現在のキーと一致する場合は true。それ以外の場合は false。</returns>
      <param name="associationType">アソシエーション型。</param>
      <param name="dependentAssociationEnd">End の依存アソシエーション。</param>
      <param name="dependentProperty">依存プロパティ。</param>
      <param name="principalEntityType">プリンシパル エンティティ型。</param>
      <param name="principalKeyProperty">プリンシパル キー プロパティ。</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>測地 (丸い地球) 座標系でデータを表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>この DbGeography 値の面積を示す null 許容型の double 値を取得します。この値が面を表していない場合は null が返されます。</summary>
      <returns>この DbGeography 値の領域を示す null 許容の double 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>この DbGeography 値の既知のバイナリ表現を生成します。</summary>
      <returns>この DbGeography 値の既知のバイナリ表現。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>この DbGeography 値の Geography Markup Language (GML) 表現を生成します。</summary>
      <returns>この DbGeography 値の GML 表現を含む文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>この DbGeography 値の既知のテキスト表現を生成します。ポイントの Longitude と Latitude のみが含まれます。</summary>
      <returns>この DbGeography 値の既知のテキスト表現を含む文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>geography インスタンスからの距離が指定した値以下のすべての点の和集合を表す geography オブジェクトを返します。</summary>
      <returns>すべての点の和集合を表す geography オブジェクト</returns>
      <param name="distance">距離。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>座標系に関連付けられた識別子を取得します。</summary>
      <returns>座標系に関連付けられた識別子。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>geography 値 (WGS 84) の既定の座標系 ID (SRID) を取得します。</summary>
      <returns>geography 値 (WGS 84) の既定の座標系 ID (SRID)。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography 値と別の DbGeography 値の差を計算します。</summary>
      <returns>この geography 値と other の差を表す新しい DbGeography 値。</returns>
      <param name="other">この値との差を計算する必要がある geography 値。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の次元を取得します。値がコレクションの場合は、最大の要素の次元を取得します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の次元。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography が指定した DbGeography 引数から空間的に離れているかどうかを判断します。</summary>
      <returns>other がこの geography 値から離れている場合は true。それ以外の場合は false。</returns>
      <param name="other">この geography 値と結合解除を比較する必要がある geography 値。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography 値と別の DbGeography 値内の最も近いポイント間の距離を計算します。</summary>
      <returns>この geography 値と other で最も近い 2 点間の距離を指定する double 値。</returns>
      <param name="other">この値からの距離を計算する必要がある geography 値。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>特定の場所にある DbGeography 値が地理のコレクションを表す場合、その値の要素を返します。&amp;amp;lt;param name="index"&amp;amp;gt;要素を取得する、この geography 値内の位置。&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;値が他の geography 値のコレクションを表す場合は、指定された位置でのこの geography 値の要素。それ以外の場合は、null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>特定の位置からのこの DbGeography 値の要素</returns>
      <param name="index">インデックス。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>この DbGeography 値が geography 値のコレクションを表す場合、その要素の数を取得します。&amp;amp;lt;returns&amp;amp;gt;他の geography 値のコレクションを表す場合は、この geography 値の要素の数。それ以外の場合は null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>この DbGeography 値の要素の数。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>この DbGeography 値が点を表している場合、その高さ (Z 座標) を取得します。&amp;amp;lt;returns&amp;amp;gt;点を表す場合は、この geography 値の高さ (Z 座標) の値。それ以外の場合は null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>この DbGeography 値の高さ (Z 座標)。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>この値の始点を表す DbGeography 値を取得します。この DbGeography 値が曲線を表していない場合は null になります。</summary>
      <returns>この値の始点を表す DbGeography 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>指定された既知のバイナリ値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>既定の地理の座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) で既知のバイナリ値によって定義される新しい DbGeography 値。</returns>
      <param name="wellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeography 値。</returns>
      <param name="wellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>指定された Geography Markup Language (GML) 値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>既定の地理の座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) で GML 値によって定義される新しい DbGeography 値。</returns>
      <param name="geographyMarkup">geography 値の Geography Markup Language (GML) 表現を含む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>指定した Geography Markup Language (GML) 値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>指定された座標系識別子で GML 値によって定義される新しい DbGeography 値。</returns>
      <param name="geographyMarkup">geography 値の Geography Markup Language (GML) 表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>指定された既知のテキスト値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>既定の地理の座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) で既知のテキスト値によって定義される新しい DbGeography 値。</returns>
      <param name="wellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeography 値。</returns>
      <param name="wellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeography 値。</returns>
      <param name="geographyCollectionWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeography 値。</returns>
      <param name="geographyCollectionWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography 値と別の DbGeography 値の交差を計算します。</summary>
      <returns>この geography 値と other の間の交差を表す新しい DbGeography 値。</returns>
      <param name="other">この値との交差を計算する必要がある geography 値。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography 値が指定した DbGeography 引数と空間的に交差するかどうかを判断します。</summary>
      <returns>other がこの geography 値と交差する場合は true。それ以外の場合は false。</returns>
      <param name="other">この geography 値と交差を比較する必要がある geography 値。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>この DbGeography 値が閉じているかどうかを示す null 許容型のブール値を取得します。この値が曲線を表していない場合は null が返されます。</summary>
      <returns>この DbGeography 値が閉じている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>この DbGeography 値の値が空であるかどうかを示す null 許容のブール値を取得します。</summary>
      <returns>この DbGeography 値が空の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>この DbGeography 値が点を表している場合、その緯度座標を取得します。&amp;amp;lt;returns&amp;amp;gt;点を表す場合は、この geography 値の緯度座標の値。それ以外の場合は null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>この DbGeography 値の緯度座標。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>この DbGeography 値の長さを示す null 許容型の double 値を取得します。この値が曲線を表していない場合は null が返されます。</summary>
      <returns>この DbGeography 値の長さを示す null 許容の double 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeography 値。</returns>
      <param name="lineWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeography 値。</returns>
      <param name="lineWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>この DbGeography 値が点を表している場合、その経度座標を取得します。&amp;amp;lt;returns&amp;amp;gt;点を表す場合は、この geography 値の経度座標の値。それ以外の場合は null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>この DbGeography 値の経度座標。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>この DbGeography 値が点を表している場合、その M (メジャー) 座標を取得します。&amp;amp;lt;returns&amp;amp;gt;点を表す場合は、この geography 値の M (メジャー) 座標の値。それ以外の場合は null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>この DbGeography 値の M (メジャー) 座標。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>バイナリ値から複数行値を返します。</summary>
      <returns>バイナリ値からの複数行値。</returns>
      <param name="multiLineWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>既知のテキスト値から複数行値を返します。</summary>
      <returns>既知のテキスト値からの複数行値。</returns>
      <param name="multiLineWellKnownText">既知のテキスト。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>既知のバイナリ値からマルチポイント値を返します。</summary>
      <returns>既知のバイナリ値からのマルチポイント値。</returns>
      <param name="multiPointWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>既知のテキスト値からマルチポイント値を返します。</summary>
      <returns>既知のテキスト値からのマルチポイント値。</returns>
      <param name="multiPointWellKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>既知のバイナリ値からマルチポリゴン値を返します。</summary>
      <returns>既知のバイナリ値からのマルチポリゴン値。</returns>
      <param name="multiPolygonWellKnownBinary">既知のバイナリ値からのマルチポリゴン。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>既知のテキスト値からマルチポリゴン値を返します。</summary>
      <returns>既知のテキスト値からのマルチポリゴン値。</returns>
      <param name="multiPolygonWellKnownText">既知のテキスト値からのマルチポリゴン。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>特定の場所にあるこの DbGeography 値がラインストリングまたは線形リングを表す場合、その値の要素を返します。&amp;amp;lt;param name="index"&amp;amp;gt;要素を取得する、この geography 値内の位置。&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;値がラインストリングまたは線形リングを表す場合は、指定された位置でのこの geography 値の要素。それ以外の場合は、null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>特定の位置からのこの DbGeography 値の要素</returns>
      <param name="index">インデックス。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>この DbGeography 値がラインストリングまたは線形リングを表す場合、そのポイント数を取得します。&amp;amp;lt;returns&amp;amp;gt;ラインストリングまたは線形リングを表す場合は、この geography 値の要素の数。それ以外の場合は null。&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>この DbGeography 値のポイントの数。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeography 値。</returns>
      <param name="pointWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeography 値。</returns>
      <param name="pointWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeography 値。</returns>
      <param name="polygonWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeography 値。</returns>
      <param name="polygonWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeography 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>この空間型の操作に使用される空間プロバイダーを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>構築基である基盤のプロバイダーに固有であるこの DbGeography 値の表現を取得します。</summary>
      <returns>この DbGeography 値の表現。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography が指定した DbGeography 引数と空間的に等しいかどうかを判断します。</summary>
      <returns>other がこの geography 値と空間的に等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">この geography 値と等価性を比較する必要がある geography 値。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>DBGeography の空間型名を取得します。</summary>
      <returns>DBGeography の空間型名。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>この値の始点を表す DbGeography 値を取得します。この DbGeography 値が曲線を表していない場合は null になります。</summary>
      <returns>この値の始点を表す DbGeography 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography 値と別の DbGeography 値の対称差を計算します。</summary>
      <returns>この geography 値と other の間の対称差を表す新しい DbGeography 値。</returns>
      <param name="other">この値との対称差を計算する必要がある geography 値。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>geography 値の文字列形式を返します。</summary>
      <returns>geography 値の文字列表現。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>この DbGeography 値と別の DbGeography 値の和集合を計算します。</summary>
      <returns>この geography 値と other の間の和集合を表す新しい DbGeography 値。</returns>
      <param name="other">この値との和集合を計算する必要がある geography 値。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>この DbGeography 値の、データ コントラクトのシリアル化可能な既知の表現を取得または設定します。</summary>
      <returns>この DbGeography 値の、データ コントラクトのシリアル化可能な既知の表現。</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値のデータ コントラクトのシリアル化可能な表現。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>この値の座標系識別子 (SRID) を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>この値の既知のバイナリ表現を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>この値の既知のテキスト表現を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>幾何学図形を表します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>この DbGeometry 値の面積を示す null 許容型の double 値を取得します。この値が面を表していない場合は null が返されます。</summary>
      <returns>この DbGeometry 値の領域を示す null 許容の double 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>この DbGeometry 値の既知のバイナリ表現を生成します。</summary>
      <returns>この DbGeometry 値の既知のバイナリ表現。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>この DbGeometry 値の Geography Markup Language (GML) 表現を生成します。</summary>
      <returns>この DbGeometry 値の GML 表現を含む文字列。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>この DbGeometry 値の既知のテキスト表現を生成します。ポイントの X 座標と Y 座標のみが含まれます。</summary>
      <returns>この DbGeometry 値の既知のテキスト表現を含む文字列。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>DbGeometry オブジェクトの境界を取得します。</summary>
      <returns>DbGeometry オブジェクトの境界。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>geometry インスタンスからの距離が指定した値以下のすべての点の和集合を表す geometry オブジェクトを返します。</summary>
      <returns>すべての点の和集合を表す geometry オブジェクト。</returns>
      <param name="distance">距離。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>この DbGeometry 値の重心を表す DbGeometry 値を取得します。この値が面を表していない場合は null になります。</summary>
      <returns>この DbGeometry 値の重心を表す DbGeometry 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値が指定した DbGeometry 引数を空間的に含んでいるかどうかを判断します。</summary>
      <returns>この geometry 値に other が含まれている場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値とコンテインメントを比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>この DbGeometry 値の凸包を別の DbGeometry 値として取得します。</summary>
      <returns>別の DbGeometry 値として表される、この DbGeometry 値の凸包。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>DbGeometry オブジェクトの座標系識別子を取得します。</summary>
      <returns>DbGeometry オブジェクトの座標系識別子。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値が指定した DbGeometry 引数と空間的に交わるかどうかを判断します。</summary>
      <returns>other がこの geometry 値と交わる場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値と比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>geometry 値の既定の座標系 ID (SRID) を取得します。</summary>
      <returns>geometry 値の既定の座標系 ID (SRID)。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値と別の DbGeometry 値の差を計算します。</summary>
      <returns>この geometry 値と other の差を表す新しい DbGeometry 値。</returns>
      <param name="other">この値との差を計算する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の次元を取得します。値がコレクションの場合は、最大の要素の次元を取得します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の次元。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry が指定した DbGeometry 引数から空間的に離れているかどうかを判断します。</summary>
      <returns>other がこの geometry 値から離れている場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値と結合解除を比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値と別の DbGeometry 値内の最も近いポイント間の距離を計算します。</summary>
      <returns>この geometry 値と other で最も近い 2 点間の距離を指定する double 値。</returns>
      <param name="other">この値からの距離を計算する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>特定の場所にあるこの DbGeography 値が geography コレクションを表す場合、その値の要素を返します。</summary>
      <returns>値が他のジオメトリ値のコレクションを表す場合は、指定された位置でのこのジオメトリ値の要素。それ以外の場合は、null。</returns>
      <param name="index">要素を取得する、このジオメトリ値内の位置。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>この DbGeometry 値がジオメトリ コレクションを表す場合、その要素の数を取得します。</summary>
      <returns>他の geometry 値を表す場合は、この geometry 値の要素の数。それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>この DbGeometry 値が点を表している場合、その高さ (Z 座標) を取得します。</summary>
      <returns>ポイントを表す場合はこの DbGeometry 値の高さ (Z 座標)、それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>この値の始点を表す DbGeometry 値を取得します。この DbGeometry 値が曲線を表していない場合は null になります。</summary>
      <returns>この値の始点を表す DbGeometry 値。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>この DbGeometry 値のエンベロープ (最小境界ボックス) をジオメトリ値として取得します。</summary>
      <returns>この DbGeometry 値のエンベロープ (最小境界ボックス)。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>この DbGeometry 値の外部リングを表す DbGeometry 値を取得します。この値が多角形を表していない場合は null になります。</summary>
      <returns>この DbGeometry 値の外部リングを表す DbGeometry 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>指定された既知のバイナリ値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>既定のジオメトリ座標系識別子 (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) で既知のバイナリ値によって定義される新しい DbGeometry 値。</returns>
      <param name="wellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeometry 値。</returns>
      <param name="wellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownBinary" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>指定された Geography Markup Language (GML) 値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>既定のジオメトリ座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) で GML 値によって定義される新しい DbGeometry 値。</returns>
      <param name="geometryMarkup">geometry 値の Geography Markup Language (GML) 表現を含む文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>指定した Geography Markup Language (GML) 値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>指定された座標系識別子で GML 値によって定義される新しい DbGeometry 値。</returns>
      <param name="geometryMarkup">geometry 値の Geography Markup Language (GML) 表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryMarkup" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>指定された既知のテキスト値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>既定のジオメトリ座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) で既知のテキスト値によって定義される新しい DbGeometry 値。</returns>
      <param name="wellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeometry 値。</returns>
      <param name="wellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wellKnownText" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeometry 値。</returns>
      <param name="geometryCollectionWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownBinary" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeometry 値。</returns>
      <param name="geometryCollectionWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryCollectionWellKnownText" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>特定の場所にあるこの DbGeography 値が多角形を表す場合、その値から内部リングを返します。</summary>
      <returns>値が多角形を表す場合は、指定された位置でのこのジオメトリ値の内部リング。それ以外の場合は、null。</returns>
      <param name="index">内部リングを取得するジオメトリ値内の位置。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>この DbGeometry 値が多角形を表す場合、その内部リングの数を取得します。</summary>
      <returns>多角形を表す場合は、この geometry 値の要素の数。それ以外の場合は null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値と別の DbGeometry 値の交差を計算します。</summary>
      <returns>この geometry 値と other の間の交差を表す新しい DbGeometry 値。</returns>
      <param name="other">この値との交差を計算する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値が指定した DbGeometry 引数と空間的に交差するかどうかを判断します。</summary>
      <returns>other がこの geometry 値と交差する場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値と交差を比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>この DbGeometry 値が閉じているかどうかを示す null 許容型のブール値を取得します。この値が曲線を表していない場合は null が返されます。</summary>
      <returns>この DbGeometry 値が閉じている場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>この DbGeometry 値が空かどうかを示す null 許容型のブール値を取得します。この値が曲線を表していない場合は null が返されます。</summary>
      <returns>この DbGeometry 値が空の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>この DbGeometry 値がリングかどうかを示す null 許容型のブール値を取得します。この値が曲線を表していない場合は null が返されます。</summary>
      <returns>この DbGeometry 値がリングの場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>この DbGeometry 値の値が simple であるかどうかを示す null 許容のブール値を取得します。</summary>
      <returns>この DbGeometry 値が simple の場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>この DbGeometry 値の値が有効であるかどうかを示す null 許容のブール値を取得します。</summary>
      <returns>この DbGeometry 値が有効な場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>この DbGeometry 値の長さを示す null 許容型の double 値を取得します。この値が曲線を表していない場合は null が返されます。</summary>
      <returns>この DbGeometry 値の長さ。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeometry 値。</returns>
      <param name="lineWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownBinary" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeometry 値。</returns>
      <param name="lineWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lineWellKnownText" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>この DbGeometry 値が点を表している場合、そのメジャー (M 座標) を取得します。</summary>
      <returns>点を表している場合は、このジオメトリ値の M (メジャー) 座標。それ以外の場合は、null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>バイナリ値から複数行値を返します。</summary>
      <returns>バイナリ値からの複数行値。</returns>
      <param name="multiLineWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>既知のテキスト値から複数行値を返します。</summary>
      <returns>既知のテキスト値からの複数行値。</returns>
      <param name="multiLineWellKnownText">既知のテキスト。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>既知のバイナリ値からマルチポイント値を返します。</summary>
      <returns>既知のバイナリ値からのマルチポイント値。</returns>
      <param name="multiPointWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>既知のテキスト値からマルチポイント値を返します。</summary>
      <returns>既知のテキスト値からのマルチポイント値。</returns>
      <param name="multiPointWellKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>既知のバイナリ値からマルチポリゴン値を返します。</summary>
      <returns>既知のテキスト値からのマルチポイント値。</returns>
      <param name="multiPolygonWellKnownBinary">既知のテキスト値からのマルチポリゴン。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>既知のバイナリ値からマルチポリゴン値を返します。</summary>
      <returns>既知のバイナリ値からのマルチポリゴン値。</returns>
      <param name="multiPolygonWellKnownText">既知のテキスト値からのマルチポリゴン。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値が指定した DbGeometry 引数と空間的に重複するかどうかを判断します。</summary>
      <returns>この geometry 値が other と重複する場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値と重複を比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>特定の場所にあるこの DbGeometry 値がラインストリングまたは線形リングを表す場合、その値の要素を返します。</summary>
      <returns>値がラインストリングまたは線形リングを表す場合は、指定された位置でのこのジオメトリ値の要素。それ以外の場合は、null。</returns>
      <param name="index">要素を取得する、このジオメトリ値内の位置。</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>この DbGeometry 値がラインストリングまたは線形リングを表す場合、そのポイント数を取得します。</summary>
      <returns>ラインストリングまたは線形リングを表す場合は、この geometry 値の要素の数。それ以外の場合は null。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeometry 値。</returns>
      <param name="pointWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownBinary" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeometry 値。</returns>
      <param name="pointWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pointWellKnownText" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>この DbGeometry 値のサーフェイス上の点を取得します。この値がサーフェイスを表していない場合は null になります。</summary>
      <returns>この DbGeometry 値のサーフェス上の点。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のバイナリ値によって定義される新しい DbGeometry 値。</returns>
      <param name="polygonWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownBinary" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子を持つ既知のテキスト値によって定義される新しい DbGeometry 値。</returns>
      <param name="polygonWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい DbGeometry 値を使用する必要がある座標系の識別子。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="polygonWellKnownText" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="coordinateSystemId" /> が無効です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>この空間型の操作に使用される空間プロバイダーを取得します。</summary>
      <returns>この空間型の操作に使用される空間プロバイダー。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>構築基である基盤のプロバイダーに固有であるこの DbGeometry 値の表現を取得します。</summary>
      <returns>この DbGeometry 値の表現。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>この DbGeometry 値と指定した DbGeometry 引数が、指定した DE-9IM (Dimensionally Extended Nine-Intersection Model) 交差パターンに従って空間的に関連しているかどうかを判断します。</summary>
      <returns>この geometry 値が指定された交差パターン行列に従って other と関連する場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値とリレーションシップを比較する必要がある geometry 値。</param>
      <param name="matrix">関係を定義する (DE-9IM) 交差パターンのテキスト表現を含む文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> および <paramref name="matrix" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry が指定した DbGeometry 引数と空間的に等しいかどうかを判断します。</summary>
      <returns>other がこの geometry 値と空間的に等しい場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値と等価性を比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>この DbGeometry 値の空間的な型名の表現を取得します。</summary>
      <returns>この DbGeometry 値の空間的な型名の表現。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>この値の始点を表す DbGeometry 値を取得します。この DbGeometry 値が曲線を表していない場合は null になります。</summary>
      <returns>この値の始点を表す DbGeometry 値。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値と別の DbGeometry 値の対称差を計算します。</summary>
      <returns>この geometry 値と other の間の対称差を表す新しい DbGeometry 値。</returns>
      <param name="other">この値との対称差を計算する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>geometry 値の文字列形式を返します。</summary>
      <returns>geometry 値の文字列表現。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値が指定した DbGeometry 引数と空間的に接触するかどうかを判断します。</summary>
      <returns>other がこの geometry 値に接触する場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値と比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値と別の DbGeometry 値の和集合を計算します。</summary>
      <returns>この geometry 値と other の和集合を表す新しい DbGeometry 値。</returns>
      <param name="other">この値との和集合を計算する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>この DbGeometry 値の、データ コントラクトのシリアル化可能な既知の表現を取得または設定します。</summary>
      <returns>この DbGeometry 値の、データ コントラクトのシリアル化可能な既知の表現。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この DbGeometry 値が指定した DbGeometry 引数内に空間的に含まれているかどうかを判断します。</summary>
      <returns>この geometry 値が other 内の場合は true。それ以外の場合は false。</returns>
      <param name="other">この geometry 値とコンテインメントを比較する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> が null です。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>この DbGeometry 値が点を表している場合、その X 座標を取得します。</summary>
      <returns>ポイントを表す場合は、このジオメトリ値の X 座標値。それ以外の場合は null。</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>この DbGeometry 値が点を表している場合、その Y 座標を取得します。</summary>
      <returns>ポイントを表す場合は、このジオメトリ値の Y 座標値。それ以外の場合は null。</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値のデータ コントラクトのシリアル化可能な表現。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>この値の座標系識別子 (SRID) を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>この値の既知のバイナリ表現を取得または設定します。</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>この値の既知のテキスト表現を取得または設定します。</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>地理空間 (Geometry または Geography) 型のサポートに対応したプロバイダー非依存サービス API。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>派生型で実装された場合、指定された列の序数で列から <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のインスタンスを読み取ります。</summary>
      <returns>指定された列値における、DbGeography のインスタンス。</returns>
      <param name="ordinal">geography 値を格納する列の序数。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>指定された列序数の列から <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のインスタンスを非同期で読み取ります。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された列値の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のインスタンスが示されます。</returns>
      <param name="ordinal">geography 値を格納する列の序数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>派生型で実装された場合、指定された列の序数で列から <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のインスタンスを読み取ります。</summary>
      <returns>指定された列値における、DbGeometry のインスタンス。</returns>
      <param name="ordinal">プロバイダー固有のジオメトリ データを含むデータ レコード列の序数。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>指定された列序数の列から <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のインスタンスを非同期で読み取ります。</summary>
      <returns>非同期操作を表すタスク。タスクの結果には、指定された列値の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のインスタンスが示されます。</returns>
      <param name="ordinal">プロバイダー固有のジオメトリ データを含むデータ レコード列の序数。</param>
      <param name="cancellationToken">タスクの完了を待機しているときに観察する <see cref="T:System.Threading.CancellationToken" />。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>指定された列序数の列が geography 型であるかどうかを返します。</summary>
      <returns>指定された列序数の列が geography 型の場合は true、それ以外の場合は false。</returns>
      <param name="ordinal">列の序数。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>指定された列序数の列が geometry 型であるかどうかを返します。</summary>
      <returns>指定された列序数の列が geometry 型の場合は true、それ以外の場合は false。</returns>
      <param name="ordinal">列の序数。</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>地理空間 (Geometry または Geography) 型のサポートに対応したプロバイダー非依存サービス API。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の既知のバイナリ表現を取得します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の既知のバイナリ表現。</returns>
      <param name="geographyValue">既知のバイナリを生成する必要がある geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の既知のバイナリ表現を取得します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の既知のバイナリ表現。</returns>
      <param name="geometryValue">既知のバイナリを生成する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>この <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の Geography Markup Language (GML) 表現を生成します。</summary>
      <returns>この DbGeography 値の GML 表現を含む文字列。</returns>
      <param name="geographyValue">GML を生成する必要がある geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>この <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の Geography Markup Language (GML) 表現を生成します。</summary>
      <returns>この DbGeometry 値の GML 表現を含む文字列。</returns>
      <param name="geometryValue">GML を生成する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の既知のテキスト表現を取得します。この値は、ポイントの Longitude と Latitude のみを含む必要があります。</summary>
      <returns>geographyValue の既知のテキスト表現を含む文字列。</returns>
      <param name="geographyValue">既知のテキストを生成する必要がある geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>点の X 座標および Y 座標のみを含む、指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の既知のテキスト表現を取得します。</summary>
      <returns>geometryValue の既知のテキスト表現を含む文字列。</returns>
      <param name="geometryValue">既知のテキストを生成する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>昇格とメジャーがある <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> のテキスト表現を返します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> のテキスト表現。</returns>
      <param name="geographyValue">geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>昇格とメジャーがある <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> のテキスト表現を返します。</summary>
      <returns>昇格とメジャーがある <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> のテキスト表現。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値から distance 以下の距離にあるすべての点を表す geography 値を作成します。</summary>
      <returns>この geographyValue から distance 以下の距離にあるすべての点を表す、新しい DbGeography 値。</returns>
      <param name="geographyValue">geography 値。</param>
      <param name="distance">geographyValue からバッファーへの距離を指定する double 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値から distance 以下の距離にあるすべての点を表す geometry 値を作成します。</summary>
      <returns>geometryValue から distance 以下の距離にあるすべての点を表す新しい DbGeometry 値。</returns>
      <param name="geometryValue">geometry 値。</param>
      <param name="distance">geometryValue からバッファーへの距離を指定する double 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>一方の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に他方の値を含んでいるかどうかを判断します。</summary>
      <returns>geometryValue に otherGeometry が含まれる場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>このメソッドは、派生実装での使用に適していることを確認するために、指定したプロバイダー値の適切な有効性検査後の <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> の派生実装で使用することを想定しています。</summary>
      <returns>指定した providerValue が含まれ、空間的な実装として指定した spatialServices を使用する新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> インスタンス。</returns>
      <param name="spatialServices">空間機能の実装用に、返された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が依存する空間サービス インスタンス。</param>
      <param name="providerValue">プロバイダー値。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>このメソッドは、派生実装での使用に適していることを確認するために、指定したプロバイダー値の適切な有効性検査後の <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> の派生実装で使用することを想定しています。</summary>
      <returns>指定した providerValue が含まれ、空間的な実装として指定した spatialServices を使用する新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> インスタンス。</returns>
      <param name="spatialServices">空間機能の実装用に、返された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が依存する空間サービス インスタンス。</param>
      <param name="providerValue">プロバイダー値。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>既知の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 表現に基づいて、この空間サービスの実装と互換性があるプロバイダー固有の値を作成します。</summary>
      <returns>この空間サービスの実装と互換性のある方法で、wellKnownValue に格納された情報をエンコードするプロバイダー固有の値。</returns>
      <param name="wellKnownValue">geography 値の既知の表現を含む <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>既知の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 表現に基づいて、この空間サービスの実装と互換性があるプロバイダー固有の値を作成します。</summary>
      <returns>この空間サービスの実装と互換性のある方法で、wellKnownValue に格納された情報をエンコードするプロバイダー固有の値。</returns>
      <param name="wellKnownValue">geometry 値の既知の表現を含む <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> インスタンス。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>標準の既知の空間形式のいずれかまたは両方を使用して、指定した <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> 値を表す <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のインスタンスを作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" /> としての geographyValue の既知の表現。</returns>
      <param name="geographyValue">geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>標準の既知の空間形式のいずれかまたは両方を使用して、指定した <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> 値を表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のインスタンスを作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" /> としての geometryValue の既知の表現。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に交わるかどうかを判断します。</summary>
      <returns>geometryValue が otherGeometry と交わる場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>
        <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> の既定のサービスを取得します。</summary>
      <returns>既定のサービス。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の差を計算します。</summary>
      <returns>geographyValue と otherGeography の差を表す新しい DbGeography 値。</returns>
      <param name="geographyValue">最初の geography 値。</param>
      <param name="otherGeography">2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の差を計算します。</summary>
      <returns>geometryValue と otherGeometry の間の差を表す新しい DbGeometry 値。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が空間的に非結合であるかどうかを判断します。</summary>
      <returns>geographyValue が otherGeography から結合解除されている場合は true。それ以外の場合は false。</returns>
      <param name="geographyValue">結合解除を比較する最初の geography 値。</param>
      <param name="otherGeography">結合解除のために比較する 2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に非結合であるかどうかを判断します。</summary>
      <returns>geometryValue が otherGeometry から結合解除されている場合は true、それ以外の場合は false。</returns>
      <param name="geometryValue">結合解除を比較する最初の geometry 値。</param>
      <param name="otherGeometry">結合解除のために比較する 2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の最も近いポイント間の距離を計算します。</summary>
      <returns>geographyValue と otherGeography の最も近い 2 点間の距離を指定する double 値。</returns>
      <param name="geographyValue">最初の geography 値。</param>
      <param name="otherGeography">2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の最も近いポイント間の距離を計算します。</summary>
      <returns>geometryValue と otherGeometry の最も近い 2 点間の距離を指定する double 値。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が地理コレクションを表す場合、その値の要素を返します。</summary>
      <returns>他の geography 値を表す場合は位置 index での geographyValue 内の要素。それ以外の場合は null。</returns>
      <param name="geographyValue">geography 値。地理コレクションを表す必要はありません。</param>
      <param name="index">要素を取得する、geography 値内の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がジオメトリ コレクションを表す場合、その値の要素を返します。</summary>
      <returns>他の geometry 値を表す場合は位置 index での geometryValue 内の要素。それ以外の場合は null。</returns>
      <param name="geometryValue">geometry 値。ジオメトリ コレクションを表す必要はありません。</param>
      <param name="index">要素を取得する、geometry 値内の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="geographyCollectionWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="geographyCollectionWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>指定した既知のバイナリ値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>既定の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) で既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="wellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="wellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>指定された Geography Markup Language (GML) 値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>既定の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) で GML 値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="geographyMarkup">geography 値の Geometry Markup Language (GML) 表現を含む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>指定した Geography Markup Language (GML) 値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) で GML 値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="geographyMarkup">geography 値の Geometry Markup Language (GML) 表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>この空間サービスの実装と互換性があるプロバイダー固有の値に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>この空間サービスの実装と指定されたプロバイダー値によってサポートされる新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="providerValue">この空間サービスの実装が geography 値として解釈できるプロバイダー固有の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>指定した既知のテキスト値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>既定の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) で既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="wellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="wellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="lineWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="lineWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> の複数行の値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 複数行値。</returns>
      <param name="multiLineWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> の複数行の値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 複数行値。</returns>
      <param name="multiLineWellKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のマルチポイントの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> マルチポイント値。</returns>
      <param name="multiPointWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のマルチポイントの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> マルチポイント値。</returns>
      <param name="multiPointWellKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のマルチポリゴンの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> マルチポリゴン値。</returns>
      <param name="multiPolygonWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のマルチポリゴンの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> マルチポリゴン値。</returns>
      <param name="multiPolygonKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="pointWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="pointWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="polygonWellKnownBinary">geography 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="polygonWellKnownText">geography 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryCollectionWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のコレクションの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryCollectionWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>指定した既知のバイナリ値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>既定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) で既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="wellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="wellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>指定された Geography Markup Language (GML) 値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>既定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) で GML 値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryMarkup">geometry 値の Geography Markup Language (GML) 表現を含む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>指定した Geography Markup Language (GML) 値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) で GML 値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryMarkup">geometry 値の Geography Markup Language (GML) 表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>この空間サービスの実装と互換性があるプロバイダー固有の値に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>この空間サービスの実装と指定されたプロバイダー値によってサポートされる新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="providerValue">この空間サービスの実装が geometry 値として解釈できるプロバイダー固有の値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="providerValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>指定した既知のテキスト値に基づいて新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>既定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) で既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="wellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="wellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="lineWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 行の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="lineWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> の複数行の値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 複数行値。</returns>
      <param name="multiLineWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> の複数行の値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 複数行値。</returns>
      <param name="multiLineWellKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のマルチポイントの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> マルチポイント値。</returns>
      <param name="multiPointWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のマルチポイントの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> マルチポイント値。</returns>
      <param name="multiPointWellKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のマルチポリゴンの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> マルチポリゴン値。</returns>
      <param name="multiPolygonWellKnownBinary">既知のバイナリ値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のマルチポリゴンの値を作成します。</summary>
      <returns>新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> マルチポリゴン値。</returns>
      <param name="multiPolygonKnownText">既知のテキスト値。</param>
      <param name="coordinateSystemId">座標系識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="pointWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 点の値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="pointWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>指定した既知のバイナリ値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のバイナリ値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="polygonWellKnownBinary">geometry 値の既知のバイナリ表現を含むバイト配列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>指定した既知のテキスト値と座標系識別子 (SRID) に基づいて、新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> のポリゴンの値を作成します。</summary>
      <returns>指定された座標系識別子 (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />) を持つ既知のテキスト値によって定義される新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="polygonWellKnownText">geometry 値の既知のテキスト表現を含む文字列。</param>
      <param name="coordinateSystemId">新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を使用する必要がある座標系の識別子。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の領域を示す null 許容型の double 値を返します。値がサーフェスを表していない場合は null が返されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の領域を示す null 許容の double 値。</returns>
      <param name="geographyValue">geography 値。サーフェスを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の領域を示す null 許容型の double 値を返します。値がサーフェスを表していない場合は null が返されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の領域を示す null 許容の double 値。</returns>
      <param name="geometryValue">geometry 値。サーフェスを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の境界を示す null 許容型の double 値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の境界。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した DbGeometry 値の重心を表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を返します。この値はサーフェスを表していない場合は null になります。</summary>
      <returns>サーフェスを表す場合は geometryValue の重心、それ以外の場合は null。</returns>
      <param name="geometryValue">geometry 値。サーフェスを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の凸包を示す null 許容型の double 値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の凸包。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の座標系識別子を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の座標系識別子。</returns>
      <param name="geographyValue">geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の座標系識別子を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の座標系識別子。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の次元を取得します。値がコレクションの場合は、最大の要素の次元を取得します。</summary>
      <returns>geographyValue の次元。<see cref="T:System.Data.Entity.Spatial.DbGeography" /> がコレクションである場合は、要素の最大次元。</returns>
      <param name="geographyValue">寸法値を取得する必要がある geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の次元を取得します。値がコレクションの場合は、最大の要素の次元を取得します。</summary>
      <returns>geometryValue の次元。<see cref="T:System.Data.Entity.Spatial.DbGeometry" /> がコレクションである場合は、要素の最大次元。</returns>
      <param name="geometryValue">寸法値を取得する必要がある geometry 値。</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が地理コレクションを表す場合、その値に含まれる要素の数を返します。</summary>
      <returns>geographyValue が他の geography 値のコレクションを表す場合は、この geographyValue の要素の数。それ以外の場合は null。</returns>
      <param name="geographyValue">geography 値。地理コレクションを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がジオメトリ コレクションを表す場合、その値に含まれる要素の数を返します。</summary>
      <returns>geometryValue が他の geometry 値のコレクションを表す場合は、この geometryValue の要素の数。それ以外の場合は null。</returns>
      <param name="geometryValue">geometry 値。ジオメトリ コレクションを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値がポイントを表す場合、その高さ (Z 座標) を返します。</summary>
      <returns>ポイントを表す場合は geographyValue の高さ (Z 座標)、それ以外の場合は null。</returns>
      <param name="geographyValue">ポイントを表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がポイントを表す場合、その高さ (Z) を返します。</summary>
      <returns>ポイントを表す場合は geometryValue の高さ (Z)、それ以外の場合は null。</returns>
      <param name="geometryValue">ポイントを表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した DbGeography 値の終点を表す <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を返します。この値が曲線を表していない場合は null になります。</summary>
      <returns>曲線を表す場合は geographyValue の終点、それ以外の場合は null。</returns>
      <param name="geographyValue">曲線を表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した DbGeometry 値の終点を表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を返します。この値が曲線を表していない場合は null になります。</summary>
      <returns>曲線を表す場合は geometryValue の終点、それ以外の場合は null。</returns>
      <param name="geometryValue">曲線を表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値のエンベロープ (最小境界ボックス) を geometry 値として取得します。</summary>
      <returns>
        <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値としての geometryValue のエンベロープ。</returns>
      <param name="geometryValue">エンベロープ値を取得する必要がある geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した DbGeometry 値の外部リングを表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を返します。この値はポリゴンを表していない場合は null になります。</summary>
      <returns>ポリゴンを表す場合、geometryValue の外部リングを表す DbGeometry 値。それ以外の場合は null。</returns>
      <param name="geometryValue">geometry 値。ポリゴンを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がポリゴンを表す場合、その値に含まれる内部リングの数を取得します。</summary>
      <returns>ポリゴンを表す場合は、この geometryValue の要素の数。それ以外の場合は null。</returns>
      <param name="geometryValue">geometry 値。ポリゴンを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が閉じているかどうかを表す null 許容型のブール値を返します。値が曲線を表していない場合は null が返されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が閉じている場合は true。それ以外の場合は false。</returns>
      <param name="geographyValue">曲線を表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が閉じているかどうかを表す null 許容型のブール値を返します。値が曲線を表していない場合は null が返されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が閉じている場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">曲線を表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が空かどうかを表す null 許容型のブール値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が空の場合は true。それ以外の場合は false。</returns>
      <param name="geographyValue">geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空かどうかを表す null 許容型のブール値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空の場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がリングかどうかを表す null 許容型のブール値を返します。値が曲線を表していない場合は null が返されます。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がリングの場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">曲線を表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が単純であるかどうかを表す null 許容型のブール値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が単純である場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が有効かどうかを表す null 許容型のブール値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が有効な場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値がポイントを表す場合、その値の緯度の座標を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の緯度座標。</returns>
      <param name="geographyValue">ポイントを表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の長さを示す null 許容型の double 値を返します。値が曲線を表していない場合は null が返されます。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の長さ。</returns>
      <param name="geographyValue">曲線を表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の長さを示す null 許容型の double 値を返します。値が曲線を表していない場合は null が返されます。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の長さ。</returns>
      <param name="geometryValue">曲線を表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値がポイントを表す場合、その値の経度座標を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の経度座標。</returns>
      <param name="geographyValue">ポイントを表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値がポイントを表す場合、その値の M (メジャー) 座標を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の M (メジャー) 座標。</returns>
      <param name="geographyValue">ポイントを表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がポイントを表す場合、その値の M (メジャー) 座標を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の M (メジャー) 座標。</returns>
      <param name="geometryValue">ポイントを表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値がラインストリングまたは線形リングを表す場合、その値に含まれるポイント数を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値内のポイント数。</returns>
      <param name="geographyValue">geography 値。ラインストリングおよび線形リングを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がラインストリングまたは線形リングを表す場合、その値に含まれるポイント数を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値内のポイント数。</returns>
      <param name="geometryValue">geometry 値。ラインストリングおよび線形リングを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した DbGeometry 値のサーフェス上の点を表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を返します。この値はサーフェスを表していない場合は null になります。</summary>
      <returns>特定の DbGeometry 値のサーフェス上の点を表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryValue">geometry 値。サーフェスを表す必要はありません。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の空間型名を示す値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の空間型名。</returns>
      <param name="geographyValue">geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の空間型名を示す値を返します。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の空間型名。</returns>
      <param name="geometryValue">geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>指定した DbGeography 値の始点を表す <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値を返します。この値が曲線を表していない場合は null になります。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の開始点。</returns>
      <param name="geographyValue">曲線を表す必要のない geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した DbGeometry 値の始点を表す <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値を返します。この値が曲線を表していない場合は null になります。</summary>
      <returns>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の開始点。</returns>
      <param name="geometryValue">曲線を表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がポイントを表す場合、その値の X 座標を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の X 座標。</returns>
      <param name="geometryValue">ポイントを表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がポイントを表す場合、その値の Y 座標を返します。</summary>
      <returns>指定された <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の Y 座標。</returns>
      <param name="geometryValue">ポイントを表す必要のない geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>特定の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がポリゴンの場合、その値から内部リングを返します。</summary>
      <returns>ポリゴンを表す場合は、index 位置における geometryValue の内部リング。それ以外の場合は null。</returns>
      <param name="geometryValue">geometry 値。ポリゴンを表す必要はありません。</param>
      <param name="index">要素を取得する、geometry 値内の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の交差を計算します。</summary>
      <returns>geographyValue と otherGeography の交差を表す新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="geographyValue">最初の geography 値。</param>
      <param name="otherGeography">2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の交差を計算します。</summary>
      <returns>geometryValue と otherGeometry の交差を表す新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が空間的に交差するかどうかを判断します。</summary>
      <returns>geographyValue が otherGeography と交差する場合は true。それ以外の場合は false。</returns>
      <param name="geographyValue">交差を比較する最初の geography 値。</param>
      <param name="otherGeography">積集合のために比較する 2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に交差するかどうかを判断します。</summary>
      <returns>geometryValue が otherGeometry と交差する場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">交差を比較する最初の geometry 値。</param>
      <param name="otherGeometry">積集合のために比較する 2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>直ちにエラーを発生させるのではなく、プロバイダーが必要な型やリソースを所有しているという前提で EF が続行するかどうかを示す値を取得します。既定値は true です。</summary>
      <returns>直ちにエラーを発生させるのではなく、プロバイダーが必要な型やリソースを所有しているという前提で EF が続行する場合は true。それ以外の場合は false。</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に重複するかどうかを判断します。</summary>
      <returns>geometryValue が otherGeometry と重複する場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値がラインストリングまたは線形リングを表す場合、そのポイント要素を返します。</summary>
      <returns>値がラインストリングまたは線形リングを表している場合は、位置 index の geographyValue 内の点。それ以外の場合は null。</returns>
      <param name="geographyValue">geography 値。ラインストリングおよび線形リングを表す必要はありません。</param>
      <param name="index">要素を取得する、geography 値内の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値がラインストリングまたは線形リングを表す場合、そのポイント要素を返します。</summary>
      <returns>値がラインストリングまたは線形リングを表している場合は、位置 index の geometryValue 内の点。それ以外の場合は null。</returns>
      <param name="geometryValue">geometry 値。ラインストリングおよび線形リングを表す必要はありません。</param>
      <param name="index">要素を取得する、geometry 値内の位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が、指定した DE-9IM (Dimensionally Extended Nine-Intersection Model) 交差パターンに従って空間的に関連しているかどうかを判断します。</summary>
      <returns>この geometryValue 値が指定された交差パターン matrix に従って otherGeometry と関連する場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">最初の geometry 値とリレーションシップを比較する必要がある geometry 値。</param>
      <param name="matrix">関係を定義する (DE-9IM) 交差パターンのテキスト表現を含む文字列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />、<paramref name="otherGeometry" />、または <paramref name="matrix" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値が空間的に等しいかどうかを判断します。</summary>
      <returns>geographyValue が otherGeography と空間的に等しい場合は true。それ以外の場合は false。</returns>
      <param name="geographyValue">等しいかどうかを比較する最初の geography 値。</param>
      <param name="otherGeography">等しいかどうかを比較する 2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に等しいかどうかを判断します。</summary>
      <returns>geometryValue が otherGeometry と空間的に等しい場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">等しいかどうかを比較する最初の geometry 値。</param>
      <param name="otherGeometry">等しいかどうかを比較する 2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の対称差を計算します。</summary>
      <returns>geographyValue と otherGeography の対称差を表す新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="geographyValue">最初の geography 値。</param>
      <param name="otherGeography">2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の対称差を計算します。</summary>
      <returns>geometryValue と otherGeometry の対称差を表す新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの指定した <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に接触するかどうかを判断します。</summary>
      <returns>geometryValue が otherGeometry に接触する場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値の和集合を計算します。</summary>
      <returns>geographyValue と otherGeography の和集合を表す新しい <see cref="T:System.Data.Entity.Spatial.DbGeography" /> 値。</returns>
      <param name="geographyValue">最初の geography 値。</param>
      <param name="otherGeography">2 番目の geography 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geographyValue" /> または <paramref name="otherGeography" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>2 つの <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値の和集合を計算します。</summary>
      <returns>geometryValue と otherGeometry の和集合を表す新しい <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>一方の <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> 値が空間的に他方の値内にあるかどうかを判断します。</summary>
      <returns>geometryValue が otherGeometry 内にある場合は true。それ以外の場合は false。</returns>
      <param name="geometryValue">最初の geometry 値。</param>
      <param name="otherGeometry">2 番目の geometry 値。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> が null です。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="geometryValue" /> または <paramref name="otherGeometry" /> は、この空間サービスの実装と互換性がありません。</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions">
      <summary>
        <see cref="T:System.Threading.Tasks.Task" /> クラスの拡張メソッドが含まれています。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)">
      <summary>この <see cref="T:System.Threading.Tasks.Task" /> が継続を元のコンテキストにマーシャリングしないようにするよう待機するために使用する待機機能を構成します。ただし、現在のカルチャと UI カルチャは保持します。</summary>
      <returns>このタスクを待機するために使用するオブジェクト。</returns>
      <param name="task">待機するタスク。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})">
      <summary>この <see cref="T:System.Threading.Tasks.Task`1" /> が継続を元のコンテキストにマーシャリングしないようにするよう待機するために使用する待機機能を構成します。ただし、現在のカルチャと UI カルチャは保持します。</summary>
      <returns>このタスクを待機するために使用するオブジェクト。</returns>
      <param name="task">待機するタスク。</param>
      <typeparam name="T">関連する <see cref="T:System.Threading.Tasks.Task`1" /> によって生成される結果の型。</typeparam>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter">
      <summary>カルチャを保持する <see cref="T:System.Threading.Tasks.Task" /> の待機を許可する待機可能オブジェクトが備えられています。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.#ctor(System.Threading.Tasks.Task)">
      <summary>
        <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter" /> クラスの新しいインスタンスを構築します。</summary>
      <param name="task">待機するタスク。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetAwaiter">
      <summary>
        <see cref="T:System.Threading.Tasks.Task" /> を待機するために使用する待機機能を取得します。</summary>
      <returns>待機機能のインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetResult">
      <summary>完了した <see cref="T:System.Threading.Tasks.Task" /> の待機を終了します。</summary>
      <exception cref="T:System.NullReferenceException">待機機能が正しく初期化されませんでした。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">タスクがキャンセルされました。</exception>
      <exception cref="T:System.Exception">タスクがエラーの状態で完了しました。</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.IsCompleted">
      <summary>この <see cref="T:System.Threading.Tasks.Task" /> が完了したかどうかを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.OnCompleted(System.Action)">
      <summary>このメソッドは実装されていないため、呼び出さないでください。</summary>
      <param name="continuation">待機操作が完了するときに呼び出すアクション。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>この <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" /> と関連付けられた <see cref="T:System.Threading.Tasks.Task" /> の継続をスケジュールします。</summary>
      <param name="continuation">待機操作が完了するときに呼び出すアクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> の引数が null (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.InvalidOperationException">待機機能が正しく初期化されませんでした。</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1">
      <summary>カルチャを保持する <see cref="T:System.Threading.Tasks.Task`1" /> の待機を許可する待機可能オブジェクトが備えられています。</summary>
      <typeparam name="T">関連する <see cref="T:System.Threading.Tasks.Task`1" /> によって生成される結果の型。</typeparam>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>
        <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1" /> クラスの新しいインスタンスを構築します。</summary>
      <param name="task">待機するタスク。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetAwaiter">
      <summary>
        <see cref="T:System.Threading.Tasks.Task`1" /> を待機するために使用する待機機能を取得します。</summary>
      <returns>待機機能のインスタンス。</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetResult">
      <summary>完了した <see cref="T:System.Threading.Tasks.Task`1" /> の待機を終了します。</summary>
      <returns>完了した <see cref="T:System.Threading.Tasks.Task`1" /> の結果。</returns>
      <exception cref="T:System.NullReferenceException">待機機能が正しく初期化されませんでした。</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">タスクがキャンセルされました。</exception>
      <exception cref="T:System.Exception">タスクがエラーの状態で完了しました。</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.IsCompleted">
      <summary>この <see cref="T:System.Threading.Tasks.Task" /> が完了したかどうかを取得します。</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.OnCompleted(System.Action)">
      <summary>このメソッドは実装されていないため、呼び出さないでください。</summary>
      <param name="continuation">待機操作が完了するときに呼び出すアクション。</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>この <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" /> と関連付けられた <see cref="T:System.Threading.Tasks.Task`1" /> の継続をスケジュールします。</summary>
      <param name="continuation">待機操作が完了するときに呼び出すアクション。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="continuation" /> の引数が null (Visual Basic の場合は Nothing) です。</exception>
      <exception cref="T:System.InvalidOperationException">待機機能が正しく初期化されませんでした。</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>エンティティの検証に失敗したときに <see cref="M:System.Data.Entity.DbContext.SaveChanges" /> からスローされる例外を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>既定値を使用して <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>指定したエラー メッセージを使用して、<see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>指定したエラー メッセージと検証結果を使用して、<see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="entityValidationResults">検証結果。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>エラー メッセージ、検証結果、および内部例外を指定して、<see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="entityValidationResults">検証結果。</param>
      <param name="innerException">例外の原因となったエラー。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>エラー メッセージと内部例外を指定して、<see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">例外の原因となったエラー。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>エンティティに関連付けられている検証エラーを取得します。</summary>
      <returns>エンティティに関連付けられている検証エラー。</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>単一のエンティティの検証結果を表します。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" /> クラスのインスタンスを作成します。</summary>
      <param name="entry">結果が適用されるエンティティ エントリ。null になることはありません。</param>
      <param name="validationErrors">
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> インスタンスのリスト。null になることはありません。エンティティが有効であることを示す空にすることができます。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>結果が適用される <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> のインスタンスを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>エンティティが有効かどうかのインジケーターを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>検証エラーを取得します。null になることはありません。</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>検証コードから例外がスローされるときに <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" /> からスローされる例外。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>DbUnexpectedValidationException の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>指定したシリアル化情報とコンテキストを使用して、DbUnexpectedValidationException の新しいインスタンスを初期化します。</summary>
      <param name="info">シリアル化情報。</param>
      <param name="context">ストリーム コンテキスト。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>DbUnexpectedValidationException の新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>DbUnexpectedValidationException の新しいインスタンスを初期化します。</summary>
      <param name="message">例外メッセージ。</param>
      <param name="innerException">内部例外。</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>検証エラー。エンティティ レベルの検証エラーか、プロパティ レベルの検証エラーです。</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Data.Entity.Validation.DbValidationError" /> のインスタンスを作成します。</summary>
      <param name="propertyName">無効なプロパティの名前。null を使用できます。</param>
      <param name="errorMessage">検証エラー メッセージ。null を使用できます。</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>検証エラー メッセージを取得します。</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>無効なプロパティの名前を取得します。</summary>
    </member>
  </members>
</doc>